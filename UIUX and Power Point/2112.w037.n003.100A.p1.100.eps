%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/24/2021
%%BoundingBox: 0 0 581 400
%%HiResBoundingBox: 0 0 580.9493 400
%%CropBox: 0 0 580.9493 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 24939 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9CBA8FFA9CBA8FFA9CBA8FF
%A9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9FFA9FFA9CBA8FFA9CBA8FFA9FF
%A8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FF
%A9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CB
%A8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A87D7EA8A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A952F8F827FFA9FFA9FFA9FFA9A22752A8FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A97DF826207DA9A9A8A9A8CBA97D21214BA1A9A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8CBA8
%7D52A8527EA8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8CBA8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9FFA9CBA8FFA9CBA8FF
%A9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FF7E4B4B76A2FFA8FFA9CBA9A8214C
%769AA1FFA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FF
%A9CBA8FFA9CBA9A8FD04F852FFA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8
%FFA9A97EA37FA9A8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8FFA1996FCAA9A9
%A8A9A8A821214BC27577A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A97D4BF8F827A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A97E774C7E7EA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9A999A0A9FFA9FFA9FF7E4C4C9B9FA04CA9A9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9CA99C32627A9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA8A8A2A9A9FFA9FF75994BA8A9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A97E7F7EA17DA9A8A9A8CBA84C4C9C71A0A0777EAFA8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8AF
%A29A7520F8A9A9A9A8A9A8A9A8A9A8A9A8A9A9A252FFA1A9A8A9A8A06FC3
%A9AFA8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8A97F7F7FA37F7F7FA9A9CBA9A84C9C71
%729BC89A9CA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FF77A09AA14B4B53FFA9CBA8FFA9CBA8FFA9CBA8FFA27DCA
%C2A8FFA9FFA1A0A1C3A1CBA9FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A97E7F7E7F7E7F7E7F
%7ECBA8A97E72717171A19F7771A2A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A97E4CC1C89F4C9F7B52A9A8A9A8A9A8A9
%A8A9A8A9A8CB76536FC9A9A894BCBCBC93B594A2A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A97F
%A37FA37FA97FA37FA3A9FFA9A27178719C7171719B71A9A9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A175C8C7C89AA0C7
%A0A9FFA9FFA9FFA9FFA9FFA9FFA9A99AC2C2C39ABCB5BC93BCB5BC93CAA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8CB7E7F7E7F7F7F7E7F7E7F7EA9A8A99B9B71727171717770A2
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8C9
%75A0C7C79FC2BCC8C1CAA9A9A8A9A8A9A8A9A8A9A8A9A9CA99C2BBBC9ABC
%93BC93BC93B593CAA9A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9FFA8A37F7F7EA37F7F7FA37EA27FA9A8C3C2
%C39B9C4D9C71BDC3FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA9CAC7A09FC8C7C876C3C2C2A1FFA9CBA8FFA9CBA8FFA9CBA8
%FFA8C2BCC2BCBC93BCB5BC9ABCB5BC9AFFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A87F7E7F7E7E7D7F7E7F
%7E7F7E7F7ECABCC29A784D7171729AC2A2A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A9A89AC29FC8C1C8C1769AC3BC9A7EFFA8A9
%A8A9A8A9A8A9A8A9A8A9A1C299BC9AB593BC93BC9AB593BCA8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A97F
%A37F7F7EA97FA37FA97FA87FA9C3C3BC774D71719C71C3C2C9A9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9CAC2C3C2C2C1C8C7C89F
%9BC2C39A7EA9FFA9FFA9FFA9FFA9FFA9FFA9FFA8CAA1BC93BCB5BC93BDBC
%C2C2CBA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8FF7E7F7E7F7EA97E7F7E7F7E7F7E7F7EC3C276224C4C717172
%9AC2BCCAA9A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8CABCC2
%BCC3A1C7C1C8C1C7759AC29A53FFA8A9A8A9A8A9A8A9A8A9A8A9A8A9A9AF
%9AB593BC93B59AC3BBC2A1AFA8A9A8A9A8A9A8A9A8A9A8A9A8A9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9A9A8C9A1A37FA9A97F7FA97F7F7FA9A2C3C2
%C34C4D4C4D787E78A2C2C2C3FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9C399C3C2CAA8A3A0C8C7C8C7C84C764677A9FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA9A194BC949B70A2A1C2BCCAA9FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8FF7E4C99BC767FA8A8777E
%787E787E78C399999A76224C4C7F7F7F84CA9ABCA1FFA8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A97D4C4B9A70A8A9A9777176A09AA0764C224D7DA9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A97778FD0577A899C2A1A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A277BC99
%7DA9FFA27777A2779C77A2CA996FCA7F7F7EA37FA97FA9A9A199A17DA9A9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A9777EA1A8A9FFA89C7872719C72
%72777E7EFFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA27777A277A277789B
%C2BCC3A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A87DFFA87777A9A8FD04779C777777A9A1A1A8A97F7F7EA97F7F7E
%A977A1777EA2A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8FFA9AFA9CBA9
%A271A2717171A271A9A8FFA8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A2FD
%05777877A099C2BBCAA8A9A8A9A8A9A8A9A8A9A8A9A8A9FFA9CBA8FFA9CB
%A8FFA9CBA9FFA9FF77A9A9A97DFFA9A977A2779CFD0477A2FFA9A97EA37F
%7F7FA97FA9A8A9A9FFA9CBA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9FFA9
%FFA9FFA8FF7872779C7178779CA2FFA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FF779C7777779C77A2A1C39AC9A8A9A8FFA9CBA8FFA9CBA8FFA9CBA8
%A8A9A8A9A8A9A8A9A8A9A8A277A27EA2A8CB7DA8A8AF7EFD067778777EA8
%A9A87F7E7F7E7F7E7F7EA97EA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8FFA8A9A8A9A87871787172717171A8A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A27777774DFD0477A277A2A8FFA8A9A8A9A8A9A8A9A8A9
%A8A9A8A9FFA9FFA9FFA9FFA9FFA9A9777776A17EFFA8A2A9FFA9A277A277
%A277A277A277CBA9FF7FA37FA37FA97FA9A9FFA9FFA9FFAFFFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A97178779C719C719CA2FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9A977A2779C77A277A2A2A277A8A2A8A2
%A9A9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8FF77714CA07677777E
%A8A9A8A9777777787777779C77777EFFA8A9787F7E7F7E7F7EA9777E777E
%777E77A8A8A9A8A9A8A9A8A9A8A9A8A9A8CBA8A9A8A9A8A97872719C7772
%717171A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A97EFD0877A277777D
%A2777777CAA7C9A7CBA8A9A8A9A8A9CBA8FFA9CBA8FFA9FFA2774DA19A77
%777177FFA9FFA29C779C77A2777777A277A2A8FFA9A97FA37FA97FA97E4C
%214C464C214C4CA9A9FFA9CBA8FFA9CBA8FFA9FF77774C774C775277719C
%789C719C7172A2FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9A277A2779C
%77A2779C77774C774C774D77C1C7C7C8A8FFA9CBA8FFA9A8A9A8A9A8A9A8
%A9A8774C77A0774C774C77A8A9A8A271FD0A77A8A8A9A37F7E7F7E7F7F77
%214C224C224C224C7EA9A8A9A8A9A8A9A8A9A8A9A84C4C534C4C4C524C72
%719C7771717271A2A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9FD0577A2
%A29C714C214C214C214C219AC1C7A0A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9
%A84C779AA14D774C77A8FFA9FF77A277A277A2A2A277A2779CA2FFA97F7F
%A97FA97FA977FD074C28A8A9FFA9FFA9FFA9FFA9FFA9CB4C774C774C774C
%77719C789C719C7172A2FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A277
%A2779C77FFA87746FD074C75C8C7C8A8FFA9FFA9FFA9A8A9A8A9A8A9A8A9
%777770A070774C4C7DFFA8CBA8777778777777A87777777877A2A8A97E7F
%7EA37F7F7F7E4C4D4C534C4D4C4C7EA9A8A9A8A9A8A9A8A9A8CBA8774C77
%4C534C774C77719C7771717871A2A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8CB777777787777A8FF7E4C224C224C224C22A0C7C8C1A9A8A9A8A9A8A9
%FFA9CBA8FFA9FF7D774DA0767777774CFFA9CBA9A9779C77A277A2A8A277
%9C779C7EA97FA37F7F7FA97FA953FD044C4D4C4D28A8A9CBA8FFA9CBA8FF
%A9CBA8CB7777537777775377779C719C71787172A2FFA8FFA9CBA8FFA9CB
%A8FFA9CBA8FFA9CBA8A2779C77A277A9A9A84C4C4C70FD044C7DC8C1C8A8
%CBA8FFA9CBA8A8A9A8A9A8A9A2774C77A0774C774CA2A8A9A8A9FD06777E
%A9FD0577A2A27F7E7F7E7F7E7F7F77214C224C214C224C7ECBA8A9A8A9A8
%A9A8A9A8A9A877FD074C7DA2787172717171A2A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9FD0677A2FF7D4C464C214C464C217EC8C79FA9A8A9A8A9
%A8A9FFA9FFA9FFA9A24C77A0A14D774C77A9FFA9FFA8A277A277A277A9A9
%A277A277A277A97FA97F7F7FA97FA953FD074C28A9A9FFA9FFA9FFA9FFA9
%FFA9FFFD084C77FFA29C719C719C9CFFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9A277A277A277A9A9A8FD084C7ECFC1C8A9FFA9FFA9FFA9A8A9A8A9
%A8A84C7776A04D774C53A2A9A8A9A9A8FD05779CA8A9FD0577A27F7F7EA9
%7FA97EA97F7E214C4C4C224C464C7EFFA8A9A8A9A8A9A8A9A8A9A8774C4C
%28FD044C7DA9A971787171719CA8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A97EFD05777EFF7E4C224C224C4C4C217EA9C9A0A9A8A9A8A9A8A9CBA8FF
%A9FF777771A07677774D77FFA9CBA8FFA27777A2777777FFA9A277A2779C
%77A2A2A37FA9A97F7FA97EFD074C28A8A9FFA9CBA8FFA9CBA8FFA9A9FD08
%4C77FFA99C7178717277FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9A977
%A2779C77A2A9A846FD074C7DFFA9CBA8FFA9CBA8FFA9A8A9A8FF7E714C9B
%9A774C774CA8A8A9A8A9A8A2FD0577A2A8FF7D777778779BC1C2C2A17EA2
%9BA27D7E224C224C224C224C7EA9A8A9A8A9A8A9A8A9A8A9A852274C284C
%274C4C77A8A95478779C77A2A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8777778777777CB7E4C214C224C224C217DA8A9A8A9A8A9A8A9A8A9FFA9
%FFA9A24C77A07771774CA2A9FFA9FFA9FFA9C39AC3A1A2A2FFA9A977A19B
%9BA0C8C7C8C7CFC2C1C1C79F4C4C4DFD054CA8A9FFA9FFA9FFA9FFA9FFA9
%CBFD054C524C4C77FFA37F7FA97FA9A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA2A8A0C39AA8A9A8FD084C7DFFA9FFA9FFA9FFA9FFA9A8A9A8
%FF7E7876A04D774C77A8A9A8A9A8A9A8A94C4C4B77A2FFA8CBA9A2454C22
%76C1C8C7C7C1C79EC19EC19F9F4B4C224C214C7EA9A8A9A8A9A8A9A8A9A8
%CBA8534C534C4C4C534C77A8FFA97F7E7F7EA9A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8FFAFFFC1C7C1C1A7FF7E4C214C4C4C224C217DA9A9A8A9A8
%A9A8A9A8A9FFA9CBA8A9A9A87778784C7EFFA9CBA8FFA9FFA24C224C4B76
%A2A9A9FF7E4C224C4C7676C2C7C8C1C8C1C19EC7C0C15277535377FFA9CB
%A8FFA9CBA8FFA9CBA8FF77704C774C774C777EA37FA97F7F7FA3A9CBA8FF
%A9CBA8FFA9CBA8FFA9CBA8FFA9A9A7CEC8C8C1C8C7C9A9A84C77464C4C4C
%464C7DFFA8FFA9CBA8FFA9CBA8A8A9A8A9A8A9A9A97E7F77A9A8A9A8A9A8
%A9A9A2214C224C214C4C7DA9A24B4C454C214C4BA0C7C7C1C9A0A6A0C8A0
%A8A8A97EA9A8A9A8A9A8A9A8A9A8A9A8A9A8C493A27EA87E9A787F7E7F78
%7F7E7F7EA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A7C7C0C7C1C7C1C7A0
%A9A27E7F534C4D4C4C4CA9A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9A9
%A9FFA9FFA9FFA9FFA9FFA8C8FD07A0FFA8C9A0C9A0C9A0C9A1CBA8C9A9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9CBA9FFA9FFA8A9
%A3A97FFD06A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9C9FD05C8CAC9CAA9
%FFA9A9A8FFA9FF7FA9A9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8CB
%A8A9A8A9A8A9A8A9A8A9A8CBA8CBA8CBA8A9A8A9A9A9A8A9A9A9A8A9A8A9
%A9A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A9A9A8A9
%A8A9A8CBA8A9A8FFA8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8FD05A9A8CBA8A9A8CBA8A9A8A9A8A9A8A9A8A9A8A9A8A9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA9FFA9CBA9FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA9FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA9FFA9CBA8FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8FFA9A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8FFA9FFA8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA85227A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFFFFFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FF7D5353A9A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A827F82052FFA8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8CB277DA8527DCB
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A97EF8F8F8A9A9A9A8A9A8A9A8A9A8A9A8A9A8A9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9A820757576A9FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%FFA84B27A8F827A8FFA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9FFA89A26F87DFFA9CBA8FFA9
%CBA8FFA9CBA8FFA9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A0999AA1A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A9A86F9A51F8F87EA9A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A9A26F99
%4BA8A8A9A8A9A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA89A99CBA9FFA9FFA9FFA9FFA8FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA8C29A75F8F87DFFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFCAA09ACAA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A97E7876A171A2A8FFA8A9A8A9A8C8A0CAA8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A976C252F8
%F87DA9A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8CBA87E75A053777DFFA9A9A8A9A8A9A8A9A8A9
%A8A9FFA9CBA8FFA9CBA8FFA9CBA8FFA9A9717271FFFF9C719CA8FFA9FFA9
%CAC8C8A0FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA9CBFD05772753FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA97E224C4C4C224C4CA9A9CBA8
%FFA9CBA8FFA9CBA8A8A9A8A9A8A9A8A9A8A9A8A9A8A971717178A8FF7871
%719C7EA27EA299C8C1A7A9A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A1997DAFA8A977774C774C774C7DA8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9224C224C
%224C22464CA9A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FF78
%72719C71FFFFCB71789C9C71729A9FC8C8A7FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9CA6FA0A8FF7D77777771FD0477FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF
%A9FF7DFD094C53FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A97E
%727171719CFFFFA8787172717871779FC8C1A8A8A9A8A9A8A9A8A9A8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A199C39B774C774D774C774C77A2FFA8A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8
%A9A8CBA853214C4C4C224C224C4C4C7EA9A8A9A8A9A8A9A8A9CBA8FFA9CB
%A8FFA9CBA8FFA9A2719C9C9C77FFFFFF71A27172717271CBA7CAA9CBA8FF
%A9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA8C2BBC29A774D777777
%4D774DA8A9FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FF
%A9CBA8FFA9FFA8FFA9CBA9A9FD084C7676227EA9CBA8FFA9CBA8FFA9A8A9
%A8A9A8A9A8A9A8A9A8A9717171A2779CFFFFFF78719C717878A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8AFA1BC99C27077
%4C7777777077A2A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A9A9A8FF774C224C224C224C2176224677FFA8A9
%A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA99C719C789C78FFFFFF9C9CA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA8CAA8C3BC774D77539BBCC2C2CBA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF2727A87EA9FFA9774C4C4C764C764C
%764C4C22A2A9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A977717178
%71A2FFFFFFA271A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A37EA97EA24D774C779AC299C3A9A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A24B2027F87EA9A8
%4C4C4CC8C1C8C1C74B4C464C7EFFA8A9A8A9A8A9A8A9FFA9CBA8FFA9CBA8
%FFA9CBA9A2719B9B9BA2FFFFFFA272A2FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9A97FA37F7F7EA176779AC2BCC3A8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CA99C220F852FFA19A2276C7C8C1C8C776224C4CCBA8FFA9CBA8FFA9CBA8
%A8A9A8A9A8A9A8A9A8A9A8A9A8A1BBC299787F7F7E7F78A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8CB7E7F7E7F7FA2
%C1C899BC99C7A7A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A09A27F828A9A16F9AA0C8C8C79FC2BC9A4C7EA9A9
%A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FFA9FF779A999A777F7FA37F
%7F7FFFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9A97FA37F7FA1C8777675C3A0C9A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9A8A1A2775252FF9A9AC3C8C7C9C8
%C89A9AA0A9A9FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A9A8A8
%A2A2777F7F7F7DA27F7F7EFFA8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A97EA97FC99FA1A0C1A0C8C8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A8779B779C77A2
%A8CAA1CAC1C7C7C8A0A075C27EA9A8A9A8A9A8A9A8A9A8A9CBA8FFA9CBA8
%FFA9CBA8FFA8C9A7CAA97F7EA37FA37FA37FA9A8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9FFA9FFC8C7A0C9C7C8A0
%C9A9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%A977A2777877A277A9A9FFC9C7A0C9A1A2A0C9A7A97EA9A9A9A8FFA9CBA8
%FFA9A8A9A8A9A8A9A8A9A8A9A8A19A9B9AC2777F7E7F7E7F7E7F7EA9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8C89FC2A0C8C1A0A1A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8CA9AA177A177A277777EA9A8C87D7F547F7E7F7E7F7E7F
%7E7F7EA9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA9FF93BC93BCB59B7EA97F
%A37FA97F7FA3FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFC7C8C1C9C8C8A0CAFFFFA8FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA8CAC2C2A1A29AA1A1C39ACAA9FFA07F78
%7F7FA37FA97FA37FA97F7F7FFFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A2BC
%93BC93BC9A7F7E7F7E7F7E7F7E7FA8CBA8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A7C89FC29FC9C7C77D7E4C4C7EFF
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A97E9B99C3A2A877C2C2C2
%BCC2A1A9A7A7547F547F787E787E787E787E78A2A8CBA8A9A8A9FFA9CBA8
%FFA9CBA8FFA9C493BCB5BC93BC7E7F7FA97F7F7FA37FA9A8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CAC1C8C2C8A0
%A0704C214C2177A9FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8A9A2
%A2A8FFA27176C8C7C2A1FFA9C9A07F7E7F78A278A277A278A277A27ECBA8
%FFA9CBA8A8A9A8A9A8A9A8A9A8A97693939A9394937E7F7F7E7F7E7F7E7F
%A2A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A7C79FC8C776224C214C214C21A8A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A97EFFA9A9A8A22276C1BC9FA8A9A9C1A0547F547F7E7F7E7F
%7E7F7E7F78A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FF7DFD074C4DA37FFF7F
%A37FA97FA9A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9CAC7C8A0C84C4C284C284C4C4C77FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFFD05A9FF7D4C76C8C1C87DFFA8C8C7A25B7F7FA37F
%7F7FA37F7F7FA9A9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A97D214C224C224C
%214D7E7FA8A97E7F7E7F7EA9A8FD05A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8C79FC2C7A0224C214C214C214C7EFFA8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A8A1CAA1A8A777214C75A06F77A9CAC1C7
%9FA1A1A8A1A7A1A17EA97EA9A8CBA8A9A8A9A8A9CBA8FFA9CBA8FFA9FF77
%4C4C4C46FD044CA37FFFA2FD047FA9A9CBA9CBA7C9A8FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFC8C79FC8C14C22FD054C22A2A9
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA9CAC1C79FC7C1C74C4C4C4D224C77
%FFA6C8C7C8C1C9C8C7C1C7C7C9A9FFA9FFA8FFA9CBA8FFA9A8A9A8A9A8A9
%A8A9A97721FD064C4D7EA3A8A97E7F7E7F7EA9A9CAA0CAA7C9A6CBA9A9A8
%A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A1C29FC86F28214C21
%4C212853FFA8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A7C79EC19EC79F4C21
%4D4C4C2177A8C89FC8C1C7A7C9C1C79FC7A6A9A8A9A8A9A8A9A8A9A8A9FF
%A9FFA9FFA9FFA9FF77FD044C4D4C4C4CA37FFFA9A97FA37FA9A9A2A0CAA2
%A9A2A2A1A8A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA7
%C8C7A0224C4C4C224C4C4CA8FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9CFC1
%C19FC7C7C14C4C4C4D4C4C4DCAC7C8C7C8C7FFC9C7C7C8C7C9A9FFA9FFA9
%FFA9FFA9FFA9A8A9A8A9A8A9A8A9A977214C464C224C224D7EA9A8A97E7F
%7E7F7EA94C7777787777779B77A8A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A9CAC1C8C14C214C214C214C21A2A9A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8C89FC19FC89F4C224D4C4C214DA8C8C1C8C1C8A9C9C1C7
%C1C7A6A9A8A9A8A9A8A9A8A9A8A9FFA9CBA8FFA9CBA8FF77FD084C7F7FFF
%A9A37FA37F7F7E77777871FD04779CA8FFA8FFA9CBA8FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA8C8C1C8764C214C284C4C4C53FFA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CAC1C7C1C1C1A04C4C4C534C4C4CA9A1C2C1C7C9AFA7
%C7C7C8C1C8A9CBA8FFA9CBA8FFA9CBA8A8A9A8A9A8A9A8A9A97D214C224C
%224C214D7EA9A8A97E7F787F7FA34C77774D4C714C7177A8A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9C1C7C1C2224C214C214C214C
%A2A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8C79EC19FC7754C214C777777A1
%767777C2A0CAA9CA9FC8C1C8A1A9A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9
%FFA9FF77FD084CC9A9FFA9CBC2C8C2C9A87777774C774C774CA2A8FFA9FF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9CAA1C2C277224C4C4C
%22714CA9A9FFA9FFA9FFA9FFA9FFA9FFA9FFA9CBC1C7C1C7C7A0767777A2
%77A277A2777877CBA9FFA9CB9BA19BFFA9FFA9FFA9FFA9FFA9FFA9A8A9A8
%A9A8A9A8A9A97D214C224C4C4C2270C2A9A8A9A8C7C1C7C1C9767777774C
%774D7777A9A9A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A97F
%7F7EA3774C214C214C4C77A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8C79E
%C19FC79EA8A9A97EA27777777877A2A8A9A8A97E9B76777EFFA8A9A8A9A8
%A9A8A9A8A9CBA8FFA9CBA8FFA9FF53FD084CC8A8CBA9CAC7C8C1C8C7C8C1
%C3779C77A27777A2FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8A97F
%A37FA37F7F7FA94C4C4C7EA2A97DCBA9CBA8FFA9CBA8FFA9CBA8FFA9CBA9
%FFC1C7C1C8A0A87F7F7FA97F7F7877779CA2FFA8FFA9A277A177A2A8FFA9
%CBA8FFA9CBA8FFA9A8A9A8A9A8A9A8A9A9774D7E2146214D78769FCAA9A9
%A8C8C1C89FC8C1C89FA1FD0577A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A97E7F7E7F7E7F7E7F7EA84C7EA9FFA8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A1A0C9A0A17D7D7DA27DA27DA8A27E77A9A8A9A8A97777
%717777A8A8A9A8A9A8A9A8A9A8A9FFA9FFA9FFA9FFA9FFA8A97F7E777E7E
%A3A2CFA9FFA9FFA8FFA8FFA8FFA8FFA9CBA8FFA9CBA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FFFD09A9FFA9A9A8FFA9FFA9FFA9FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9A9A9CBA8CAA7CAA7CAA7CACAFFA9CBA9FFA9FFA9
%A97EA2A2A8A8FFA9FFA9FFA9FFA9FFA9A8A9A8A9A8A9A8A9A8A9A8A9A9FF
%A9FFA8A9A9A9A8A9A8A9A8A9A8A9A8A9A8CBA8A9A8CBA8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8CBA8A9A8CBA8A9A8A9A9A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8CBA8A9A8FD07A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8FFA9A9A8A9A8A9A8A9A8A9A8A9FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9
%CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8
%FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8FFA9CBA8A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8A9
%A8A9A8A9A8A9
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-24T16:42:05+03:00"
   xmp:ModifyDate="2021-12-24T16:42:06+03:00"
   xmp:MetadataDate="2021-12-24T16:42:06+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:32734b1e-6388-2c4f-8c36-1142bfd8aad2"
   xmpMM:InstanceID="xmp.iid:32734b1e-6388-2c4f-8c36-1142bfd8aad2"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2112.w037.n003.100A.p1.100</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="176"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7vmcrsVdirsVdirsVULy&#xA;+srG3a5vbiO1t0pzmmdY0FTQVZiB1xVVSRHFUYMASKg13GxG2KrsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirxX/nIjyh5r8zTaLa2s6r5cj9WW&#xA;7iAcMtyitxdmWOTqjcUHjXxzD1eXgAJ5OTpdNLLIgMj/ACJ8o2HlzyhL9VjljN/cyTt6zliU+zF8&#xA;NAFPCnLbr9GT0s+KFsdThOOdEU9Fd0jRndgqICzMdgANyTmS0Pnjzt511H8xPML+W9HvYrfQo25W&#xA;8hJiNwVQcmkDMGdQeXFVWvQkdxXnzDFHiIt2ek0vEa6vUvym9S18uNpE87Sz6e9OL+pzWNhQMRKF&#xA;YB5EkZR/LSm1Mr0uY5I8R72nX4fDmB5M3zIcJ2KuxV2KuxV2KuxV2KvBfzB/5yH80eV/OlxplroV&#xA;td6RbF0LM7+vIYgwcl0LJFQoW4shPGh75jnUbkdzZLFIAHvek/lR5o80eaPKMWt+YbG3sJruV2sY&#xA;7ViyPaUUxyGryEMTyHXtWgrl0CSN2tmOSV2KuxV2KoHWNVi0uxe7ljeRFIB4CtCxoC3gK98lEDqR&#xA;Ed5TGJkaAsoHy35otNcVntnjkjA5LJE4dTQ0INO4y/NgEYiUTYLFPMxkuxV2KuxV2KuxV2KuxV2K&#xA;uxVL9W1eKxQADnOw+BOwHi3tmRg05yHyQSxXUL241CN4rxvWgk2eA/3ZHuozMz9n48uPgO3mObZg&#xA;1EsUuKPNOfKd0kcP6OACxwrW3XwWu4qevXMXLo44YAR5BcmU5JGR5lDfmZqWo2Hk+7OnFVurkrbL&#xA;K4BCLKeMj8T1IStPfKcUOKVNmmxccwHkHk60ttK1G3is4Y63FLaV5FDFllIU1J+f+Yw9r6PHPSyu&#xA;/QOLbncRb0MICPJnPky80nRPN9xZwSotvqcUSSJCFWFbuEemAFX4VqARt12rmH2ZCctMJGJjRNXz&#xA;MeYP2uBrtPceIcw9Qy90zsVdirsVdirsVdiqVeZvMNp5f0iXUrpHlVGSOOCIAySSSMFRFBI6k42B&#xA;zZ48ZkaDyX82dO1WXy5rF1GqWUd/6DSqVW4IlYoGqWfjXqtRGDsDXYZzOk1WLUZ6gdyTtv5+T0WT&#xA;iGDg60By7vj+hkn5Iu+heUtM8m6qvoavaxzz253aG5gknab1IJKAHh64VkNGHWlCDm50esx5QRE7&#xA;x5h0GbBLGfU9LzNaXYqsl5ek/H7XE8e29PfBLlsmIBO7CPKnmrSuHl3TWvFl1qTT2GtI0zyzfWLd&#xA;1t5XmDuxVvWQ0qB9o5hS1Mozjf0SdhHSicJ19cd/h1Trzrc6WdEuNOvZ1je+QxxRk0LGu29DxFf2&#xA;j0yWunHwzEmiU9l6bJPJxRjxCPP4j72H+U77y35anaa5iD6rcwxxXV1aGOSPihPUosCF2+07Igrs&#xA;P2aDX6PUxxXxXv8Aj8c3c6rsfNnAlERFd9gn7K+wfKno+n6lY6jbi4s5lmiO1R1B8CDuD883OPJG&#xA;YuJt5vUabJhlwzFFE5NodirsVdirsVdirsVdiqlczx28DzSfYjFT/TJQgZEAKwi5uJbm4eaQ1dzX&#xA;5eAHyzewiIRroGCkwKsQeo2OOPIJxEhyKZCjStaTvbzJcJ9qNgaeI7jKsu5EDykD89kgbWjfPFra&#xA;axY2tv6jLX9+jqdhUUFV6HvnN6nXy00wAAT1d72PpuISkfc8k1O3WxkaKO4Wa4VygCBgAR0qSB9N&#xA;OlM3en1ByxsxMYkda3v9Hv8Ak7CY4TSY+VdLtb6b6pO7pBH6cjtHTmVSqkAnofjrXMbtHVfl+GdX&#xA;/D86N/YmGMyBA5091hCiJArF1Cijk1JFOpPfMcG93k5Agm1+KHYq7FXYq7FWiQASTQDqcVAtiXmP&#xA;0tXuNMRWD29tfLMQOhMMUjqf+DC5xnaXaOQ5Mg/gECI+dmIJ+VvQ6bR+FEWPUUL5uKx6HLcyIHit&#xA;XjnmQoH/AHcbguaHuq1YfLNR2Sf34HIysD3n9fL4udxCO5asNR06wgiuJY2kjtGkuEkH7wr6gcuy&#xA;1NfsyMAB22GbbT4p49UMkTsTRH2H8d6dbpPEga9/xZtFLHLEksTB45FDI6moKsKgg++do8evxV2K&#xA;sW82acEkjvIkAVqrMVFPirUMaeOaLtfCbExy5PR9h6gUcZ58x+lgethpHmnkZpJRJHGGYk8UEdQP&#xA;p/hmBGRlGy9VpgI1EChRPxtK4YxJMkZdYw7BTI9Qq1NKsQDsO+IcuRoE8058vapfaHrfABmHqejd&#xA;2678gDQ7eK9syNPmOKfl1dd2hpIarD51cT+O97BnSPnDsVdirsVdirsVdirsVYlrvmvRbp7jSrS5&#xA;9S+s5Qt5AFZSlAevIDkK/wAtcjLXR00oykLEnP0nZ0891tQQulQRXcMt6GBtIImm9QfZbiDSh8Kr&#xA;m4nqoSgDE2Jfd1cGWOUZcJ5hAC6tiKiZD/shmSMke8IOOXcV8U8T80jYSOFLcUIJou5O3gMxNXnj&#xA;jAmTtG791H9NN2HBKZ4ari2396V6/rwh0LUpLSYNd2MZUgVYxlj1A70qfao+ecdLN+a1IlIUJHl5&#xA;B6vHiGnwGMTZH3vLPLKXup65FbRXLTM6uWaUHiAF5Hf4yPiAzr8JJlTqDqOD1S3D1Tyn5V1O3ubi&#xA;YtFIqxUKIWLklgdgVHhmB27glPEK3IN/Y5Ok7TxcdGxfez3y7qSTRPaM4MtuaUrU0oDQ+BAYfRmp&#xA;7N1HFHgPMfc4va+l4ZeJHlLn7/2pzmzdM7FXYq7FUDq+t6To9qLrVLuO0t2YIskpoCx3AHidsIFs&#xA;oxJ5MRXzinmCeO1spFWC5NLY8gqzsORdUZipfgEq1BT6a00meefKeACvL9b02m0+n044yb8/1BX1&#xA;M2nlyG2udRfk08vpqsYqEHE1c9zTpt45Tn7CyZsMhEjj7v0X+Ao7QGedRHpHVW/S2hXduym7t5IJ&#xA;VKujOtCrChDKT4eOcnLs7VY5f3cxIf0S3bPMdX84waRNeeX9OibUEgT07K6DhlCNGDRiK8hFWnLv&#xA;TfxztdH2fkzRjkyDgkfqjVdfsvmwOu4ImPOnsPkeO4i8m6JHcArMtlAGVuo/digP0ZuZc3l8n1FP&#xA;MiwdirTKrKVYAqeoO4wEXzSCRuGB/mTaWqRWQgSOKVmcuqKFLABQCaeHvmDqtEZgcAAr4PRdidoe&#xA;HKXiGRG3nTA5I2jjZ2FQoqQu5oPADrmJHsrKedB6CXbOEcrLLYLWxWxsru04sLqBTJIveRSVfue4&#xA;zC7R0/hTA8nE0mrlm4r6S293R6NaMzWkLN9oxqT8yBnR4TcBfcHjM4AnIDvKtljU7FXYq7FXYqpz&#xA;zw28LzzuI4Y1LSSMaAKNyScVAtLJfMunS6c9zpk0d9MzLDbwo27TyGiKw+0o7sabKCe2GmfhkGjs&#xA;k+teWdOh0+COJQ2v3PK3t78BRK80xMksjkhvgUqZWXwWg7Zj59LDKRxdHM0uuyYiTHl+Px96/X4R&#xA;ofkiHS45mkKRxWUUpCqxVRT7Kjj9haZkwAvZpw+vJfxecKqW8LGpKqCzMTUnuTlzskw8uXj22r28&#xA;10qrbsTHKgJJ4Sjg1T8PQN0/HIZICUSD1YTurHMbj4M9PlXStIsb+e0jrPcfE8jUJA5VovgKsSfc&#xA;k9zmP2fo4Y8gPP3uJqtfkyijsPLqkqFQ6lhVajkPbOkLr0+0h5W1e5hdqcY3jThQBQrinEUoO/bM&#xA;DVRHhghI5oIeS4VtGvF1O+iufTLPLDKsbOyrQNIeJJagArXpmrx6WEchocz8rdhPtCco8NCmWxpw&#xA;RUqW4gDkxqTTuTknBXYq7FXYqpz6ZpupRm21G0hvLejP6NxGsqclRqNxcEVHbATSQSOSlY6FolnH&#xA;6lpp9tbyQ0WF4oY0KBq1ClQKA+2PVlLJIiiS82/MTVhL5qtrHissFsixzROKqTOQX+R4cdxuM2Om&#xA;h6CXbaDHWMy7/wBDDYTaW2oSLcRmW3X1YiNuQ5KyK46AlCQwHemZRsjZzzZGz0fyH5Z8s32iRXk1&#xA;jHczJNIBNKm78HJRmSrLUCnWtM1+pkRJ0uukRkLPcxXBdirsVdiry/z9c/W9ekiDsFtVWNCppvTk&#xA;34tTfLocnZ6aNQ97G7Z2eFSxq61Rz4sp4k7e4yTkMgshbpaWTGVkaVpkKuwEQaqb9qbU65oO0NFn&#xA;y5CRwmIqu/8AU5uk1UMdgvStNtZ7WxggnYM6opqu4owDAV9gczNFjyQx8M62+50WtywyZTKHIorM&#xA;txHYq7FXYq7FXnH5q+ZOKJoVu3xNSW9I8OqIfn9o/RlkB1czS4/4iw2W7uNFW1gtJDDqETC5uZl2&#xA;ZZGWiR/7FGPIeJIOYWlPjTllP0/TH3dZfE8vIebsMkRXCfi9E/LzWr3zF6+qagoM1oBZ27qvFCG+&#xA;ORh/lvROXbYUpmXLZ1WaAjsFD8x7zlc2lmDtGhlce7niP+InJQDfo47EsIuEeS3kRBVnVlUe5FMs&#xA;c1UxV6rpV0dU8ro/2pWhaN/EyICtT8yK5DGeGYPm6jNDhkQxy4geCUxuVLDrwZXHyqpIzdxlYtoR&#xA;M2qLpd3qGpOhkS2hubkxg0LLHG0vGp6VC5i5xeL5MoC5U8xf8+/NRiaBbGxEJBWhWYtxIp9r1QK/&#xA;RmFw+q3P/KR7yqxf85C+aY5Fe50+xkgUgypGsyOVH2grGRwDTp8JyBxhZaUVze9QyiWFJQKCRQwB&#xA;60IrlLgr8VdirB/NP5qQeXtZk02PT2vJYUHrOZfSAMicgB8ElfhYZLhtvx4OIXaTr+edI2T9CfaI&#xA;NfrXh/zxx4Gz8r5sPuNTfVNdOouvBrqcScK8uILCi1oK8Rt0zawFQHud1jiI4wB3IW9/3sn/AOMj&#xA;/wDEjlkeTZHk9a/Kxy3len8lxIB9yn+Oa3V/W6TtAfvPgzDMZwXYq7FXYq8c1eYzareSn9uaQ/Ry&#xA;NMvHJ3GMVEIa3027MNzeRrytUZPVI3KswIqf8k8R9ONpMgDSVap5y0eyiSwcSyXEMsjSiNVKgOsY&#xA;AqzLv8JrhEd16rpfzbiV0+qzX0USxQx8F4qtY4lQ7epTquAQYeHE8w9L8iebzrHl+K5jk9fizpI8&#xA;tTJy5E8X36gH7s5TtjtnLps3BGMarrf6w3R7PxzAlZ37mYW8jyQq7gBm3oPntm37O1E82CM5ipS7&#xA;vft9jqdTjjCZjHkFTM1pdiqA1zV7fSNLnv5/swr8CVoXc7Ko+ZwgWyhAyNPFLW4kur2613UKSiFv&#xA;VYN0knc/u46eG1afyjMbXSJAww+rJ9kf4j+geZd1iiAPIJX6d7qd/Haw1mvb6TiCepZzuSf15mxi&#xA;IRERsA1znQsvffL+i22i6Rbabb7rAtHelC7nd3PzOVkupnLiNvNvNF99d127lBqiv6cfhxj+Hb50&#xA;rlsRs7TDHhgFXylp4vtajiYVjRJHf/gSo/4ZhjI7Izz4YpMQQaHYjqMk3My8qXxTy1qENd1kAX/n&#xA;qAp/4icnhheQOu1g3BUgCSABUnYDNs4Sh5qkjTTdaJ3jW0u02IBK+i6bGh6j2yiQvGzx/UPe8C9T&#xA;Tv8AfE3/ACOX/qlmFs7fdTuXsDby8YZQ3BuJMqkA07j0xgNUg3T7CsP94bf/AIxJ/wARGYbqSr4q&#xA;7FXg35ntZr531EzTMjH0duKkf7zx9CXXLo1Tn4SeAMW9XTP+Wlv+AT/qph2bbKf6BpE82mtqkBaS&#xA;3tb5YJaihVWWNlagJ25MR18MycOTnFyMGb+A92yhe/72T/8AGR/+JHMuPJzY8nqf5SyV8vXKVqVu&#xA;228AY4/7c1+s+oe503aQ/eD3M3zEde7FXYq7FXjF+CL+5B2IlcEf7I5eHcw5Blv5cNG41G3kAZXE&#xA;ZKEAgj4g1QfmMhNxNZ0Lw/8AMK0t7fzrrEMPGOJLhgkfxbCg9jlkZGuTk4t4gkse4L/vxf8Ahv6Y&#xA;bPcz4R3vcfyUtynkh56grJqFwm3iiRf81ZwftThIzRn0Ir5f2uRpMg3j3PUrH/eWP6f1nN72GK0k&#xA;Pj/ui6jX/wB9L8dERm2cR2KvJfzL8wvqWrJpFoS8Fm3F1XfncHY/8D9n51ywVEWXYaXFQvqWM6zI&#xA;lskemRkenZ1Nww6PcN/eH3C04j5e+YehiZ3mlzny8odPn9R9/k5szW3czP8AKPy0T6vmK6T4n5Q2&#xA;APZekkg+f2R9OZcy63U5Oj0HV7trPS7q5QEvHGxQAV+KlF/HIgOPjjcgHjuXu4Zv+W9lteXrDrxh&#xA;Q/8ADN/xrlcy4OslyDENRj9LULqKlPTmkWnToxGTDmQNgJz5VN0sF56SB0ZouQZQ4PEP0qD/ADds&#xA;x83aeDTSAymjLlTDLpJ5vprbvT+0CLKtxLZsiw1kDxlgpZByAbkJOpFO2Z+LX4c0CceQSHXy+51u&#xA;XTZMcuGQ3+aT6yljLo+oI0MojNtNzJkWgX0zyYnh0A65kHU4z6eOFnp+CowziQTEjfufO+YjtVk3&#xA;9zJ/qn9WA8mJ5Psqw/3ht/8AjEn/ABEZiuoKvirsVfOf5xf8p7qHyh/5MR5ZHk52H6AwrC2PcvyV&#xA;igl8s6tHcAGBrmknLYcfQStT2yJu9nGzyIkCGFS6bqLTSFbeWUc2/eBGIO/WoGbY5IxNEgF32PJG&#xA;UbB2enflZZ39rpd2l1byW4eZXi9VGQsCgFRyAqNswdXIEii6jtGUTIUbZtmI692KuxV2KvI/Mlub&#xA;fXr6OlP3zOB7SfGPwbL48nbYTcAmn5fXHp640RO08LKB7qQ36lORnyatULi8g/Mz/lPdb/5iT+oZ&#xA;ZDkzw/QGMZJte/fkNAk3kS4Rtv8AchOQR2PCPNV2loYamHBL3g9zhnPLFksPTYYxHEqA1498Oj0w&#xA;wYo4wb4XGzZOOZl3r8yWt2KsD1P8vbhL+71fTpFe9cySQW7/AAqJHqQ6t05CuynavcZDV4xliIDa&#xA;O3F5ju+P3W5un1fD9TBrfyRq15qljYH7FyS11IlT6KJQtyNKVp9nxOZuXGYAX1ZnUgg10e32lpb2&#xA;lrDa26COCBFjiQdlUUAzFcAm11xOlvbyzyfYiRnf5KKnFAD5c/5WD5ilvFmnmicNIHk5wowNWqag&#xA;Ba/RgGjhE8Ubv+sXfnPIx4TVVXIPZ/J35n+RriG305JksL6eX01tuE3pvI1KMsjLQBvBj7e5kBIi&#xA;yKdVnwyu+YYj+c97f6Pr9umlIIkubc3Fy4jEhMjSMGYlwwGwxEYnmftpydJllw/sSryN+aaadAbP&#xA;WecyvISkkUSAoCBSpUqXqa/s1Hieg0XbXYctRITgaIj1J8/l83OxZ65vVNI1mx1zTGuLJ3+ryExu&#xA;GUo4KmtCrZxuowZ9KTA7cXOuR683KiYyIPUIa50udleF4GmgkUqfhLK6NsQevXoRlUMOo2nETPcR&#xA;fTzbJZociQwbX/ygS8jDaHbNa3hYfupCwhYd925cT+Gdb2P2rqzlGPNGRievDVODqPCEeIEfNIH/&#xA;ACQ86+tDBMsEcdw3ptMrlwgNAWIUdga52ESJA+TrZaqNPo2CL0oI4q19NQtfHiKZiuAvxV2KvEfz&#xA;P8p6le+d5Hht2uDfpG9sse5ISMRsD7gxk/LHxogiJO7s9PikcRnXpjzYzd/l75gs7dri502eKBKc&#xA;3NKCpoK0PiclPJGIsnZlhHiSEY7yL0b8uY30LRrm11GAul9MZXijfiyxmNU4k0bc8d6frzNhpJEC&#xA;V0XX6iYMq7k11BtPe6d9PiaC1bdYXoeBPUAjqPDM/EJCNSNlx2U6B/xyYP8AZf8AEzmp1f8AeH8d&#xA;GQTDMdLsVdiqySaKFQ8teFRUDqflmLrNZDT4+OfJtw4ZZJcMUs1saPflTFaKCVAmeRF5sRsPiFTn&#xA;IdodvzyADETEde93ej0Zxm5b/chtC0uxtbsvFEOfE8WIFR8jTbbMrsHtHLlzmMzY4f1I7U3xg1W7&#xA;xL8yvJ2unzHr2sGEJarcBkVieciOFo8YAIK777/qzu8cCYcXc6/FmjQj1YGbS6HWGT/gT/TA5HEH&#xA;0N+Rmm31j5H/ANLhaA3N3NPCrijGNgqhqdRUoeuY8+brs5Bls9CyDS7FXYq7FVqRxxghFCAmpCgC&#xA;pPfbCZE81XYFaZVdSrCqsKMD3BwEWKKg0lz+XdEkFJLONx1o1SK/ScwB2XgHKP2y/W5X53L3/c6P&#xA;y5osYpHaqgHQKWHX5HE9l6cmzH7T+tfzuXv+5GTWdvM/ORatSlQSNh8iPHMjNpMWU3OIkfMNUM04&#xA;ComlP9G2f8h/4N/65T/Jmm/1OPyZ/m8v84qkVrbxBgiU5U5VJatOnWuX49LihExjECJ6U1yzTkbJ&#xA;3VVVVHFQAB0AyzHjjAcMQAO4MJSMjZ3LeTQ7FXYq7FXYq0VUkEgVHQ+FcVtxUMCGFQeoOKg0hv0X&#xA;pxNfq0df9UZb48+8opcNPsAai2iB9kX+mDxZ95+a0rqqooVQFUdANgMgTaW8CuxV2KrJIo5QA45A&#xA;bjMfU6THnAGQcQDZjzSgbiaU/qVr/vsfjmGOxdJ/MH2/rbvzuX+cqLDErclQBulQMy8ejwwlxRjE&#xA;S9zTLNOQokkNNbwNMszIDKgorkbgHMsTIFXs1rpI0kRo5FDIwoynoRgBINhXRxpGioihUUUVR0Ax&#xA;JJNlV2BXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq+fPzT078xNb883kEurz6X5bt1EGnWdnNLC00rxfAxBVEkJkarEFu&#xA;C7VFDmr1es4JU7LS9nnIOIn0/bb2ryYb8+UtGGomVtQSzgju3nr6jypGFd2rv8bAtvvvmwxS4ogu&#xA;BkhwyI7k5yxg7FXYq7FXYq7FXYq7FXYqwL8zPNvmzQrzR18vW0V2ru0uo20ijlLAjxoY4nLoEekj&#xA;EE96e+Ymp1QxkAuVg0k8oJj0Yvpv563M/wCdVx5Mpa3nl24mMWl6jArpKKwCVOZZ2VwT8Joo336b&#xA;ZZjzcTjSiQaL2XL0OxV2KuxV2KuxV2KuxV2KuxV45+etl5ra/s7ny1r2oadffUpglhbTvHBM8UqF&#xA;PgBVPUYSMOXXYeGYGr1PhyAc3TaM5Ykjn08yyz8mdZ8z6v8Al/p935lU/pOrx+uwAM8SNSOaq/C3&#xA;Jf2h9rr3zLxS4o24cokGizfLEOxV2KuxV2KuxVIvNPm6w8v26mUGa7lBMFspoSB+0x34rl2LCZny&#xA;cnT6aWU7cmNeVbTU/wAxtSnN9fPp9vpnB1jtFADCUkFGYmu4TrWo7U3yjtLR46jYt2E5flR6L9Xm&#xA;1oH5h3tvqkmka+PUkSZoFuo0owkVuPFkQbiv8ozOyaYGPFFrz6EGPFD5M1i1zRZaelf27k9AsqE7&#xA;ddq5iSiYiyKDr/Any4T8lKHVPrKC4tiWgeT0k5L8JIbgaMO4YGucpk7XzfmRGH0SlECx311dmdBG&#xA;MDxfUASaKZ51Lp3Yq7FXYq7FULqOp2OnW5uL2UQwL9qRvsgAVJJ7ADc5Vmzxxi5dW7Dp55SREct1&#xA;eKWOWJJY2DRyKHRx0KkVByyMgRYapRINHmHmXnLzlot9qC2irMYrJyReW5jJkYAq0Y5g8UNftqeX&#xA;ht1o1WhGYDoXbaGc8W/Q9Px+x4/pXk64X82dI8y2s5aKfWI7i6gkPxxiaep4sKclUNSnhkxpuCq6&#xA;OLqMJJMub6wy1wnYq7FXYq7FXYq7FXYq7FWmZVUsxAUCpJ2AAxV4B5s/N6LVNYBi09XsLKRvqcqu&#xA;EmfYryZ2R+IYHonFh/N1yjV9n+MBvwn3X+kO50UjhHer6D+fmt21wiatZQXNjWjfV19KVRX9nfga&#xA;eFB88zBhAFBxcmmEt73e16Jrem63psOpabMJ7ScEo4BBBBoVYHcEHqMrIpwpRMTRR2Bi7FXYq7FX&#xA;Yq8L1e5m8wea5OUgT6zcehAzV4qnLhGP1VzbwHBD3PR4ojHjHkHpn5BWzRJr7VqvqwRBuxMfq1/4&#xA;lmt7SN8LgdpG+Fhnn/T59O/MDWJrZzFNE6X1sVFSzytGxK+4Z2P0ZmaaQlijfucvTTEsUb9zHNK0&#xA;XW7y5T6jaTSOrAh1UgKQe7t8I+nLNRwygYyO0gQ5Es8YbkvadN0VbCC2toSPq1vVgG3kJNWJZjyY&#xA;ku3I1brnEYOxZw1AySkJRG/Kj5fL3urza8TgQAQT5prnROsdirsVdirsVS/XdGt9Y0u4sJyVWZGQ&#xA;OuxUspWo6+OUajAMka69Pe5Gl1BxSvodj7mD6pd6xDo0uj2sogUfuQqgDio2MakdAemaTS66eGXB&#xA;P6Q9Rl7PxZh4kR6qsdzziOMvKsZPEswWp7VNM6q3UFWlsb22uGQxSLJE2x4sDUHYjbIHLEcyGQiS&#xA;LAfQdpI8tpDK4o7xqzDpQkAnKnSyFGlbFDsVdirsVdirsVdirsVYb+bfmA6N5JvGjfjc31LOAjrW&#xA;UHmfojDb+OTgLLdghcnzHmQ7NF6VawXV/FDcOYrc8mmkHVY0Uu7Dr0VTlOoyGECYi5dPedgmIsvU&#xA;v+cftWmTWdU0dXZ7OSD63GGFKNG6x1pU0LLIK/LHINgTzcPVx2Be45U4LsVdirsVdirw7U/Kms2e&#xA;oT+qgt0V3kSZ3UDgGNHqDt0rmRn7WwYtpE8Vcqeq0w8WHEOT0v8AKbW9K0qw1Y6lIttc3F6z+miu&#xA;68eCkU4BhQFjleSJ1EYzxeqNfjm6btMcMxE9Ah/Mt9aXv5laPqumh5ITD6F0/EqvL41BNadpB92Z&#xA;GPTzhhIk14ssfAlEne2XZhuE7FXYq7FXYq7FXYqgNavXs7EyRmkrMFQnffqdj7DL9NiE5UeSCWKT&#xA;3rTwRRSW0Uxh4BWIZXKoQePJSOtMnqeycEhZ6fc5un1+WEjRPqv5lhF15L1W2uFF08SxO1DMrg9T&#xA;TZTxO5NBtmgx9v4JxuAlY6V+nk7nHpJSPl3s08u+X/V9GFfgtIhuSd2CnenuTmo05/M6giR3+o+5&#xA;zdXqY6bFUefIftZ7nWPGuxV2KuxV2KuxV2KsU/NHTbjU/I2p2MEzW/rqiyyq/psIxIpej1UCqim5&#xA;p47Zj6qZjCw5OkxCc+Evn6x86eb/ACV+YnlbyhHqlxcaBYXKQGB14etHqE7MWkLKpkZYp04/EQCo&#xA;pToKNPkJAJ2tGqwjHMxBt6j+d1je6xPp+n2VZLi1V5zbqVIYSUUFtwVPwHjXY771pW6WujiycMuR&#xA;6udodKZQMhzVPLH5YaAPLWnyatpQe9ePlcSSeojB3Jbg1CtCoPGmcj2l2zqRnmcciMd0OVbbftdh&#xA;jxwIAPNJPzD8lWVtpkcPlvToklVjJdlKtMUpQKhcttuSwBr0zO7E7SyTmZZ5kjlHuvzpnk0pMbiE&#xA;b/zj/wCXbiJ9S1ydDGCPqMAYUJIYPNsfAqg+/wAM67IXRaqfIPZcqcN2KuxV2KqV1dW9pbvcXMix&#xA;QRiryMaADp1ORnIRFlnjxynIRiLJYPrH+DtTvZr2eSJr6SBI1eN2UngxcIw+y+6gH2zU/mY5REZa&#xA;ECen1R9/4+HdvMej1OEHgjL4jYpZpOnWFkkv1NAqyMvJ6liwRFVSWYkn4RnYaPFDHARh9LpdVOUp&#xA;ermmLGjfCONOhFe2WYQeG5G7934+dtM6vZmumXf1qyimJ+Iij/6w2OajNj4JEKEVlSXYq7FXYq7F&#xA;XYqoXdlbXaBLhOaqajcih+gjLMeSUDYVK5/L1jApnR5KoQQpII6/KuYvbHaM4aTJy3jX+m2/S5Gj&#xA;x8WWI8/uYw/lTSrq/mlu/VmlEwdJTIytVVDcfh47cmqAO6g9RnET10zpo8IA4OYA6S2v/Y7/ANZ6&#xA;GPpn7/0fj7GT6LCkV06JUACoFSRxPSgJoN/DM7siRyaiGTvgQffGh8duE/FwdcaxkH+d9/4Kd517&#xA;pHYq7FXYq7FXYq0zKqlmICjck7ADATW5SASaDBPNGuXdzPKLeRoILRgIOJIMjFGJkqKU4gbfOuVc&#xA;cckQRuOIff8Ardpi0xxGpD1Uw67sBO9ne6lam5RbhLu2kmDUeW3kDclfrswoSD7ZlmIOzKcRIUXq&#xA;TaXpV5PB5g4lpvS5QknajhTT/hVqPEZpu0MMMcZZjziPt6NeDVZKGHzq+tdUDHr2npLLD6hZipX4&#xA;RUE+Fe+c/pfZfWzhx0I8Q5E7/EfguXl7QxA1d0kclhBc6rHqVxdyJsoltUB4FV5gDr/lipp2GbiX&#xA;s/qcZEMcYmArcy3Pea8+g7kY+1YiO5N/2slsNbsrUyQF3e2B5QORVxyJLK3jQ7g51c9JI0QAC6C0&#xA;8t7iG4iEsLB0boRmFOBiaLJUyKuxV2KsR/M2+jg8ui1LgSXs0aBCRyKofUYgeA4ivzzC7QlWKu93&#xA;fs/j4tSD/NBP6P0vMOS+I+/NBT31ss0OVZNPRlNSPhbvQrt+rO87JnxaeJ+Hy2fN+2sfDqpj4/Pd&#xA;NryAwXUkX8p2Psdx+GZ2KVxBdWU78qznjPbk9KOo+ex/hmDr4cikMgzXsnYq7FXYq7FXYq7FULqJ&#xA;pbfNgM0PtHKtL75Bz+zR+9+DGbi8trGyu726cRQWrvLI57KACdhvuOmcrpQZ5I4/9Ujw/Pl8pAH4&#xA;O6ycr7jf4+DzzVvz5gtZ2Oh2HquFKCe72XqP91oanpt8Y+Wdh2L2RPTAnIQb5AdPj59fcHA1Zjlp&#xA;F/lf+bev6z5s/RWuTRSW9+jmzKxrH6cqjkEBXqpVW+1U1pvm9nCg4GbCALD2jKnEdirsVdirsVYz&#xA;JZeY724hkvLqAWMh4+hCrqd96nlyrSmUanReISOIgD8fjm7HS62OEbRuXf8Aj9jGPPt7YaVrWl6W&#xA;ttcXP1mN2cQfE9XYRpWhXZjVfvyrJphjwS4Dw1vZ8nK02rOXJxZN+myZQWFq7JaIYy0UiiSI0PpP&#xA;NQA/7KgG2c3g7QyZ8ghchxcj3u3yHHihxmGzJ9TBt9I9BTusfEEbfYXNt2lkEI4sR/iyQB9wIv8A&#xA;Q89p/XOeTykfm85j5c14CrVHEe+d+eTqI80b6up/75j/AOCzF4sncHK4cXeXerqf++Y/+Cx4sncF&#xA;4cXeWWeTWu2tbj10CAOOHE1HTf8AhmBrCbFsZCI+kshzDYuxV2Kvn78/Y7iXzxaIivIqaZEQqgkA&#xA;tcTgmg8eIy7E52k5F5x9TvP98Sf8A39Mtct6T+UkU6W+oxyKyAyRFVYECpDAnfMzTHYuBrOYeq+Z&#xA;4QmoK46SICfmKj9VMGilcK7i4ZU/LkvDVEX/AH4rL+HL/jXJayN4/coZTJcRowTdnO/BRU5z2bVw&#xA;xnhNmR6AWW+GGUhfTvLo7mN2Kbo4/ZYUO+Qxa2EpcJuMu6Qr9iZ4JAXsR5KuZjS7FXYq7FXYqo3c&#xA;JlgZV+11H0ZrO19JLPpzGP1cx8HK0eYY8gJ5MT1PSo9RsdV024HFboFNx05RKFb6GFc4aOSenyY5&#xA;VUodP847fJ6HaYNci+X7yyntrua2lTjLC7RyL4MpoR9BGepwmJxEhyIt1ZjRVbC9uNPu7a+tn43N&#xA;pKssbKSCCpqNxk2MhYp9f6Dfx6holhfRPzS5t4pQxNSeaA7nx8coyVxGu91ZFbI7IIdirsVUL25+&#xA;rWzzU5cRWmYHaetOmwnIBZcjS4PFnw3SRQa4zmGERgcGqpPjQ9d/fOa/0V5rJ4I7+92p7Jh3l4x+&#xA;a+tz3nnmzmUmKW1ghjHAkUb1Heo7/t51vZWoOp04nIVxXY+NNJwjETEK0P5raxea1YWkltbwQfXb&#xA;Q3MqKTI4hmUmpYmlaDtUZh6P2fxafJxiUiY3V8t27NqJTxmJ7nuOpPynC9kH4nfOY9pc/FnEP5kf&#xA;tO/3UnszHWO+8pPH5dsHlkmUMhVS1ARQfKoObLs/2o1pxyB4JeHAmyDe3fRDVn7PxCQO44jTv0Tb&#xA;/wAz/eP6ZV/o11f83H8pf8Uz/krH3y+z9SYxeWdPeNHMktWAJFV7/wCxzstL2nkyYozIjcog/Me9&#xA;0uXGIzMe4pta2sFrCIYV4oPvJ8TkZzMjZYquQV2KuxV89f8AOQH/ACnVp/2y4f8AqIuMuxOdpORe&#xA;bZa5b0/8mV5C+WlaywCnz5ZlYD6ZOBrOYevebE/3mf8A1wfwyvQHmHDKT6fI0d5G6mjAmh9yCMy9&#xA;QLgVjzYPF5s1i2sXmmvLuVnlFWjeV5KgU7HYeP0ZpRgjx8db7/bX6g7oRFVSkvny+aRSZ9RLVoCy&#xA;zEbkeNdtsOTTwmKkAUxiByD1rybeXN3oiTXMjSyeo45MamldhU75ExrZ1upiBPZPMDQ7FXYq7FXY&#xA;ql2qL+8RvEEfcf7c4v2ox1khLviR8j+13XZUvTIeb51/OXQzp/mg3ka0t9RUTDw9QfDIPvo305vf&#xA;ZvV+LpuE88Zr4dP1fBs1MKlfewOM/FQ9G2OdAHHD6I/ILzD9f8qzaRK1bjSZeKg9fRmJdPuYOPuy&#xA;mY3cHURqVvT8g47sVdiqD1YA2EtRUU3GaT2hH+CS94+9zuzj++DFrRofrCUQg12PKv8ADPPA9KXh&#xA;XnGY3Hna7I3InjjAH+QFSn4Z6n2DDh0eMeV/Mkuq1BuZWR+UvMMl6ZI4FjAfmsjyRgAcqg05E/RT&#xA;NnkyCO7UIvfn80aTc3jKjsvLu4HXwHEmozg+2eychmc0LlGW/u/Hm5uiHoETXEE+s4v9Emen21IX&#xA;5Ur/AByzsnRmOlzGQoyBG/lH9rhazN++gB0P6UAXQHiWAbwJ3zleCXc7bzTu0r9XjBBBApQ+2eld&#xA;lAjTQEhRAeY1deLKu9VzYOO7FXYq7FXg/wCd2j6nqfn63jsbdp3j0iORwKD4VuJ69SKn4hsN8yME&#xA;TK6czTzEY797yyKKSWVIo1LSSMFRR1LE0AywOYTT2z8jdNvtLudXtr6Ew3AeEMpodmRmFGUkH6M0&#xA;XaUzj1uGJ6iQYzqeCRHk9V1JVa0cMAy1FQdx1zH7eJGlkR5fe43ZxrMPj9yV2/pQsSsY4sKOo+Go&#xA;6ds4fTa3JhmJRJ+bv82MZBUmBa95Ght9PlaC4lNsrh+IYpIqk0HxrTl92dn2V7Q+PkGOcakeri5M&#xA;HCLYuvl60DA/WLo0Naeu/wDXOntx6ew+Q1ZfL0fIEcpHIr3FeuUT5ut1X1siyLjuxV2KuxVB6lqU&#xA;VhErupdnNEQd8uw4TkNBBLHNS124vB6aqIoq1oN2NPE5nR0GP+ICXv8ANMchHI0w7zx5UvfMmgzL&#xA;ZRmfULIieFKjkyV4yKpY+B5U78cw/wCTsGmF4xw8TnDXTyECZ29zA/Jn5P8AmHzJGbr1YrKyjk9O&#xA;SWUlnqACeMa9aBh1K4DIBnkyiD2j8v8AyC/lW4vyzQyrOsUcM8a8ZGWPkSXH7NeXSpyuUrcXNlEw&#xA;GaZBodirsVQesELps7MaKqlmO5oB1O3hmr7Z088umlGAuW33uXoZiOUEsWSB7dYbtwTA1GRlVm5A&#xA;ioIoM4fH2RqJSox4f6xER8zTv56vGBzv3b/ckh0bQWm5roNpeTyN6813MlwkiylidnSSI7bHYdc9&#xA;K7L0kMOCMMuUGQ7pRr3Oh1OoyTmTAEBdqnl6NpidOUhKL8FHK1oK0L1br45lzyYYxs5ID3yizxZp&#xA;8jEn4IPT9BvZdbg065haJywMoYUpGN2IPy6ZAnZvnlAjxB6yAAAAKAdBlLqXlGragsuqX0peQOZp&#xA;PSZSdgpon7Qp08MrngJkCBGut/2fLcO7wyIgBZ5PR/L+prqWk29zX95x4TD/AIsXZvv65bIUXUZY&#xA;cMiExwNbsVdirsVQt5ptleNG1xEHeKvB/wBoA0LLXrQ0FRlmPJKHJUAvkzyejB00PT0dTVXW1hVg&#xA;R0IIWoOREyOrM5Jd5TK0sbW0j9OCMKK1J7knapODJ65cZA4u9jxGq6K+BDsVdirsVdirsVdirsVd&#xA;iq1443pzUNTpUA4QSOSrfq1v/vpP+BGHjl3q2kUSGqIqk9wAMBkTzVtI40BCKFBJJCgDc7k7YFXY&#xA;q7FXYq7FXYqteKNwA6BgOgIB/XkZQEuYtIkRyWfVbb/fSf8AAjKTpMP8yPyDPxp/zj81wghHSNR8&#xA;gMkNPjHKMfkEHLI9Su4ryDUHICgPehy5g3iqXyaBokkjSPYws7kszFFqSepw2WwZZd6MggggiEUE&#xA;axRL9lEAVR9AwMCSeapih2Kv/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:6a3a263a-75e8-9843-a881-8b1271b7f1d3"
    stRef:documentID="xmp.did:6a3a263a-75e8-9843-a881-8b1271b7f1d3"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:6a3a263a-75e8-9843-a881-8b1271b7f1d3"
      stEvt:when="2021-12-24T16:42:02+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:32734b1e-6388-2c4f-8c36-1142bfd8aad2"
      stEvt:when="2021-12-24T16:42:06+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="580.949285"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
580.949 400 li
580.949 0 li
cp
clp
580.949 400 mo
0 400 li
0 0 li
580.949 0 li
580.949 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.85098 .835294 .937255 rgb
f
234.165 175.182 mo
234.198 177.879 232.621 180.084 230.643 180.108 cv
228.665 180.133 227.035 177.966 227.002 175.27 cv
226.969 172.573 228.546 170.367 230.524 170.343 cv
232.502 170.318 234.132 172.485 234.165 175.182 cv
cp
.643137 .611765 .94902 rgb
f
232.541 175.226 mo
204.799 175.226 li
202.703 175.226 201.003 173.526 201.003 171.43 cv
201.003 120.346 li
201.003 118.25 202.703 116.55 204.799 116.55 cv
232.541 116.55 li
234.637 116.55 236.337 118.25 236.337 120.346 cv
236.337 171.43 li
236.337 173.526 234.637 175.226 232.541 175.226 cv
cp
.25098 .113725 .286275 rgb
f
202.059 94.752 mo
202.581 137.392 li
216.247 137.225 li
215.725 94.585 li
202.059 94.752 li
cp
202.087 138.398 mo
201.813 138.398 201.59 138.178 201.587 137.904 cv
201.053 94.2646 li
201.052 94.1318 201.103 94.0039 201.195 93.9092 cv
201.288 93.814 201.415 93.7598 201.547 93.7583 cv
216.212 93.5791 li
216.492 93.5791 216.715 93.7988 216.719 94.0728 cv
217.252 137.712 li
217.254 137.845 217.203 137.973 217.11 138.068 cv
217.018 138.163 216.891 138.217 216.759 138.219 cv
202.093 138.398 li
202.091 138.398 202.089 138.398 202.087 138.398 cv
cp
.643137 .611765 .94902 rgb
f
229.43 175.226 mo
201.688 175.226 li
199.592 175.226 197.892 173.526 197.892 171.43 cv
197.892 120.346 li
197.892 118.25 199.592 116.55 201.688 116.55 cv
229.43 116.55 li
231.526 116.55 233.226 118.25 233.226 120.346 cv
233.226 171.43 li
233.226 173.526 231.526 175.226 229.43 175.226 cv
cp
.364706 .156863 .4 rgb
f
233.226 136.058 mo
197.892 136.058 li
197.754 136.058 197.642 135.946 197.642 135.808 cv
197.642 135.67 197.754 135.558 197.892 135.558 cv
233.226 135.558 li
233.364 135.558 233.476 135.67 233.476 135.808 cv
233.476 135.946 233.364 136.058 233.226 136.058 cv
cp
.643137 .611765 .94902 rgb
f
173.428 24.0303 mo
173.428 24.0303 170.237 23.8877 168.577 26.0703 cv
166.917 28.2529 167.472 30.9033 167.472 30.9033 cv
167.472 30.9033 163.806 31.834 162.917 34.9878 cv
162.028 38.1416 162.917 40.4985 162.917 40.4985 cv
162.917 40.4985 159.583 41.9194 158.417 46.6973 cv
157.25 51.4751 161.139 55.3364 161.139 55.3364 cv
182.296 33.604 li
178.731 24.54 li
173.428 24.0303 li
cp
.262745 .0980392 .286275 rgb
f
187.491 29.7637 mo
187.491 29.7637 189.18 32.1587 189.695 34.2007 cv
190.091 35.7744 189.25 38.3511 189.25 38.3511 cv
189.25 38.3511 192.397 41.5537 190.823 44.8477 cv
189.25 48.1416 176.597 44.8477 176.597 44.8477 cv
181.612 30.2417 li
187.491 29.7637 li
cp
f
194.398 58.8081 mo
207.583 84.3198 li
200.401 89.2871 li
200.401 89.2871 188.337 81.5566 185.627 69.6821 cv
182.917 57.8081 194.398 58.8081 194.398 58.8081 cv
cp
.988235 .560784 .466667 rgb
f
145.961 76.0659 mo
145.961 76.0659 156.914 83.8789 154.917 87.6055 cv
152.921 91.3325 144.25 90.1025 144.25 90.1025 cv
136.782 81.6143 li
145.961 76.0659 li
cp
.956863 .482353 .376471 rgb
f
134.479 43.3818 mo
150.917 77.8081 li
137.888 88.9751 li
132.676 54.3081 li
134.479 43.3818 li
cp
.643137 .611765 .94902 rgb
f
107.068 161.543 mo
105.943 171.916 li
92.0098 170.456 li
93.937 159.32 li
107.068 161.543 li
cp
.956863 .482353 .376471 rgb
f
58.1431 125.497 mo
70.0039 132.287 li
91.1899 95.2783 li
79.3286 88.4883 li
58.1431 125.497 li
cp
70.1895 133.469 mo
70.103 133.469 70.0176 133.446 69.9409 133.403 cv
57.2124 126.116 li
56.9727 125.979 56.8896 125.673 57.0269 125.434 cv
78.709 87.5576 li
78.8467 87.3184 79.1509 87.2344 79.3916 87.3721 cv
92.1206 94.6587 li
92.2354 94.7246 92.3198 94.8335 92.3545 94.9614 cv
92.3892 95.0894 92.3721 95.2261 92.3062 95.3413 cv
70.6235 133.217 li
70.5576 133.332 70.4487 133.417 70.3208 133.451 cv
70.2773 133.463 70.2334 133.469 70.1895 133.469 cv
cp
.364706 .156863 .4 rgb
f
27.0269 170.896 mo
25.687 173.237 23.209 174.337 21.4922 173.355 cv
19.7754 172.372 19.4702 169.678 20.8101 167.337 cv
22.1499 164.997 24.6279 163.896 26.3447 164.879 cv
28.0615 165.861 28.3667 168.556 27.0269 170.896 cv
cp
.643137 .611765 .94902 rgb
f
44.0439 180.638 mo
24.0601 169.198 li
22.5488 168.333 22.0249 166.406 22.8901 164.895 cv
55.4067 108.092 li
56.2715 106.581 58.1982 106.057 59.7095 106.922 cv
79.6934 118.362 li
81.2051 119.228 81.729 121.154 80.8638 122.666 cv
48.3472 179.468 li
47.4819 180.979 45.5552 181.503 44.0439 180.638 cv
cp
.470588 .290196 .486275 rgb
f
75.5415 119.424 mo
42.8516 176.523 li
42.0313 177.954 40.2114 178.443 38.7813 177.624 cv
31.3413 173.364 li
29.6113 172.374 li
21.2114 167.563 li
19.7813 166.744 19.2813 164.924 20.1016 163.494 cv
52.7915 106.394 li
53.6113 104.963 55.4316 104.474 56.8613 105.293 cv
64.3013 109.554 li
66.0313 110.543 li
74.4316 115.354 li
75.8613 116.174 76.3613 117.994 75.5415 119.424 cv
cp
.545098 .333333 .556863 rgb
f
91.0762 98.5205 mo
76.542 90.2002 li
75.5361 89.6245 75.1875 88.3423 75.7632 87.3364 cv
76.3394 86.3301 77.6216 85.9814 78.6274 86.5576 cv
93.1616 94.8774 li
94.1675 95.4531 94.5161 96.7358 93.9404 97.7417 cv
93.3643 98.7476 92.082 99.0962 91.0762 98.5205 cv
cp
.364706 .156863 .4 rgb
f
217.272 97.4365 mo
200.527 97.6411 li
199.368 97.6553 198.417 96.7271 198.402 95.5684 cv
198.388 94.4092 199.316 93.458 200.476 93.4438 cv
217.221 93.2393 li
218.38 93.2251 219.331 94.1533 219.345 95.312 cv
219.359 96.4712 218.431 97.4224 217.272 97.4365 cv
cp
.545098 .333333 .556863 rgb
f
89.3975 77.8081 mo
89.3975 77.8081 82.6948 84.4751 82.25 87.8081 cv
81.8057 91.1416 81.8057 91.1416 81.8057 91.1416 cv
81.8057 91.1416 80.25 89.8052 80.25 91.5845 cv
80.25 93.3638 84.4102 96.4214 86.8857 97.1147 cv
89.3613 97.8081 95.3613 85.8755 95.3613 85.8755 cv
89.3975 77.8081 li
cp
.956863 .482353 .376471 rgb
f
94.1934 87.4761 mo
94.1934 87.4761 94.1772 93.917 92.25 94.1191 cv
90.3228 94.3208 91.2959 91.5845 91.2959 91.5845 cv
94.1934 87.4761 li
cp
f
148.331 160.58 mo
150.084 170.869 li
135.637 173.489 li
134.479 162.237 li
148.331 160.58 li
cp
f
140.722 96.9868 mo
140.722 96.9868 149.888 121.265 152.055 133.209 cv
154.222 145.153 155.388 165.075 155.388 165.075 cv
155.388 165.075 131.051 167.928 130.22 167.041 cv
129.388 166.153 127.483 131.618 124.515 122.734 cv
121.545 113.85 120.388 108.987 120.388 108.987 cv
124.055 94.7788 li
140.722 96.9868 li
cp
.654902 .435294 .658824 rgb
f
108.206 85.416 mo
108.206 85.416 98.2217 121.772 96.6382 128.796 cv
95.0547 135.82 86.7217 161.135 86.8882 162.061 cv
87.0547 162.987 112.388 168.039 113.555 167.263 cv
114.722 166.487 124.017 130.487 125.453 118.487 cv
126.888 106.487 126.616 101.987 127.668 101.487 cv
128.722 100.987 140.722 96.9868 140.722 96.9868 cv
138.388 84.3198 li
108.206 85.416 li
cp
f
178.731 160.051 mo
178.731 168.157 li
191.733 166.872 li
192.625 163.014 li
192.441 159.235 li
178.731 160.051 li
cp
.988235 .560784 .466667 rgb
f
157.812 154.255 mo
155.383 161.989 li
168.172 164.659 li
170.18 161.245 li
171.137 157.584 li
157.812 154.255 li
cp
f
191.733 91.5386 mo
191.733 91.5386 198.858 160.033 198.636 161.051 cv
198.414 162.07 177.351 161.682 177.351 161.682 cv
175.728 155.384 li
176.597 91.5386 li
191.733 91.5386 li
cp
.643137 .611765 .94902 rgb
f
162.303 80.2993 mo
162.303 80.2993 159.414 89.8477 159.636 99.6255 cv
159.858 109.403 162.747 124.292 162.303 125.403 cv
161.858 126.514 155.191 155.384 155.191 155.384 cv
177.261 161.682 li
177.261 161.682 184.191 133.403 184.358 125.625 cv
184.525 117.848 181.28 95.8477 181.28 95.8477 cv
191.733 91.5386 li
190.677 82.0698 li
162.303 80.2993 li
cp
f
178.731 38.3511 mo
178.731 38.3511 169.667 36.376 167.025 44.3081 cv
163.614 54.5479 160.486 82.5977 160.486 82.5977 cv
160.486 82.5977 169.872 83.9307 181.157 83.7642 cv
192.441 83.5977 192.441 83.5977 192.441 83.5977 cv
192.441 83.5977 191.632 49.0142 190.823 44.8477 cv
190.014 40.6807 185.08 39.126 178.731 38.3511 cv
cp
.635294 .27451 .686275 rgb
f
177.711 159.707 mo
177.69 159.707 177.668 159.704 177.646 159.698 cv
177.513 159.663 177.434 159.525 177.47 159.392 cv
177.537 159.143 184.158 134.422 183.843 128.737 cv
183.525 123.018 181.056 96.1416 181.031 95.8706 cv
181.022 95.7798 181.064 95.6919 181.139 95.6411 cv
187.901 91.0444 li
188.014 90.9683 188.17 90.9956 188.248 91.1104 cv
188.326 91.2246 188.296 91.3799 188.182 91.4575 cv
181.542 95.9717 li
181.74 98.1323 184.036 123.202 184.342 128.71 cv
184.662 134.474 178.227 158.502 177.953 159.522 cv
177.923 159.633 177.822 159.707 177.711 159.707 cv
cp
1 1 1 rgb
f
167.097 122.889 mo
165.654 122.889 163.922 124.256 163.047 125.041 cv
165.633 124.63 168.216 123.945 168.325 123.425 cv
168.339 123.362 168.235 123.252 168.061 123.146 cv
167.766 122.966 167.44 122.889 167.097 122.889 cv
cp
162.303 125.653 mo
162.209 125.653 162.123 125.602 162.08 125.517 cv
162.032 125.422 162.049 125.307 162.122 125.23 cv
162.278 125.068 165.953 121.271 168.322 122.719 cv
168.711 122.958 168.877 123.229 168.815 123.527 cv
168.567 124.708 163.794 125.451 162.336 125.651 cv
162.325 125.652 162.314 125.653 162.303 125.653 cv
cp
f
179.135 154.002 mo
179.115 154.002 179.095 154 179.075 153.995 cv
156.797 148.438 li
156.664 148.404 156.582 148.268 156.615 148.134 cv
156.648 148 156.781 147.918 156.918 147.952 cv
179.163 153.501 li
197.886 153.014 li
198.027 153.014 198.139 153.122 198.142 153.257 cv
198.146 153.395 198.037 153.51 197.898 153.514 cv
179.142 154.002 li
179.14 154.002 179.138 154.002 179.135 154.002 cv
cp
f
210.244 171.063 mo
207.198 168.779 200.817 167.865 198.496 166.343 cv
196.176 164.82 193.579 161.145 192.194 161.841 cv
190.81 162.537 188.199 165.734 184.428 165.277 cv
180.657 164.82 178.917 163.907 177.901 164.82 cv
177.193 165.458 176.485 171.508 176.27 175.365 cv
174.858 175.626 li
174.858 179.462 li
182.95 179.465 li
183.413 179.588 184.718 176.543 185.588 177 cv
186.458 177.457 188.921 178.809 190.203 179.465 cv
190.203 179.465 209.652 180.062 213.454 179.552 cv
213.771 179.509 213.985 179.197 213.929 178.866 cv
213.664 177.299 212.722 172.921 210.244 171.063 cv
cp
.917647 .635294 .176471 rgb
f
184.468 174.9 mo
182.235 171.817 176.41 169.057 174.644 166.916 cv
172.877 164.774 171.485 160.495 169.956 160.75 cv
168.428 161.005 164.988 163.287 161.521 161.734 cv
158.054 160.182 156.662 158.794 155.422 159.366 cv
154.556 159.766 152.089 165.335 150.743 168.955 cv
149.317 168.787 li
148.182 172.452 li
155.911 174.849 li
156.316 175.104 158.464 172.582 159.16 173.275 cv
159.856 173.969 161.808 175.989 162.839 176.996 cv
162.839 176.996 181.239 183.321 185.022 183.959 cv
185.338 184.013 185.634 183.777 185.679 183.445 cv
185.89 181.87 186.286 177.409 184.468 174.9 cv
cp
.988235 .737255 .286275 rgb
f
83.5547 79.7266 mo
83.5547 79.7266 91.5073 57.8862 103.674 47.312 cv
115.841 36.7383 124.222 39.0146 124.222 39.0146 cv
124.222 39.0146 132.272 38.5747 134.83 44.0308 cv
137.388 49.4868 139.388 87.5938 139.388 87.5938 cv
139.388 87.5938 129.003 89.3198 119.862 88.8198 cv
110.722 88.3198 107.388 87.1597 107.388 87.1597 cv
108 73.894 li
108 73.894 104.319 79.707 102.055 83.458 cv
100.151 86.6118 98.5547 90.6533 98.5547 90.6533 cv
83.5547 79.7266 li
cp
.643137 .611765 .94902 rgb
f
122.342 34.9878 mo
122.469 40.6855 li
122.469 40.6855 123.533 42.3008 126.872 42.4976 cv
129.36 42.6445 130.22 42.0635 130.22 42.0635 cv
129.81 39.1855 li
129.406 36.3789 li
123.357 35.1885 li
122.342 34.9878 li
cp
.956863 .482353 .376471 rgb
f
123.357 35.1885 mo
123.375 35.3442 123.438 35.5264 123.535 35.7349 cv
124.873 38.5527 128.373 39.0889 129.81 39.1855 cv
129.406 36.3789 li
123.357 35.1885 li
cp
0 0 0 rgb
f
130.388 23.3633 mo
130.388 23.3633 133.537 30.4409 132.446 34.436 cv
131.355 38.4316 127.718 37.8281 125.539 37.0718 cv
123.36 36.3154 122.342 34.9893 122.342 34.9893 cv
122.342 34.9893 120.316 35.6914 118.945 33.812 cv
117.574 31.9331 118.396 29.7588 119.552 29.2539 cv
120.708 28.7495 122.092 29.5771 122.092 29.5771 cv
120.998 27.5215 li
120.998 27.5215 125.474 17.0078 130.388 23.3633 cv
cp
.956863 .482353 .376471 rgb
f
130.121 32.4087 mo
130.096 32.4087 130.071 32.4053 130.047 32.3975 cv
129.915 32.3569 129.841 32.2168 129.882 32.085 cv
130.281 30.793 129.311 29.3867 129.301 29.3726 cv
129.222 29.2598 129.25 29.104 129.362 29.0244 cv
129.474 28.9453 129.631 28.9727 129.71 29.085 cv
129.756 29.1504 130.832 30.7036 130.359 32.2324 cv
130.326 32.3398 130.228 32.4087 130.121 32.4087 cv
cp
0 0 0 rgb
f
121.791 32.9302 mo
121.724 32.9302 121.658 32.9038 121.609 32.8516 cv
119.681 30.8086 li
119.586 30.7085 119.59 30.5503 119.691 30.4556 cv
119.791 30.3599 119.949 30.3652 120.044 30.4658 cv
121.972 32.5088 li
122.067 32.6089 122.063 32.7671 121.962 32.8618 cv
121.914 32.9077 121.852 32.9302 121.791 32.9302 cv
cp
f
119.749 32.3828 mo
119.627 32.3828 119.521 32.2939 119.502 32.1704 cv
119.481 32.0337 119.576 31.9063 119.712 31.8857 cv
121.046 31.6836 li
121.182 31.6636 121.31 31.7568 121.331 31.8931 cv
121.352 32.0298 121.257 32.1572 121.121 32.1777 cv
119.787 32.3799 li
119.774 32.3818 119.762 32.3828 119.749 32.3828 cv
cp
f
122.092 29.5771 mo
122.092 29.5771 122.825 30.0581 123.357 29.2251 cv
123.89 28.3921 122.725 25.9302 122.725 25.9302 cv
122.725 25.9302 124.922 26.4292 126.281 25.7021 cv
127.64 24.9756 128.306 22.9756 128.306 22.9756 cv
128.306 22.9756 129.306 25.0586 132.306 24.1421 cv
135.306 23.2256 135.878 19.1421 132.676 18.3086 cv
129.473 17.4756 127.723 18.8921 127.723 18.8921 cv
127.723 18.8921 127.317 15.9287 123.357 17.3921 cv
119.75 18.7256 119.14 23.2451 119.14 23.2451 cv
119.14 23.2451 116.973 23.3457 116.556 25.7021 cv
116.14 28.0586 118.896 29.7637 118.896 29.7637 cv
118.896 29.7637 120.462 28.8457 122.092 29.5771 cv
cp
f
126.754 33.2886 mo
126.91 33.5386 127.15 33.8262 127.501 34.002 cv
127.876 34.189 128.265 34.043 128.534 33.8799 cv
126.754 33.2886 li
cp
127.876 34.5918 mo
127.684 34.5918 127.482 34.5513 127.278 34.4492 cv
126.357 33.9888 126.054 32.9805 126.042 32.938 cv
126.015 32.8486 126.041 32.7524 126.108 32.6875 cv
126.174 32.623 126.273 32.6021 126.36 32.6304 cv
129.135 33.5527 li
129.217 33.5801 129.279 33.6475 129.299 33.731 cv
129.319 33.8149 129.295 33.9033 129.235 33.9648 cv
129.204 33.9966 128.611 34.5918 127.876 34.5918 cv
cp
f
126.904 29.7607 mo
126.78 29.7607 126.672 29.6685 126.656 29.5425 cv
126.487 28.2197 li
126.47 28.0825 126.567 27.9575 126.704 27.9399 cv
126.836 27.9229 126.966 28.0195 126.983 28.1563 cv
127.152 29.479 li
127.17 29.6162 127.073 29.7412 126.936 29.7588 cv
126.925 29.7603 126.915 29.7607 126.904 29.7607 cv
cp
f
130.83 29.4453 mo
130.708 29.4453 130.602 29.356 130.583 29.2319 cv
130.389 27.9131 li
130.369 27.7764 130.463 27.6494 130.6 27.6289 cv
130.74 27.6152 130.863 27.7036 130.884 27.8398 cv
131.078 29.1587 li
131.098 29.2954 131.003 29.4224 130.867 29.4429 cv
130.854 29.4443 130.842 29.4453 130.83 29.4453 cv
cp
f
125.672 27.2256 mo
125.633 27.2256 125.594 27.2168 125.558 27.1978 cv
125.435 27.1348 125.386 26.9839 125.45 26.8613 cv
125.938 25.9106 127.142 26.1582 127.192 26.1689 cv
127.327 26.1978 127.413 26.3306 127.384 26.4653 cv
127.355 26.5996 127.223 26.6855 127.087 26.6577 cv
127.051 26.6489 126.207 26.48 125.894 27.0898 cv
125.85 27.1763 125.762 27.2256 125.672 27.2256 cv
cp
f
129.506 26.4082 mo
129.457 26.4082 129.408 26.394 129.365 26.3647 cv
129.25 26.2866 129.222 26.1309 129.299 26.0171 cv
129.501 25.7231 129.76 25.5547 130.07 25.5161 cv
130.696 25.4404 131.28 25.9492 131.305 25.9712 cv
131.409 26.0625 131.418 26.2197 131.327 26.3232 cv
131.236 26.4272 131.078 26.4365 130.975 26.3457 cv
130.852 26.2388 130.457 25.9614 130.13 26.0127 cv
129.967 26.0332 129.83 26.127 129.712 26.2993 cv
129.664 26.3701 129.585 26.4082 129.506 26.4082 cv
cp
f
126.075 185.496 mo
125.265 185.8 91.2227 185.647 90.4736 184.363 cv
90.2456 183.976 90.1167 182.681 90.0581 181.058 cv
89.8999 177.231 91.3989 171.857 91.3989 171.857 cv
91.3989 171.857 91.2104 169.91 91.2891 169.012 cv
91.3574 168.124 106.39 168.681 106.39 168.681 cv
116.758 177.405 li
116.758 177.405 119.693 176.978 122.865 177.599 cv
124.545 177.923 125.569 180.026 126.047 181.993 cv
126.472 183.737 126.46 185.348 126.075 185.496 cv
cp
.364706 .156863 .4 rgb
f
126.147 185.396 mo
125.348 185.727 91.3174 186.657 90.5278 185.396 cv
90.2876 185.017 90.1177 183.727 90.0078 182.107 cv
96.4775 182.567 112.397 183.437 126.008 181.896 cv
126.488 183.626 126.528 185.237 126.147 185.396 cv
cp
.988235 .737255 .286275 rgb
f
114.026 175.845 mo
114 175.843 107.937 175.219 107.937 175.219 cv
107.844 175.21 107.765 175.15 107.73 175.064 cv
107.696 174.978 107.712 174.879 107.772 174.809 cv
109.887 172.319 li
109.978 172.214 110.135 172.201 110.239 172.291 cv
110.345 172.38 110.357 172.538 110.268 172.643 cv
108.46 174.771 li
114.051 175.346 li
114.189 175.36 114.289 175.483 114.274 175.62 cv
114.261 175.749 114.153 175.845 114.026 175.845 cv
cp
f
170.79 184.363 mo
169.99 184.693 135.96 185.623 135.17 184.363 cv
134.93 183.983 134.76 182.693 134.65 181.073 cv
134.37 177.253 134.83 172.464 134.83 172.464 cv
134.83 172.464 134.51 170.115 134.56 169.215 cv
134.6 168.325 149.516 167.343 149.516 167.343 cv
161.22 176.573 li
161.22 176.573 164.14 176.053 167.33 176.573 cv
169.02 176.843 170.11 178.913 170.65 180.863 cv
171.13 182.593 171.17 184.203 170.79 184.363 cv
cp
.364706 .156863 .4 rgb
f
170.79 184.363 mo
169.99 184.693 135.96 185.623 135.17 184.363 cv
134.93 183.983 134.76 182.693 134.65 181.073 cv
141.12 181.533 157.04 182.403 170.65 180.863 cv
171.13 182.593 171.17 184.203 170.79 184.363 cv
cp
.988235 .737255 .286275 rgb
f
158.669 174.811 mo
158.643 174.81 152.58 174.186 152.58 174.186 cv
152.487 174.176 152.408 174.116 152.373 174.03 cv
152.338 173.944 152.354 173.846 152.415 173.775 cv
154.529 171.286 li
154.619 171.18 154.777 171.168 154.881 171.257 cv
154.987 171.346 155 171.504 154.91 171.609 cv
153.103 173.737 li
158.694 174.313 li
158.832 174.327 158.931 174.449 158.917 174.586 cv
158.904 174.715 158.795 174.811 158.669 174.811 cv
cp
f
124.937 122.216 mo
124.771 122.2 124.672 122.076 124.688 121.939 cv
124.772 121.166 126.765 102.989 126.895 102.363 cv
127.001 101.849 130.679 100.655 137.826 98.8145 cv
137.96 98.7803 138.096 98.8608 138.13 98.9941 cv
138.165 99.1279 138.084 99.2642 137.951 99.2988 cv
133.181 100.527 127.91 102.056 127.376 102.509 cv
127.228 103.457 125.887 115.584 125.185 121.994 cv
125.17 122.122 125.062 122.216 124.937 122.216 cv
cp
.364706 .156863 .4 rgb
f
107.962 96.9033 mo
107.843 96.9033 107.738 96.8184 107.716 96.6973 cv
107.692 96.561 107.783 96.4316 107.918 96.4072 cv
111.486 95.7715 113.558 91.5195 113.578 91.4766 cv
113.638 91.3521 113.786 91.2998 113.912 91.3589 cv
114.036 91.4185 114.089 91.5674 114.029 91.6919 cv
113.941 91.8765 111.83 96.2183 108.006 96.8994 cv
107.991 96.9019 107.977 96.9033 107.962 96.9033 cv
cp
f
127.636 42.6519 mo
124.329 42.6519 122.401 40.9604 122.302 40.8716 cv
122.199 40.7793 122.191 40.6216 122.283 40.519 cv
122.376 40.416 122.534 40.4077 122.636 40.4995 cv
122.664 40.5249 125.521 43.0146 130.157 41.8213 cv
130.292 41.7861 130.427 41.8677 130.462 42.001 cv
130.496 42.1348 130.416 42.271 130.282 42.3057 cv
129.323 42.5522 128.438 42.6519 127.636 42.6519 cv
cp
.988235 .737255 .286275 rgb
f
173.936 90.6533 mo
162.178 90.6533 li
160.983 90.6533 160.015 89.6851 160.015 88.4902 cv
160.015 78.2285 li
160.015 77.0342 160.983 76.0659 162.178 76.0659 cv
173.936 76.0659 li
175.13 76.0659 176.098 77.0342 176.098 78.2285 cv
176.098 88.4902 li
176.098 89.6851 175.13 90.6533 173.936 90.6533 cv
cp
.313726 .133333 .34902 rgb
f
172.337 90.6533 mo
160.58 90.6533 li
159.385 90.6533 158.417 89.6851 158.417 88.4902 cv
158.417 78.2285 li
158.417 77.0342 159.385 76.0659 160.58 76.0659 cv
172.337 76.0659 li
173.532 76.0659 174.5 77.0342 174.5 78.2285 cv
174.5 88.4902 li
174.5 89.6851 173.532 90.6533 172.337 90.6533 cv
cp
.364706 .156863 .4 rgb
f
174.5 82.8765 mo
158.417 82.8765 li
158.279 82.8765 158.167 82.7646 158.167 82.6265 cv
158.167 82.4883 158.279 82.3765 158.417 82.3765 cv
174.5 82.3765 li
174.638 82.3765 174.75 82.4883 174.75 82.6265 cv
174.75 82.7646 174.638 82.8765 174.5 82.8765 cv
cp
.545098 .333333 .556863 rgb
f
166.403 82.8765 mo
165.643 82.8765 165 83.2617 165 83.7173 cv
165 84.1729 165.643 84.5581 166.403 84.5581 cv
167.164 84.5581 167.807 84.1729 167.807 83.7173 cv
167.807 83.2617 167.164 82.8765 166.403 82.8765 cv
cp
166.403 85.0581 mo
165.336 85.0581 164.5 84.4692 164.5 83.7173 cv
164.5 82.9653 165.336 82.3765 166.403 82.3765 cv
167.471 82.3765 168.307 82.9653 168.307 83.7173 cv
168.307 84.4692 167.471 85.0581 166.403 85.0581 cv
cp
f
153.029 85.6646 mo
153.029 85.6646 160.392 82.0669 160 84.5806 cv
159.607 87.0942 155.261 88.9673 155.261 88.9673 cv
153.029 85.6646 li
cp
.956863 .482353 .376471 rgb
f
150.644 80.2993 mo
150.644 80.2993 143.685 88.209 143.079 91.6753 cv
142.472 95.1416 144.976 94.1294 144.976 94.1294 cv
144.976 94.1294 145.583 97.144 148.178 95.3799 cv
149.874 94.2271 149.583 91.6753 149.583 91.6753 cv
149.583 91.6753 147.547 96.4795 149.434 97.144 cv
151.32 97.8081 156.328 89.0962 156.328 89.0962 cv
156.328 89.0962 157.439 93.1221 158.695 92.2588 cv
161.024 90.6563 157.75 83.7788 157.75 83.7788 cv
152.858 77.8081 li
150.644 80.2993 li
cp
.988235 .560784 .466667 rgb
f
150.351 94.3105 mo
150.351 94.3105 151.569 98.8613 149.038 98.312 cv
146.507 97.7632 142.442 90.2646 144.462 88.4971 cv
146.482 86.73 150.351 94.3105 150.351 94.3105 cv
cp
.956863 .482353 .376471 rgb
f
154.177 92.4717 mo
154.177 92.4717 155.395 97.0225 152.864 96.4736 cv
150.333 95.9243 146.268 88.4258 148.288 86.6587 cv
150.308 84.8911 154.177 92.4717 154.177 92.4717 cv
cp
f
156.173 88.7451 mo
156.859 89.5649 157.362 90.5332 157.533 91.5889 cv
157.684 92.5229 157.548 93.4448 156.403 93.396 cv
154.114 93.2988 149.438 87.3735 150.933 85.5278 cv
152.042 84.1582 154.816 87.124 156.173 88.7451 cv
cp
f
150.927 95.3638 mo
150.841 95.3638 150.757 95.3193 150.71 95.2393 cv
147.724 90.1016 li
147.655 89.9824 147.695 89.8291 147.815 89.7598 cv
147.933 89.6904 148.087 89.73 148.157 89.8506 cv
151.143 94.9883 li
151.212 95.1074 151.172 95.2607 151.052 95.3301 cv
151.013 95.353 150.97 95.3638 150.927 95.3638 cv
cp
0 0 0 rgb
f
153.918 92.2373 mo
153.84 92.2373 153.762 92.2002 153.714 92.1309 cv
150.448 87.4712 li
150.369 87.3579 150.396 87.2021 150.509 87.123 cv
150.623 87.0439 150.779 87.0708 150.857 87.1841 cv
154.123 91.8438 li
154.203 91.957 154.175 92.1128 154.062 92.1919 cv
154.018 92.2227 153.968 92.2373 153.918 92.2373 cv
cp
f
82.6802 92.9473 mo
82.5928 92.9473 82.5083 92.9014 82.4624 92.8198 cv
81.5879 91.2642 li
81.5503 91.1973 81.5454 91.1167 81.5747 91.0459 cv
81.604 90.9751 81.6646 90.9214 81.7383 90.9009 cv
83.4873 90.4126 li
83.6206 90.3745 83.7583 90.4526 83.7954 90.5859 cv
83.8325 90.7192 83.7549 90.8569 83.6221 90.894 cv
82.1797 91.2969 li
82.8979 92.5747 li
82.9658 92.6953 82.9229 92.8477 82.8027 92.915 cv
82.7642 92.937 82.7217 92.9473 82.6802 92.9473 cv
cp
f
91.0503 93.5439 mo
90.999 93.5439 90.9468 93.5283 90.9023 93.4956 cv
90.791 93.4141 90.7671 93.2573 90.8486 93.146 cv
92.0679 91.4829 93.3062 88.3276 93.3184 88.2959 cv
93.3687 88.1675 93.5132 88.1025 93.6421 88.1538 cv
93.771 88.2041 93.8345 88.3491 93.7842 88.4775 cv
93.7329 88.6094 92.5103 91.7256 91.252 93.4419 cv
91.2031 93.5088 91.127 93.5439 91.0503 93.5439 cv
cp
f
66.0313 110.543 mo
31.3516 173.354 li
31.3413 173.364 29.6113 172.374 29.6113 172.374 cv
64.2915 109.563 li
64.3013 109.554 66.0313 110.543 66.0313 110.543 cv
cp
.988235 .737255 .286275 rgb
f
158.583 55.5859 mo
158.583 55.5859 154.25 65.4751 151.917 72.9751 cv
150.413 77.8081 149.912 81.1543 149.912 81.1543 cv
157.75 83.7788 li
171.046 60.8032 li
158.583 55.5859 li
cp
.988235 .560784 .466667 rgb
f
155.191 58.6416 mo
155.191 58.6416 163.26 39.1855 173.428 38.5122 cv
181.227 37.9951 171.137 67.8081 171.137 67.8081 cv
155.191 58.6416 li
cp
.635294 .27451 .686275 rgb
f
189.514 42.2627 mo
201.25 59.1416 li
190.083 64.731 li
185.868 53.1362 li
189.514 42.2627 li
cp
f
44.1855 180.516 mo
42.8457 182.856 40.3677 183.957 38.6509 182.974 cv
36.9341 181.991 36.6289 179.297 37.9683 176.957 cv
39.3086 174.616 41.7861 173.515 43.5029 174.498 cv
45.2197 175.48 45.5254 178.175 44.1855 180.516 cv
cp
.643137 .611765 .94902 rgb
f
120.079 29.4844 mo
119.992 29.4844 119.907 29.439 119.861 29.3584 cv
119.793 29.2383 119.834 29.0859 119.954 29.0176 cv
120.041 28.9678 122.114 27.8066 124.75 28.5562 cv
124.883 28.5938 124.96 28.7319 124.922 28.8647 cv
124.884 28.9971 124.745 29.0757 124.613 29.0366 cv
122.188 28.3491 120.222 29.4404 120.202 29.4517 cv
120.163 29.4736 120.121 29.4844 120.079 29.4844 cv
cp
0 0 0 rgb
f
127.535 30.8018 mo
127.005 30.8716 li
126.655 30.9214 126.325 30.8716 126.025 30.7515 cv
125.875 30.6914 125.725 30.6118 125.595 30.5015 cv
125.195 30.2217 124.905 29.7617 124.825 29.2217 cv
124.725 28.4814 li
124.665 28.0815 124.945 27.7217 125.335 27.6714 cv
127.745 27.3315 li
128.285 27.2617 li
128.335 27.2515 128.375 27.2515 128.415 27.2515 cv
128.755 27.2715 129.035 27.5215 129.095 27.8716 cv
129.195 28.6118 li
129.345 29.6714 128.595 30.6514 127.535 30.8018 cv
cp
f
168.578 78.8916 mo
168.494 78.8916 168.412 78.8496 168.364 78.7729 cv
168.292 78.6553 168.329 78.5015 168.446 78.4287 cv
168.603 78.332 184.148 68.4155 185.811 39.9692 cv
185.818 39.8315 185.932 39.7231 186.075 39.7344 cv
186.212 39.7422 186.318 39.8608 186.31 39.9985 cv
184.631 68.7222 168.867 78.7563 168.708 78.8545 cv
168.667 78.8794 168.622 78.8916 168.578 78.8916 cv
cp
.364706 .156863 .4 rgb
f
132.095 30.3315 mo
131.815 30.3716 131.535 30.3418 131.275 30.2417 cv
131.115 30.1914 130.965 30.1016 130.835 30.0015 cv
130.485 29.7417 130.245 29.3418 130.175 28.8818 cv
130.025 27.8218 li
129.985 27.4717 130.225 27.1514 130.565 27.1118 cv
132.685 26.8115 li
132.795 26.8018 132.895 26.8115 132.995 26.8516 cv
133.155 26.9116 133.295 27.0415 133.355 27.2017 cv
133.375 27.2515 133.385 27.3018 133.395 27.3516 cv
133.545 28.4116 li
133.675 29.3418 133.025 30.2017 132.095 30.3315 cv
cp
0 0 0 rgb
f
128.697 28.897 mo
128.623 28.897 128.55 28.8643 128.501 28.8022 cv
128.416 28.6943 128.433 28.5381 128.54 28.4521 cv
128.578 28.4219 129.479 27.7178 130.581 28.3159 cv
130.702 28.3818 130.747 28.5337 130.681 28.6553 cv
130.615 28.7764 130.463 28.8203 130.342 28.7554 cv
129.537 28.3179 128.879 28.8213 128.852 28.8433 cv
128.806 28.8794 128.751 28.897 128.697 28.897 cv
cp
f
128.415 27.2515 mo
126.025 30.7515 li
125.875 30.6914 125.725 30.6118 125.595 30.5015 cv
127.745 27.3315 li
128.285 27.2617 li
128.335 27.2515 128.375 27.2515 128.415 27.2515 cv
cp
1 1 1 rgb
f
133.355 27.2017 mo
131.275 30.2417 li
131.115 30.1914 130.965 30.1016 130.835 30.0015 cv
132.995 26.8516 li
133.155 26.9116 133.295 27.0415 133.355 27.2017 cv
cp
f
177.772 36.7173 mo
177.772 36.7173 176.012 37.2305 175.457 38.0239 cv
174.835 38.9126 175.863 41.3418 178.952 43.3066 cv
181.208 44.7417 183.135 45.2866 183.135 45.2866 cv
183.135 45.2866 185.231 42.5811 185.671 40.9087 cv
186.111 39.2363 184.773 36.98 184.773 36.98 cv
177.772 36.7173 li
cp
.988235 .737255 .286275 rgb
f
181.297 43.3418 mo
181.297 43.3418 179.743 45.3267 179.335 48.5078 cv
178.928 51.689 180.662 55.3364 180.662 55.3364 cv
180.662 55.3364 183.744 52.0664 184.221 49.5361 cv
184.698 47.0063 183.457 43.3511 183.457 43.3511 cv
183.457 43.3511 184.702 46.4585 184.973 48.3438 cv
185.244 50.229 185.624 52.6533 185.624 52.6533 cv
185.624 52.6533 187.505 50.3232 187.491 47.4829 cv
187.477 44.6426 184.491 42.6787 184.491 42.6787 cv
181.297 43.3418 li
cp
f
173.428 24.0303 mo
173.428 24.0303 174.594 18.0845 181.226 18.7056 cv
187.858 19.3267 187.106 30.4199 187.106 30.4199 cv
175.247 29.5762 li
173.428 24.0303 li
cp
.262745 .0980392 .286275 rgb
f
184.812 41.1807 mo
184.812 41.1807 184.441 41.9009 182.271 41.7007 cv
178.932 41.3906 177.861 39.9009 177.861 39.9009 cv
177.711 34.2007 li
178.731 34.4009 li
184.782 35.5708 li
184.792 38.3511 li
184.812 41.1807 li
cp
.988235 .560784 .466667 rgb
f
184.792 38.3511 mo
183.202 38.1909 180.151 37.5308 178.912 34.9409 cv
178.812 34.7407 178.751 34.5508 178.731 34.4009 cv
184.782 35.5708 li
184.792 38.3511 li
cp
0 0 0 rgb
f
185.727 22.5547 mo
185.727 22.5547 188.896 29.623 187.817 33.6211 cv
186.738 37.6196 183.099 37.0269 180.917 36.2769 cv
178.736 35.5269 177.715 34.2036 177.715 34.2036 cv
177.715 34.2036 175.691 34.9111 174.314 33.0361 cv
172.938 31.1611 173.754 28.9844 174.908 28.4766 cv
176.063 27.9683 177.45 28.7925 177.45 28.7925 cv
176.35 26.7397 li
176.35 26.7397 180.795 16.2129 185.727 22.5547 cv
cp
.988235 .560784 .466667 rgb
f
186.771 28.5405 mo
186.649 28.5405 186.542 28.4512 186.523 28.3271 cv
186.329 27.0078 li
186.319 26.936 186.34 26.8638 186.386 26.8091 cv
186.916 26.188 li
187.008 26.083 187.165 26.0708 187.269 26.1597 cv
187.374 26.2495 187.386 26.4072 187.297 26.5122 cv
186.84 27.0469 li
187.019 28.2539 li
187.039 28.3906 186.944 28.5176 186.808 28.5381 cv
186.795 28.5396 186.783 28.5405 186.771 28.5405 cv
cp
0 0 0 rgb
f
181.612 26.3203 mo
181.574 26.3203 181.535 26.3115 181.498 26.2925 cv
181.375 26.2295 181.327 26.0786 181.39 25.9561 cv
181.879 25.0054 183.083 25.2529 183.133 25.2637 cv
183.268 25.2925 183.353 25.4253 183.324 25.5601 cv
183.295 25.6948 183.163 25.7788 183.028 25.7524 cv
182.991 25.7432 182.148 25.5747 181.834 26.1846 cv
181.791 26.271 181.703 26.3203 181.612 26.3203 cv
cp
f
185.446 25.5029 mo
185.397 25.5029 185.348 25.4888 185.305 25.4595 cv
185.191 25.3813 185.162 25.2256 185.24 25.1118 cv
185.471 24.7739 185.74 24.6025 186.039 24.6025 cv
186.521 24.6035 186.845 25.0605 186.881 25.1123 cv
186.958 25.2266 186.928 25.3809 186.815 25.4585 cv
186.703 25.5376 186.546 25.5083 186.468 25.394 cv
186.415 25.3184 186.224 25.1025 186.039 25.1025 cv
185.884 25.103 185.744 25.2612 185.653 25.394 cv
185.604 25.4648 185.526 25.5029 185.446 25.5029 cv
cp
f
177.45 28.7925 mo
177.45 28.7925 180.502 29.4082 182.623 26.0117 cv
184.743 22.6147 184.548 21.2197 184.548 21.2197 cv
186.661 24.7266 li
186.661 24.7266 187.133 22.2949 186.161 20.7451 cv
185.188 19.1948 184.179 19.5161 184.179 19.5161 cv
177.449 21.1978 li
175.676 26.5923 li
177.45 28.7925 li
cp
.262745 .0980392 .286275 rgb
f
182.844 28.8555 mo
182.72 28.8555 182.613 28.7632 182.597 28.6372 cv
182.428 27.3145 li
182.418 27.2358 182.445 27.1577 182.502 27.1025 cv
183.185 26.4453 li
183.284 26.3506 183.442 26.3521 183.538 26.4521 cv
183.634 26.5513 183.631 26.71 183.531 26.8057 cv
182.939 27.3755 li
183.093 28.5737 li
183.11 28.7109 183.013 28.8359 182.876 28.8535 cv
182.866 28.855 182.855 28.8555 182.844 28.8555 cv
cp
0 0 0 rgb
f
186.06 31.1533 mo
186.032 31.1533 186.003 31.1484 185.975 31.1387 cv
185.845 31.0918 185.778 30.9482 185.825 30.8184 cv
186.291 29.5288 185.007 27.7822 184.994 27.7646 cv
184.911 27.6538 184.934 27.4971 185.045 27.4146 cv
185.155 27.3325 185.312 27.354 185.395 27.4658 cv
185.455 27.5464 186.851 29.4487 186.295 30.9883 cv
186.258 31.0898 186.163 31.1533 186.06 31.1533 cv
cp
f
183.812 32.8081 mo
183.972 32.9136 184.163 32.9971 184.375 33.0122 cv
184.539 33.0244 184.683 33.0088 184.804 32.978 cv
183.812 32.8081 li
cp
184.484 33.5161 mo
184.438 33.5161 184.39 33.5146 184.34 33.5112 cv
183.448 33.4478 182.893 32.6001 182.87 32.564 cv
182.816 32.4805 182.817 32.3735 182.872 32.291 cv
182.926 32.2085 183.026 32.1655 183.123 32.1821 cv
185.551 32.5986 li
185.638 32.6138 185.71 32.6733 185.742 32.7559 cv
185.774 32.8379 185.76 32.9312 185.705 33 cv
185.688 33.0225 185.287 33.5161 184.484 33.5161 cv
cp
f
177.191 31.7642 mo
177.126 31.7642 177.061 31.7388 177.012 31.6885 cv
175.068 29.6885 li
174.972 29.5894 174.974 29.4312 175.073 29.335 cv
175.173 29.2393 175.331 29.2412 175.426 29.3398 cv
177.371 31.3398 li
177.467 31.439 177.465 31.5972 177.366 31.6934 cv
177.317 31.7407 177.254 31.7642 177.191 31.7642 cv
cp
f
174.858 31.7642 mo
174.755 31.7642 174.658 31.6997 174.622 31.5972 cv
174.576 31.4668 174.645 31.3242 174.775 31.2783 cv
176.514 30.6675 li
176.645 30.6221 176.787 30.6909 176.833 30.8203 cv
176.879 30.9507 176.81 31.0933 176.68 31.1392 cv
174.941 31.75 li
174.914 31.7598 174.885 31.7642 174.858 31.7642 cv
cp
f
177.787 37.0635 mo
177.787 37.0635 181.198 40.3721 183.184 40.4561 cv
185.169 40.5405 184.945 38.8799 184.945 38.8799 cv
185.194 41.542 li
183.358 44.1411 li
178.392 41.2837 li
176.021 38.4478 li
177.787 37.0635 li
cp
.988235 .737255 .286275 rgb
f
183.827 40.7485 mo
183.659 40.7559 183.567 40.8042 183.5 40.9053 cv
183.25 41.2886 183.417 42.2642 183.647 43.061 cv
183.984 42.188 184.251 41.1626 184.031 40.8359 cv
184.001 40.792 183.954 40.7485 183.827 40.7485 cv
cp
181.773 44.2764 mo
181.517 44.2764 181.278 44.2529 181.09 44.1919 cv
180.115 43.875 180.078 41.6704 180.278 40.8384 cv
180.311 40.7046 180.44 40.6221 180.58 40.6538 cv
180.714 40.686 180.796 40.8213 180.764 40.9556 cv
180.54 41.8877 180.763 43.5596 181.245 43.7163 cv
181.701 43.8647 182.709 43.7075 183.29 43.5884 cv
183.068 42.9326 182.612 41.3491 183.083 40.6313 cv
183.236 40.3965 183.475 40.2642 183.773 40.25 cv
184.146 40.2246 184.344 40.4063 184.445 40.5566 cv
184.974 41.3418 184.04 43.4595 183.847 43.876 cv
183.82 43.9336 183.774 43.9761 183.721 43.9995 cv
183.537 44.0483 182.57 44.2764 181.773 44.2764 cv
cp
.545098 .333333 .556863 rgb
f
181.938 45.1357 mo
181.544 46.313 181.235 47.6484 181.483 48.0303 cv
181.51 48.0723 181.542 48.0986 181.615 48.1011 cv
181.69 48.1152 181.74 48.0796 181.792 48.0195 cv
182.126 47.6299 182.082 46.2866 181.938 45.1357 cv
cp
181.625 48.6016 mo
181.369 48.5923 181.185 48.4893 181.063 48.3027 cv
180.494 47.4253 181.58 44.6045 181.804 44.0479 cv
181.845 43.9453 181.954 43.8862 182.06 43.8921 cv
182.17 43.9028 182.26 43.9854 182.281 44.0942 cv
182.347 44.4395 182.903 47.4927 182.171 48.3452 cv
182.027 48.5132 181.838 48.6016 181.625 48.6016 cv
cp
f
200.401 89.2871 mo
200.401 89.2871 203.687 96.6001 204.468 97.5928 cv
205.25 98.5859 206.472 98.5747 207.028 98.3579 cv
207.583 98.1416 206.361 93.3979 206.361 93.3979 cv
213.359 93.2695 li
213.359 93.2695 210.472 87.6094 207.583 84.3198 cv
204.695 81.0303 201.25 82.6265 201.25 82.6265 cv
200.401 89.2871 li
cp
.988235 .560784 .466667 rgb
f
139.253 85.4263 mo
139.122 85.4263 139.012 85.3242 139.004 85.1914 cv
137.639 62.4902 li
137.63 62.3521 137.735 62.2339 137.873 62.2256 cv
138.025 62.2095 138.13 62.3223 138.138 62.46 cv
139.503 85.1611 li
139.511 85.2993 139.406 85.4175 139.269 85.4258 cv
139.263 85.4263 139.258 85.4263 139.253 85.4263 cv
cp
.988235 .737255 .286275 rgb
f
110.976 67.7397 mo
110.197 67.8862 109.116 70.7754 108.453 73.1616 cv
109.931 71.7915 112.199 69.2407 111.269 67.9546 cv
111.135 67.7686 111.033 67.7397 110.976 67.7397 cv
cp
108 74.144 mo
107.954 74.144 107.908 74.1313 107.867 74.1055 cv
107.775 74.0479 107.731 73.938 107.757 73.8335 cv
108.021 72.7827 109.407 67.5293 110.842 67.2529 cv
111.057 67.21 111.376 67.249 111.674 67.6616 cv
113.238 69.8262 108.368 73.9136 108.16 74.0864 cv
108.114 74.1245 108.057 74.144 108 74.144 cv
cp
f
191.87 64.0869 mo
191.736 64.0869 191.625 63.9814 191.62 63.8467 cv
191.292 55.3462 li
191.287 55.208 191.395 55.0918 191.532 55.0864 cv
191.692 55.0806 191.787 55.189 191.792 55.3267 cv
192.12 63.8271 li
192.125 63.9653 192.018 64.0815 191.88 64.0869 cv
191.876 64.0869 191.873 64.0869 191.87 64.0869 cv
cp
f
170.382 67.937 mo
170.334 67.937 170.288 67.9238 170.248 67.8979 cv
167.688 66.2681 li
167.571 66.1938 167.537 66.0396 167.611 65.9229 cv
167.687 65.8071 167.841 65.7739 167.957 65.8462 cv
170.296 67.3359 li
172.456 63.5903 li
172.524 63.4702 172.676 63.4297 172.797 63.4985 cv
172.917 63.5679 172.958 63.7207 172.889 63.8403 cv
170.599 67.812 li
170.564 67.8711 170.508 67.9136 170.441 67.9297 cv
170.422 67.9346 170.402 67.937 170.382 67.937 cv
cp
f
206.361 93.6479 mo
206.248 93.6479 206.145 93.5703 206.118 93.4551 cv
205.731 91.8086 205.34 89.3511 205.336 89.3262 cv
205.315 89.1899 205.408 89.062 205.544 89.04 cv
205.679 89.0171 205.809 89.1113 205.831 89.248 cv
205.834 89.2725 206.222 91.7124 206.604 93.3408 cv
206.636 93.4751 206.553 93.6099 206.418 93.6411 cv
206.399 93.646 206.38 93.6479 206.361 93.6479 cv
cp
0 0 0 rgb
f
253.174 281.258 mo
253.149 281.258 253.125 281.254 253.102 281.247 cv
252.969 281.207 252.895 281.067 252.935 280.936 cv
253.143 280.251 258.1 264.152 264.188 261.258 cv
264.315 261.2 264.462 261.252 264.521 261.376 cv
264.581 261.501 264.528 261.649 264.403 261.709 cv
258.513 264.51 253.463 280.915 253.413 281.081 cv
253.38 281.188 253.281 281.258 253.174 281.258 cv
cp
.917647 .305882 .305882 rgb
f
254.483 278.393 mo
254.483 278.393 249.515 294.148 249.802 294.288 cv
250.09 294.429 274.759 298.672 275.196 298.648 cv
275.633 298.625 273.218 281.399 273.218 281.399 cv
254.483 278.393 li
cp
.513726 .454902 .835294 rgb
f
250.79 277.67 mo
250.79 277.67 245.771 293.412 246.075 293.557 cv
246.379 293.701 272.395 298.286 272.854 298.269 cv
273.314 298.25 270.544 280.935 270.544 280.935 cv
250.79 277.67 li
cp
.643137 .611765 .94902 rgb
f
252.812 263.227 mo
252.812 263.227 260.919 277.972 270.322 276.416 cv
279.724 274.86 280.439 263.968 280.439 263.968 cv
271.908 260.712 li
271.908 260.712 263.534 263.227 257.791 256.59 cv
254.082 252.304 252.812 263.227 252.812 263.227 cv
cp
.956863 .517647 .384314 rgb
f
266.419 260.86 mo
278.593 246.874 li
274.436 269.749 li
266.419 260.86 li
cp
.545098 .333333 .556863 rgb
f
314.886 376.131 mo
315.809 378.664 315.051 381.268 313.192 381.945 cv
311.334 382.623 309.078 381.117 308.155 378.584 cv
307.231 376.05 307.989 373.446 309.848 372.77 cv
311.706 372.092 313.962 373.597 314.886 376.131 cv
cp
f
292.166 225.353 mo
292.166 225.353 299.802 222.641 303.045 227.7 cv
306.289 232.759 305.553 254.392 305.553 254.392 cv
292.95 247.466 li
292.358 236.818 li
292.166 225.353 li
cp
0 0 0 rgb
f
309.787 329.639 mo
321.839 330.521 li
318.488 341.993 li
308.719 343.627 li
309.787 329.639 li
cp
.956863 .517647 .384314 rgb
f
274.436 278.256 mo
274.436 278.256 258.847 330.157 271.145 340.36 cv
283.443 350.563 310.665 346.342 310.665 346.342 cv
312.369 325.27 li
297.485 323.636 li
280.9 286.152 li
274.436 278.256 li
cp
.988235 .737255 .286275 rgb
f
300.55 361.119 mo
298.818 373.077 li
287.611 368.926 li
286.673 359.065 li
300.55 361.119 li
cp
.956863 .517647 .384314 rgb
f
300.216 282.185 mo
300.216 282.185 303.049 291.508 302.562 299.008 cv
302.074 306.508 301.277 323.508 301.437 326.508 cv
301.597 329.508 302.618 362.675 302.618 362.675 cv
302.618 362.675 297.167 364.342 291.256 364.342 cv
285.344 364.342 282.042 363.675 282.042 363.675 cv
282.042 363.675 276.271 326.675 276.824 315.675 cv
277.377 304.675 277.547 281.082 277.547 281.082 cv
300.216 282.185 li
cp
.988235 .737255 .286275 rgb
f
283.979 368.336 mo
283.979 368.336 284.792 364.249 286.906 364.054 cv
289.021 363.859 292.05 368.336 292.05 368.336 cv
292.05 368.336 300.31 367.752 300.894 368.336 cv
301.478 368.92 301.478 381.767 300.894 381.962 cv
300.31 382.156 266.052 382.156 264.495 381.962 cv
262.938 381.767 265.166 375.148 268.236 373.981 cv
271.308 372.813 274.614 372.81 274.614 372.81 cv
283.979 368.336 li
cp
.643137 .611765 .94902 rgb
f
314.765 345.512 mo
314.765 345.512 310.792 344.522 310.699 342.438 cv
310.607 340.355 315.142 337.592 315.142 337.592 cv
315.142 337.592 314.954 329.459 315.555 328.914 cv
316.155 328.368 328.761 328.968 328.925 329.55 cv
329.088 330.132 327.488 363.748 327.225 365.267 cv
326.96 366.785 320.57 364.29 319.568 361.223 cv
318.565 358.154 318.716 354.909 318.716 354.909 cv
314.765 345.512 li
cp
f
272.867 283.085 mo
272.867 283.085 272.237 251.305 279.059 246.338 cv
287.982 239.842 296.781 244.933 296.781 244.933 cv
296.725 283.101 li
296.725 283.101 283.896 287.229 272.867 283.085 cv
cp
.545098 .333333 .556863 rgb
f
291.079 237.723 mo
291.387 243.413 li
291.387 243.413 290.449 245.104 287.135 245.556 cv
284.666 245.892 283.812 244.66 283.812 244.66 cv
284.143 239.647 li
290.083 238 li
291.079 237.723 li
cp
.956863 .517647 .384314 rgb
f
290.083 238 mo
290.076 238.156 290.027 238.343 289.947 238.558 cv
288.827 241.47 285.379 242.271 283.954 242.477 cv
284.143 239.647 li
290.083 238 li
cp
0 0 0 rgb
f
282.171 226.745 mo
282.171 226.745 279.571 234.042 280.963 237.942 cv
282.355 241.843 285.936 240.964 288.051 240.044 cv
290.166 239.123 291.08 237.724 291.08 237.724 cv
291.08 237.724 293.153 238.269 294.377 236.291 cv
295.601 234.313 294.615 232.207 293.425 231.792 cv
292.233 231.377 290.916 232.309 290.916 232.309 cv
291.851 230.176 li
291.851 230.176 286.586 220.033 282.171 226.745 cv
cp
.956863 .517647 .384314 rgb
f
286.557 284.338 mo
286.557 284.338 292.176 279.821 293.836 276.421 cv
295.497 273.021 295.038 267.864 295.038 267.864 cv
308.633 267.861 li
308.633 267.861 310.228 274.163 305.458 280.675 cv
301.515 286.057 291.065 288.082 291.065 288.082 cv
286.557 284.338 li
cp
f
295.544 244.35 mo
295.544 244.35 304.811 247.799 307.55 255.636 cv
310.29 263.474 309.403 270.566 309.403 270.566 cv
292.717 271.208 li
294.533 255.475 li
294.763 253.169 295.224 250.893 295.909 248.68 cv
295.544 244.35 li
cp
.545098 .333333 .556863 rgb
f
286.67 230.209 mo
286.59 230.209 286.511 230.17 286.463 230.099 cv
286.259 229.796 286.017 229.617 285.741 229.569 cv
285.262 229.483 284.823 229.805 284.818 229.809 cv
284.705 229.89 284.549 229.865 284.469 229.756 cv
284.388 229.645 284.41 229.489 284.521 229.407 cv
284.546 229.389 285.14 228.956 285.822 229.076 cv
286.238 229.147 286.594 229.397 286.877 229.819 cv
286.954 229.934 286.924 230.09 286.81 230.166 cv
286.767 230.195 286.718 230.209 286.67 230.209 cv
cp
0 0 0 rgb
f
281.396 229.953 mo
281.368 229.953 281.34 229.948 281.312 229.938 cv
281.182 229.891 281.114 229.748 281.161 229.618 cv
281.239 229.404 281.385 229.253 281.584 229.181 cv
282.058 229.004 282.674 229.351 282.742 229.39 cv
282.861 229.459 282.902 229.611 282.834 229.73 cv
282.763 229.852 282.609 229.891 282.493 229.823 cv
282.339 229.735 281.959 229.576 281.755 229.65 cv
281.716 229.665 281.666 229.693 281.632 229.788 cv
281.595 229.89 281.499 229.953 281.396 229.953 cv
cp
f
285.062 231.844 mo
284.997 231.844 284.933 231.818 284.884 231.77 cv
284.787 231.671 284.787 231.514 284.886 231.416 cv
284.941 231.36 285.467 230.865 286.039 230.908 cv
286.318 230.929 286.566 231.073 286.757 231.325 cv
286.84 231.436 286.817 231.593 286.707 231.676 cv
286.598 231.758 286.441 231.736 286.356 231.626 cv
286.254 231.488 286.139 231.417 286.004 231.407 cv
285.693 231.389 285.348 231.663 285.237 231.771 cv
285.188 231.819 285.125 231.844 285.062 231.844 cv
cp
f
282.499 231.863 mo
282.414 231.863 282.331 231.82 282.284 231.742 cv
282.245 231.677 281.901 231.15 281.333 231.442 cv
281.211 231.507 281.059 231.459 280.996 231.336 cv
280.933 231.213 280.98 231.063 281.103 230.999 cv
281.901 230.585 282.506 231.137 282.714 231.485 cv
282.784 231.604 282.746 231.757 282.627 231.828 cv
282.587 231.852 282.543 231.863 282.499 231.863 cv
cp
f
283.049 235.297 mo
282.929 235.297 282.823 235.211 282.803 235.089 cv
282.559 233.66 283.225 231.931 283.254 231.858 cv
283.304 231.73 283.447 231.667 283.577 231.717 cv
283.706 231.767 283.77 231.911 283.719 232.04 cv
283.713 232.057 283.074 233.714 283.295 235.005 cv
283.318 235.141 283.227 235.271 283.091 235.293 cv
283.077 235.296 283.063 235.297 283.049 235.297 cv
cp
f
284.943 237.211 mo
284.837 237.211 284.738 237.143 284.705 237.036 cv
284.664 236.904 284.737 236.764 284.868 236.723 cv
284.881 236.719 286.114 236.319 286.4 235.395 cv
286.441 235.263 286.583 235.193 286.714 235.229 cv
286.846 235.271 286.919 235.411 286.879 235.543 cv
286.514 236.72 285.079 237.181 285.018 237.199 cv
284.993 237.207 284.968 237.211 284.943 237.211 cv
cp
f
291.354 235.345 mo
291.288 235.345 291.222 235.318 291.173 235.268 cv
291.077 235.168 291.081 235.01 291.181 234.914 cv
293.321 232.869 li
293.422 232.776 293.579 232.778 293.675 232.877 cv
293.771 232.977 293.767 233.135 293.667 233.23 cv
291.526 235.275 li
291.478 235.321 291.416 235.345 291.354 235.345 cv
cp
f
293.642 235.163 mo
293.61 235.163 293.579 235.157 293.549 235.146 cv
292.068 234.556 li
291.94 234.504 291.878 234.359 291.929 234.23 cv
291.98 234.103 292.128 234.043 292.254 234.091 cv
293.734 234.681 li
293.862 234.732 293.925 234.877 293.874 235.006 cv
293.835 235.104 293.741 235.163 293.642 235.163 cv
cp
f
290.916 232.309 mo
290.916 232.309 288.411 232.235 286.697 230.301 cv
284.983 228.366 284.1 226.327 284.1 226.327 cv
284.1 226.327 283.061 226.577 282.447 227.462 cv
281.996 228.112 281.478 229.048 281.478 229.048 cv
281.478 229.048 281.218 226.185 282.561 224.676 cv
283.904 223.166 285.177 223.566 285.177 223.566 cv
285.177 223.566 287.965 222.345 291.387 224.972 cv
294.809 227.598 293.914 232.07 293.914 232.07 cv
293.914 232.07 292.236 231.536 290.916 232.309 cv
cp
f
286.299 245.851 mo
283.731 245.851 283.067 244.509 283.037 244.445 cv
282.979 244.32 283.032 244.172 283.157 244.112 cv
283.279 244.058 283.43 244.106 283.489 244.23 cv
283.52 244.292 284.214 245.604 287.109 245.307 cv
290.079 245.001 291.163 243.3 291.174 243.282 cv
291.245 243.165 291.398 243.129 291.518 243.2 cv
291.635 243.272 291.672 243.426 291.601 243.543 cv
291.553 243.622 290.393 245.472 287.16 245.805 cv
286.852 245.836 286.564 245.851 286.299 245.851 cv
cp
1 1 1 rgb
f
290.604 271.207 mo
290.541 271.207 290.479 271.183 290.433 271.139 cv
290.383 271.092 290.354 271.026 290.354 270.957 cv
290.352 264.655 li
290.352 264.518 290.464 264.405 290.602 264.405 cv
290.739 264.405 290.852 264.518 290.852 264.655 cv
290.854 270.692 li
294.196 270.499 li
294.323 270.491 294.453 270.597 294.461 270.734 cv
294.469 270.872 294.363 270.99 294.226 270.999 cv
290.619 271.207 li
290.614 271.207 290.609 271.207 290.604 271.207 cv
cp
f
296.651 294.251 mo
292.686 294.251 290.861 290.546 290.84 290.501 cv
290.78 290.377 290.833 290.228 290.957 290.168 cv
291.084 290.11 291.231 290.162 291.291 290.285 cv
291.387 290.484 293.694 295.133 298.913 293.351 cv
299.05 293.303 299.187 293.376 299.23 293.506 cv
299.275 293.637 299.205 293.779 299.075 293.823 cv
298.192 294.124 297.385 294.251 296.651 294.251 cv
cp
.545098 .333333 .556863 rgb
f
285.177 223.566 mo
285.177 223.566 288.406 223.286 289.702 227.024 cv
290.719 229.959 290.916 232.309 290.916 232.309 cv
293.914 232.07 li
293.914 232.07 294.887 227.532 292.424 224.627 cv
289.96 221.722 285.177 223.566 285.177 223.566 cv
cp
1 1 1 rgb
f
279.203 343.877 mo
279.079 343.877 278.972 343.785 278.955 343.66 cv
278.931 343.479 276.536 325.418 276.536 319.305 cv
276.536 315.892 277.216 299.57 277.29 297.784 cv
272.734 295.357 li
272.612 295.292 272.566 295.141 272.631 295.02 cv
272.696 294.896 272.85 294.854 272.969 294.916 cv
277.664 297.417 li
277.749 297.462 277.801 297.552 277.797 297.648 cv
277.789 297.828 277.036 315.722 277.036 319.305 cv
277.036 325.385 279.427 343.412 279.451 343.594 cv
279.469 343.73 279.373 343.856 279.236 343.875 cv
279.225 343.876 279.214 343.877 279.203 343.877 cv
cp
.545098 .333333 .556863 rgb
f
302.021 343.877 mo
301.886 343.877 301.774 343.77 301.771 343.635 cv
301.179 324.076 li
301.175 323.938 301.283 323.822 301.421 323.818 cv
301.563 323.818 301.675 323.926 301.679 324.061 cv
302.271 343.619 li
302.274 343.758 302.166 343.873 302.028 343.877 cv
302.025 343.877 302.022 343.877 302.021 343.877 cv
cp
f
334.532 368.552 mo
312.044 376.748 li
310.197 377.421 308.155 376.47 307.481 374.623 cv
289.826 326.183 li
289.153 324.336 290.104 322.293 291.951 321.62 cv
314.439 313.424 li
316.285 312.751 318.328 313.702 319.001 315.549 cv
336.657 363.989 li
337.33 365.836 336.379 367.878 334.532 368.552 cv
cp
.313726 .133333 .34902 rgb
f
279.786 294.615 mo
296.957 341.724 li
308.824 337.397 li
291.653 290.289 li
279.786 294.615 li
cp
296.658 342.864 mo
296.586 342.864 296.514 342.849 296.447 342.817 cv
296.327 342.762 296.233 342.66 296.188 342.535 cv
278.676 294.487 li
278.581 294.229 278.715 293.941 278.975 293.847 cv
291.781 289.179 li
291.903 289.132 292.043 289.139 292.163 289.195 cv
292.283 289.251 292.377 289.353 292.422 289.478 cv
309.935 337.525 li
310.029 337.784 309.896 338.071 309.636 338.166 cv
296.829 342.834 li
296.774 342.854 296.716 342.864 296.658 342.864 cv
cp
.643137 .611765 .94902 rgb
f
328.638 370.699 mo
308.935 377.881 li
307.191 378.517 305.262 377.618 304.627 375.875 cv
286.835 327.062 li
286.2 325.318 287.098 323.389 288.842 322.754 cv
308.545 315.572 li
310.289 314.937 312.218 315.835 312.853 317.578 cv
330.645 366.392 li
331.28 368.136 330.382 370.064 328.638 370.699 cv
cp
.364706 .156863 .4 rgb
f
293.391 290.314 mo
277.728 296.241 li
276.644 296.651 275.432 296.104 275.022 295.021 cv
274.612 293.937 275.158 292.726 276.242 292.314 cv
291.905 286.388 li
292.989 285.978 294.2 286.524 294.61 287.608 cv
295.021 288.692 294.475 289.903 293.391 290.314 cv
cp
.545098 .333333 .556863 rgb
f
324.641 368.587 mo
310.635 373.691 li
309.441 374.127 308.122 373.512 307.687 372.318 cv
299.331 349.393 li
298.896 348.199 299.511 346.88 300.703 346.445 cv
314.71 341.34 li
315.903 340.905 317.223 341.52 317.658 342.713 cv
326.014 365.639 li
326.449 366.832 325.834 368.151 324.641 368.587 cv
cp
.313726 .133333 .34902 rgb
f
313.578 337.495 mo
298.741 342.902 li
297.777 343.254 296.712 342.758 296.36 341.794 cv
291.151 327.502 li
290.8 326.538 291.297 325.473 292.261 325.121 cv
307.098 319.713 li
308.062 319.362 309.127 319.858 309.479 320.822 cv
314.688 335.114 li
315.039 336.077 314.542 337.144 313.578 337.495 cv
cp
f
287.325 283.695 mo
287.325 283.695 281.059 288.663 280.592 289.886 cv
280.125 291.109 283.956 297.468 284.726 297.468 cv
285.496 297.468 285.628 295.917 285.628 295.917 cv
285.628 295.917 286.811 297.102 287.729 296.979 cv
288.647 296.856 288.417 295.18 288.417 295.18 cv
288.417 295.18 290.084 295.756 290.591 295.634 cv
291.099 295.512 291.314 290.497 291.314 290.497 cv
291.314 290.497 295.31 291.265 295.539 285.194 cv
295.769 279.124 287.325 283.695 287.325 283.695 cv
cp
.956863 .517647 .384314 rgb
f
285.177 295.387 mo
285.086 295.387 284.999 295.337 284.954 295.251 cv
282.776 291.01 li
282.714 290.887 282.762 290.736 282.885 290.673 cv
283.004 290.61 283.157 290.657 283.222 290.781 cv
285.399 295.022 li
285.462 295.146 285.414 295.296 285.291 295.359 cv
285.255 295.378 285.216 295.387 285.177 295.387 cv
cp
0 0 0 rgb
f
288.544 294.888 mo
288.445 294.888 288.352 294.829 288.313 294.732 cv
286.325 289.851 li
286.273 289.723 286.335 289.576 286.462 289.524 cv
286.591 289.472 286.736 289.533 286.788 289.661 cv
288.775 294.543 li
288.827 294.671 288.766 294.817 288.639 294.869 cv
288.607 294.882 288.575 294.888 288.544 294.888 cv
cp
f
335.664 368.511 mo
336.619 371.033 335.893 373.646 334.043 374.345 cv
332.192 375.045 329.919 373.568 328.965 371.046 cv
328.01 368.523 328.736 365.911 330.586 365.211 cv
332.437 364.511 334.71 365.988 335.664 368.511 cv
cp
.545098 .333333 .556863 rgb
f
252.812 263.227 mo
251.66 260.817 li
251.66 260.817 250.308 260.93 249.336 259.241 cv
248.705 258.142 248.712 256.247 248.712 256.247 cv
248.712 256.247 247.849 258.082 246.83 257.403 cv
245.812 256.724 245.716 250.534 247.088 250.168 cv
247.833 249.97 248.88 250.673 248.88 250.673 cv
248.88 250.673 249.459 248.407 250.829 248.883 cv
252.198 249.359 252.357 250.41 252.357 250.41 cv
252.357 250.41 252.579 248.414 254.652 249.732 cv
256.725 251.05 258.667 260.056 258.667 260.056 cv
252.812 263.227 li
cp
.956863 .517647 .384314 rgb
f
253.477 260.962 mo
253.431 260.962 253.384 260.949 253.343 260.923 cv
251.127 259.516 252.131 256.564 252.313 256.084 cv
252.242 255.525 251.959 252.74 253.296 252.27 cv
253.547 252.18 253.799 252.207 254.023 252.352 cv
254.939 252.937 255.205 255.439 255.232 255.723 cv
255.245 255.86 255.145 255.982 255.008 255.996 cv
254.85 256.008 254.748 255.908 254.734 255.771 cv
254.64 254.794 254.29 253.115 253.754 252.772 cv
253.658 252.712 253.567 252.702 253.462 252.74 cv
252.601 253.044 252.71 255.311 252.817 256.081 cv
252.823 256.126 252.817 256.171 252.8 256.213 cv
252.748 256.334 251.565 259.201 253.61 260.501 cv
253.728 260.575 253.762 260.729 253.688 260.846 cv
253.64 260.921 253.559 260.962 253.477 260.962 cv
cp
0 0 0 rgb
f
268.017 283.386 mo
267.848 283.365 267.751 283.24 267.769 283.104 cv
269.522 269.722 265.645 260.655 265.604 260.565 cv
265.55 260.438 265.607 260.291 265.733 260.235 cv
265.864 260.183 266.008 260.238 266.063 260.364 cv
266.103 260.456 270.036 269.65 268.265 283.168 cv
268.248 283.294 268.141 283.386 268.017 283.386 cv
cp
.917647 .305882 .305882 rgb
f
437.044 50.1245 mo
437.044 50.1245 433.63 51.8125 435.358 52.9707 cv
437.087 54.1294 443.849 52.5239 443.798 50.4438 cv
443.747 48.3643 437.044 50.1245 437.044 50.1245 cv
cp
.956863 .517647 .384314 rgb
f
436.038 46.9761 mo
436.038 46.9761 432.625 48.6636 434.354 49.8218 cv
436.082 50.9805 442.844 49.375 442.792 47.2954 cv
442.741 45.2158 436.038 46.9761 436.038 46.9761 cv
cp
f
437.181 43.8833 mo
436.308 43.9209 435.446 44.1406 434.717 44.5962 cv
434.07 44.9995 433.59 45.5596 434.252 46.188 cv
435.575 47.4453 441.727 47.0122 442.013 45.1914 cv
442.225 43.8403 438.906 43.8096 437.181 43.8833 cv
cp
f
482.407 36.6802 mo
482.407 36.6802 481.948 38.8662 481.364 39.1768 cv
480.781 39.4873 477.028 38.876 477.028 38.876 cv
479.324 33.3213 li
482.407 36.6802 li
cp
0 0 0 rgb
f
470.171 35.1055 mo
470.171 35.1055 464.938 33.4248 464.158 31.2041 cv
463.378 28.9829 473.266 32.3442 473.266 32.3442 cv
470.171 35.1055 li
cp
.513726 .454902 .835294 rgb
f
532.29 145.501 mo
531.836 145.501 531.428 145.311 531.073 144.933 cv
530.718 144.554 530.587 144.119 530.683 143.642 cv
530.95 142.314 533.048 140.918 534.616 140.044 cv
533.02 140.323 530.895 140.517 530.08 139.788 cv
529.795 139.533 529.677 139.181 529.737 138.769 cv
530.11 136.224 536.416 136.639 537.135 136.695 cv
537.272 136.706 537.375 136.826 537.364 136.964 cv
537.354 137.101 537.256 137.211 537.096 137.193 cv
535.275 137.055 530.49 137.074 530.231 138.841 cv
530.195 139.089 530.253 139.272 530.413 139.415 cv
531.343 140.245 535.042 139.506 536.39 139.15 cv
536.515 139.117 536.646 139.187 536.688 139.309 cv
536.732 139.432 536.674 139.567 536.556 139.62 cv
535.163 140.244 531.482 142.201 531.173 143.74 cv
531.109 144.055 531.196 144.333 531.438 144.591 cv
531.743 144.916 532.086 145.045 532.474 144.986 cv
534.384 144.699 537.009 140.115 537.859 138.373 cv
537.919 138.249 538.069 138.197 538.193 138.258 cv
538.317 138.319 538.369 138.469 538.309 138.593 cv
538.179 138.858 535.106 145.096 532.549 145.481 cv
532.461 145.494 532.375 145.501 532.29 145.501 cv
cp
1 1 1 rgb
f
500.723 59.5845 mo
500.723 59.5845 505.339 64.749 508.257 73.4888 cv
511.521 83.2661 508.032 93.9019 508.032 93.9019 cv
498.79 89.8096 li
498.79 89.8096 495.584 74.0869 493.733 71.5562 cv
491.883 69.0259 500.723 59.5845 500.723 59.5845 cv
cp
.956863 .517647 .384314 rgb
f
482.204 162.536 mo
482.204 170.779 li
472.677 173.302 li
467.624 170.106 li
467.624 161.022 li
482.204 162.536 li
cp
f
528.81 117.259 mo
537.043 116.851 li
540.035 126.241 li
537.093 131.447 li
528.021 131.896 li
528.81 117.259 li
cp
f
530.574 111.706 mo
530.574 111.706 516.78 114.21 508.257 107.929 cv
497.049 99.6699 491.715 81.1167 491.715 81.1167 cv
465.449 82.8164 li
465.449 82.8164 458.912 96.0337 455.884 118.503 cv
452.855 140.972 459.334 164.952 459.334 164.952 cv
485.49 164.952 li
485.49 164.952 481.465 144.35 480.67 134.749 cv
479.997 126.621 480.67 119.086 480.67 119.086 cv
480.67 119.086 488.183 131.154 502.313 135.686 cv
516.443 140.217 530.574 135.874 530.574 135.874 cv
530.574 111.706 li
cp
.654902 .435294 .658824 rgb
f
441.683 53.8208 mo
441.683 53.8208 444.535 71.561 452.265 73.5039 cv
465.099 76.73 467.661 62.4404 467.661 62.4404 cv
458.698 59.2373 li
450.185 51.6802 li
441.683 53.8208 li
cp
.956863 .517647 .384314 rgb
f
458.027 57.6577 mo
458.027 57.6577 464.268 50.8379 468.048 49.7393 cv
474.006 48.0073 483.584 45.2578 493.565 51.3135 cv
503.547 57.3696 508.257 68.7808 508.257 68.7808 cv
494.477 77.1743 li
491.322 71.8086 li
491.322 71.8086 491.322 74.1636 491.995 76.855 cv
492.668 79.5469 493.229 81.1167 493.229 81.1167 cv
493.229 81.1167 486.062 84.4814 477.029 84.7056 cv
467.996 84.9297 464.295 83.584 464.295 83.584 cv
463.252 73.0151 li
459.552 74.5117 li
458.027 57.6577 li
cp
.917647 .305882 .305882 rgb
f
471.014 47.4653 mo
471.114 50.4121 li
471.114 50.4121 470.973 50.9976 473.486 50.8462 cv
476.847 50.6445 477.927 49.0195 477.927 49.0195 cv
478.048 43.2661 li
477.028 43.4683 li
470.922 44.6694 li
471.014 47.4653 li
cp
.956863 .517647 .384314 rgb
f
470.922 44.6694 mo
471.014 47.4653 li
472.639 47.2734 475.626 46.5869 476.847 44.0234 cv
476.948 43.8115 477.009 43.6299 477.028 43.4683 cv
470.922 44.6694 li
cp
0 0 0 rgb
f
469.933 31.5347 mo
469.933 31.5347 466.755 38.6782 467.855 42.7104 cv
468.956 46.7432 472.628 46.1343 474.827 45.3711 cv
477.026 44.6074 478.054 43.2686 478.054 43.2686 cv
478.054 43.2686 480.099 43.9775 481.482 42.0806 cv
482.866 40.1841 482.037 37.9897 480.87 37.48 cv
479.703 36.9707 478.306 37.8066 478.306 37.8066 cv
479.41 35.7319 li
479.41 35.7319 474.893 25.1196 469.933 31.5347 cv
cp
.956863 .517647 .384314 rgb
f
470.202 40.6616 mo
470.096 40.6616 469.996 40.5928 469.963 40.4854 cv
469.486 38.9434 470.572 37.377 470.619 37.311 cv
470.699 37.1987 470.854 37.1709 470.967 37.2505 cv
471.08 37.3301 471.107 37.4858 471.027 37.5986 cv
471.018 37.6133 470.037 39.0327 470.441 40.3379 cv
470.481 40.4697 470.408 40.6099 470.276 40.6504 cv
470.251 40.6582 470.227 40.6616 470.202 40.6616 cv
cp
0 0 0 rgb
f
478.61 41.1885 mo
478.549 41.1885 478.487 41.166 478.438 41.1201 cv
478.338 41.0254 478.334 40.8672 478.429 40.7671 cv
480.375 38.7046 li
480.469 38.6045 480.627 38.5991 480.729 38.6943 cv
480.829 38.7891 480.833 38.9473 480.738 39.0474 cv
478.792 41.1099 li
478.743 41.1621 478.677 41.1885 478.61 41.1885 cv
cp
f
480.67 40.6357 mo
480.633 40.6328 479.287 40.4292 479.287 40.4292 cv
479.15 40.4087 479.057 40.2813 479.077 40.1445 cv
479.098 40.0088 479.215 39.9111 479.361 39.9351 cv
480.707 40.1387 li
480.844 40.1592 480.938 40.2866 480.917 40.4233 cv
480.898 40.5469 480.792 40.6357 480.67 40.6357 cv
cp
f
471.801 42.1479 mo
472.074 42.3135 472.468 42.4629 472.848 42.2744 cv
473.204 42.0957 473.448 41.8022 473.605 41.5479 cv
471.801 42.1479 li
cp
472.468 42.8652 mo
471.728 42.8652 471.129 42.2656 471.098 42.2334 cv
471.037 42.1719 471.013 42.0835 471.033 42 cv
471.054 41.916 471.115 41.8486 471.197 41.8213 cv
473.999 40.8901 li
474.089 40.8618 474.185 40.8833 474.252 40.9478 cv
474.318 41.0122 474.344 41.1084 474.318 41.1978 cv
474.306 41.2407 473.998 42.2573 473.071 42.7217 cv
472.865 42.8242 472.662 42.8652 472.468 42.8652 cv
cp
f
473.449 37.9893 mo
473.28 37.9697 473.184 37.8447 473.201 37.7075 cv
473.371 36.3726 li
473.389 36.2363 473.501 36.1353 473.65 36.1563 cv
473.788 36.1738 473.885 36.2988 473.867 36.436 cv
473.697 37.771 li
473.681 37.897 473.573 37.9893 473.449 37.9893 cv
cp
f
469.486 37.6709 mo
469.313 37.6484 469.219 37.521 469.239 37.3848 cv
469.435 36.0532 li
469.453 35.9165 469.582 35.8247 469.718 35.8418 cv
469.854 35.8618 469.949 35.9893 469.929 36.1255 cv
469.733 37.457 li
469.716 37.5815 469.608 37.6709 469.486 37.6709 cv
cp
f
474.692 35.4302 mo
474.602 35.4302 474.515 35.3809 474.47 35.2944 cv
474.155 34.6802 473.301 34.8491 473.263 34.8574 cv
473.129 34.8867 472.995 34.7993 472.967 34.6646 cv
472.938 34.5303 473.023 34.3975 473.158 34.3687 cv
473.209 34.3579 474.421 34.1079 474.915 35.0659 cv
474.978 35.1885 474.93 35.3394 474.807 35.4023 cv
474.771 35.4214 474.731 35.4302 474.692 35.4302 cv
cp
f
470.458 34.6055 mo
470.379 34.6055 470.3 34.5674 470.252 34.4966 cv
470.119 34.3032 469.985 34.2041 469.854 34.2017 cv
469.637 34.2114 469.439 34.418 469.375 34.5034 cv
469.293 34.6152 469.135 34.6377 469.026 34.5566 cv
468.915 34.4751 468.891 34.3193 468.972 34.208 cv
469.01 34.1563 469.355 33.7017 469.849 33.7017 cv
470.164 33.7061 470.435 33.8784 470.664 34.2144 cv
470.742 34.3281 470.713 34.4839 470.6 34.5615 cv
470.556 34.5913 470.507 34.6055 470.458 34.6055 cv
cp
f
446.948 185.196 mo
446.624 185.161 446.398 184.85 446.448 184.515 cv
446.682 182.926 447.54 178.484 450.022 176.55 cv
453.073 174.173 459.554 173.102 461.883 171.511 cv
464.212 169.919 466.772 166.148 468.199 166.818 cv
469.627 167.489 472.36 170.656 476.191 170.107 cv
480.023 169.558 481.775 168.595 482.831 169.493 cv
483.887 170.392 484.772 183.291 484.348 184.069 cv
483.922 184.848 478.493 184.262 478.025 184.397 cv
477.557 184.532 476.156 181.488 475.28 181.97 cv
474.404 182.451 473.355 183.918 472.064 184.61 cv
470.86 185.256 450.834 185.622 446.948 185.196 cv
cp
.988235 .737255 .286275 rgb
f
547.552 153.366 mo
547.494 153.688 547.168 153.89 546.837 153.818 cv
545.27 153.475 540.896 152.313 539.138 149.704 cv
536.977 146.497 536.354 139.958 534.927 137.524 cv
533.5 135.091 529.913 132.277 530.681 130.9 cv
531.447 129.522 534.795 127.013 534.511 123.153 cv
534.228 119.293 533.387 117.479 534.356 116.487 cv
535.325 115.496 548.255 115.5 549.002 115.978 cv
549.75 116.457 548.791 121.831 548.894 122.308 cv
548.997 122.784 545.863 123.972 546.283 124.879 cv
546.703 125.786 548.095 126.933 548.696 128.269 cv
549.258 129.515 548.244 149.519 547.552 153.366 cv
cp
f
480.67 119.336 mo
480.579 119.336 480.491 119.287 480.447 119.2 cv
480.417 119.14 477.392 113.157 475.686 107.77 cv
474.032 102.545 473.152 97.3662 472.991 96.3711 cv
465.396 94.7285 li
465.262 94.6997 465.176 94.5664 465.205 94.4316 cv
465.234 94.2964 465.371 94.2124 465.502 94.2402 cv
473.264 95.9189 li
473.365 95.9404 473.442 96.0229 473.458 96.1255 cv
473.467 96.1821 474.344 101.874 476.162 107.618 cv
477.855 112.966 480.862 118.914 480.893 118.973 cv
480.955 119.096 480.906 119.247 480.783 119.31 cv
480.747 119.328 480.708 119.336 480.67 119.336 cv
cp
.364706 .156863 .4 rgb
f
491.927 89.728 mo
491.467 89.728 490.889 89.6382 490.279 89.3213 cv
488.939 88.6245 487.952 87.1011 487.346 84.7944 cv
487.311 84.6611 487.391 84.5244 487.524 84.4893 cv
487.661 84.4507 487.794 84.5347 487.83 84.6675 cv
488.397 86.8262 489.296 88.2407 490.5 88.873 cv
491.669 89.4863 492.73 89.1143 492.74 89.1094 cv
492.871 89.061 493.014 89.1289 493.061 89.2583 cv
493.107 89.3877 493.042 89.5308 492.913 89.5786 cv
492.885 89.5894 492.498 89.728 491.927 89.728 cv
cp
f
473.263 51.0835 mo
472.394 51.0835 471.429 50.9326 470.374 50.5562 cv
470.244 50.5098 470.176 50.3667 470.223 50.2368 cv
470.27 50.1064 470.416 50.0386 470.542 50.0854 cv
475.555 51.873 478.298 48.3672 478.411 48.2168 cv
478.495 48.1064 478.652 48.0859 478.761 48.1685 cv
478.871 48.252 478.893 48.4082 478.81 48.5186 cv
478.786 48.5503 476.82 51.0835 473.263 51.0835 cv
cp
1 1 1 rgb
f
463.501 73.2544 mo
463.381 73.2544 463.274 73.1675 463.254 73.0454 cv
462.261 67.0396 463.159 60.0093 463.168 59.939 cv
463.186 59.8018 463.31 59.7026 463.448 59.7231 cv
463.585 59.7412 463.682 59.8667 463.664 60.0034 cv
463.655 60.0732 462.767 67.0322 463.748 72.9634 cv
463.771 73.0996 463.678 73.2285 463.542 73.251 cv
463.528 73.2534 463.515 73.2544 463.501 73.2544 cv
cp
f
489.577 66.7627 mo
489.533 66.7627 489.489 66.7686 489.442 66.7803 cv
489.259 66.8257 489.203 66.9229 489.176 67.0024 cv
488.934 67.6997 490.041 69.5991 491.027 70.9902 cv
490.92 69.584 490.606 67.4229 489.888 66.876 cv
489.787 66.7998 489.687 66.7627 489.577 66.7627 cv
cp
491.322 72.0586 mo
491.246 72.0586 491.173 72.0239 491.125 71.9614 cv
490.828 71.5781 488.239 68.1777 488.703 66.8384 cv
488.801 66.5596 489.014 66.3716 489.321 66.2949 cv
489.634 66.2188 489.932 66.2813 490.19 66.478 cv
491.425 67.418 491.561 71.356 491.572 71.8022 cv
491.575 71.9102 491.508 72.0078 491.406 72.0439 cv
491.379 72.0537 491.351 72.0586 491.322 72.0586 cv
cp
f
529.988 179.808 mo
530.021 182.504 528.444 184.71 526.467 184.734 cv
524.488 184.758 522.858 182.592 522.825 179.895 cv
522.792 177.198 524.369 174.993 526.347 174.968 cv
528.325 174.944 529.955 177.111 529.988 179.808 cv
cp
.643137 .611765 .94902 rgb
f
528.364 179.851 mo
500.623 179.851 li
498.526 179.851 496.826 178.152 496.826 176.055 cv
496.826 124.972 li
496.826 122.875 498.526 121.176 500.623 121.176 cv
528.364 121.176 li
530.46 121.176 532.16 122.875 532.16 124.972 cv
532.16 176.055 li
532.16 178.152 530.46 179.851 528.364 179.851 cv
cp
.25098 .113725 .286275 rgb
f
497.883 99.3774 mo
498.404 142.018 li
512.069 141.851 li
511.548 99.2104 li
497.883 99.3774 li
cp
497.91 143.023 mo
497.779 143.023 497.654 142.973 497.561 142.881 cv
497.466 142.789 497.412 142.662 497.41 142.53 cv
496.877 98.8901 li
496.874 98.6138 497.095 98.3872 497.371 98.3838 cv
512.036 98.2046 li
512.184 98.2109 512.297 98.2544 512.392 98.3467 cv
512.486 98.4395 512.54 98.5659 512.542 98.6982 cv
513.075 142.338 li
513.078 142.614 512.857 142.841 512.581 142.844 cv
497.916 143.023 li
497.914 143.023 497.912 143.023 497.91 143.023 cv
cp
1 1 1 rgb
f
525.253 179.851 mo
497.512 179.851 li
495.415 179.851 493.716 178.152 493.716 176.055 cv
493.716 124.972 li
493.716 122.875 495.415 121.176 497.512 121.176 cv
525.253 121.176 li
527.35 121.176 529.049 122.875 529.049 124.972 cv
529.049 176.055 li
529.049 178.152 527.35 179.851 525.253 179.851 cv
cp
.364706 .156863 .4 rgb
f
529.049 140.684 mo
493.716 140.684 li
493.578 140.684 493.466 140.572 493.466 140.434 cv
493.466 140.295 493.578 140.184 493.716 140.184 cv
529.049 140.184 li
529.187 140.184 529.299 140.295 529.299 140.434 cv
529.299 140.572 529.187 140.684 529.049 140.684 cv
cp
.917647 .305882 .305882 rgb
f
513.096 101.062 mo
496.35 101.267 li
495.19 101.281 494.24 100.353 494.226 99.1938 cv
494.212 98.0347 495.14 97.0835 496.299 97.0693 cv
513.044 96.8647 li
514.203 96.8506 515.154 97.7788 515.169 98.9375 cv
515.183 100.097 514.255 101.048 513.096 101.062 cv
cp
.988235 .737255 .286275 rgb
f
504.222 179.808 mo
504.255 182.504 502.678 184.71 500.7 184.734 cv
498.722 184.758 497.092 182.592 497.059 179.895 cv
497.026 177.198 498.603 174.993 500.581 174.968 cv
502.559 174.944 504.189 177.111 504.222 179.808 cv
cp
.643137 .611765 .94902 rgb
f
509.265 90.1885 mo
509.265 90.1885 512.248 92.6694 511.911 97.5479 cv
511.575 102.426 509.837 103.211 508.995 103.323 cv
508.154 103.436 507.818 103.323 507.818 103.323 cv
507.818 103.323 506.921 103.996 505.911 103.884 cv
504.902 103.772 504.51 103.043 504.51 103.043 cv
504.51 103.043 502.715 103.436 502.042 103.211 cv
501.369 102.987 500.641 101.753 500.641 101.417 cv
500.641 101.08 500.641 97.043 500.641 97.043 cv
498.032 97.043 li
497.267 94.5776 498.79 89.8096 498.79 89.8096 cv
498.79 89.8096 507.937 88.543 509.265 90.1885 cv
cp
.956863 .517647 .384314 rgb
f
500.641 98.2461 mo
500.497 98.2432 500.388 98.1284 500.391 97.9907 cv
500.473 94.3247 li
500.476 94.1865 500.615 94.0879 500.729 94.0801 cv
500.866 94.083 500.976 94.1978 500.973 94.3354 cv
500.891 98.0015 li
500.888 98.1377 500.776 98.2461 500.641 98.2461 cv
cp
0 0 0 rgb
f
460.377 174.743 mo
458.641 174.744 453.457 174.592 452.164 172.823 cv
451.831 172.366 451.765 171.841 451.967 171.262 cv
452.139 170.771 452.463 170.454 452.93 170.318 cv
454.238 169.94 456.44 171.154 457.94 172.138 cv
456.954 170.852 455.799 169.058 456.066 167.998 cv
456.16 167.628 456.418 167.359 456.812 167.222 cv
459.229 166.371 461.792 172.155 462.075 172.817 cv
462.13 172.944 462.071 173.091 461.944 173.146 cv
461.819 173.199 461.67 173.142 461.616 173.014 cv
460.896 171.334 458.655 167.104 456.976 167.694 cv
456.739 167.777 456.604 167.913 456.552 168.121 cv
456.246 169.33 458.615 172.266 459.554 173.295 cv
459.642 173.391 459.641 173.539 459.552 173.634 cv
459.463 173.729 459.316 173.741 459.214 173.66 cv
458.017 172.714 454.583 170.366 453.069 170.798 cv
452.762 170.888 452.556 171.093 452.439 171.427 cv
452.292 171.848 452.334 172.208 452.568 172.528 cv
453.707 174.087 458.986 174.293 460.924 174.237 cv
461.051 174.254 461.177 174.343 461.181 174.48 cv
461.185 174.619 461.075 174.733 460.938 174.737 cv
460.893 174.738 460.69 174.743 460.377 174.743 cv
cp
1 1 1 rgb
f
479.973 27.7822 mo
479.973 27.7822 479.766 26.4619 481.026 27.002 cv
482.287 27.542 481.747 28.8628 481.026 28.6826 cv
480.306 28.5024 479.973 27.7822 479.973 27.7822 cv
cp
.643137 .611765 .94902 rgb
f
468.957 32.5313 mo
468.957 32.5313 469.37 31.9736 470.765 31.9766 cv
472.158 31.9795 472.963 32.9683 472.963 32.9683 cv
472.963 32.9683 473.08 35.4946 474.964 36.7578 cv
476.848 38.0215 478.306 37.8066 478.306 37.8066 cv
478.946 37.0229 li
479.973 35.0234 li
476.034 30.7031 li
471.302 28.6826 li
468.957 31.29 li
468.957 32.5313 li
cp
0 0 0 rgb
f
468.776 30.9922 mo
468.776 30.9922 470.751 25.3813 477.749 26.5815 cv
484.748 27.7822 482.407 36.6802 482.407 36.6802 cv
479.217 35.644 li
468.776 30.9922 li
cp
.643137 .611765 .94902 rgb
f
466.741 30.5962 mo
466.741 30.5962 469.191 30.6855 475.504 33.6084 cv
477.68 34.6157 479.578 35.793 479.578 35.793 cv
479.578 35.793 472.312 32.7407 469.487 32.7754 cv
468.402 32.7886 467.7 33.1948 467.7 33.1948 cv
466.741 30.5962 li
cp
.513726 .454902 .835294 rgb
f
439.553 54.7764 mo
444.958 53.6426 li
445.556 53.5171 445.938 52.9316 445.813 52.334 cv
443.097 39.3843 li
442.971 38.7871 442.386 38.4043 441.788 38.5298 cv
436.383 39.6636 li
435.786 39.7886 435.403 40.3745 435.528 40.9717 cv
438.244 53.9214 li
438.37 54.519 438.956 54.9014 439.553 54.7764 cv
cp
0 0 0 rgb
f
440.866 54.5005 mo
446.938 53.2275 li
447.564 53.0957 447.967 52.4805 447.835 51.8535 cv
445.142 39.0117 li
445.01 38.3848 444.395 37.9829 443.768 38.1143 cv
437.696 39.3877 li
437.069 39.5195 436.668 40.1343 436.8 40.7617 cv
439.493 53.6035 li
439.624 54.2305 440.239 54.6323 440.866 54.5005 cv
cp
.364706 .156863 .4 rgb
f
441.216 52.4614 mo
445.799 51.5 li
446.286 51.3979 446.599 50.9194 446.496 50.4316 cv
444.348 40.186 li
444.245 39.6982 443.767 39.3857 443.279 39.4878 cv
438.696 40.4492 li
438.209 40.5513 437.896 41.0298 437.998 41.5176 cv
440.147 51.7637 li
440.25 52.251 440.729 52.5635 441.216 52.4614 cv
cp
1 1 1 rgb
f
443.136 52.918 mo
443.199 53.2183 443.493 53.4102 443.794 53.3477 cv
444.094 53.2847 444.286 52.9902 444.224 52.6899 cv
444.16 52.3896 443.866 52.1973 443.565 52.2603 cv
443.266 52.3232 443.073 52.6177 443.136 52.918 cv
cp
0 0 0 rgb
f
450.182 51.1821 mo
450.182 51.1821 449.867 44.4512 448.057 43.5542 cv
446.246 42.6567 440.521 44.063 441.185 44.9834 cv
441.849 45.9038 444.859 46.6558 444.859 46.6558 cv
444.859 46.6558 443.731 53.3271 446.799 54.2549 cv
449.867 55.1826 450.182 51.1821 450.182 51.1821 cv
cp
.956863 .517647 .384314 rgb
f
446.8 54.5049 mo
446.781 54.5049 446.763 54.5029 446.744 54.4985 cv
444.083 53.8921 444.399 49.0664 444.414 48.8613 cv
444.424 48.7236 444.544 48.6167 444.681 48.6299 cv
444.818 48.6401 444.922 48.7598 444.912 48.8975 cv
444.909 48.9434 444.61 53.4995 446.855 54.0112 cv
446.99 54.042 447.074 54.1758 447.044 54.3105 cv
447.018 54.4263 446.914 54.5049 446.8 54.5049 cv
cp
0 0 0 rgb
f
304.938 177.174 mo
304.971 179.871 303.395 182.077 301.416 182.101 cv
299.438 182.125 297.808 179.958 297.775 177.262 cv
297.742 174.565 299.318 172.359 301.297 172.335 cv
303.274 172.311 304.905 174.478 304.938 177.174 cv
cp
.917647 .305882 .305882 rgb
f
329.119 177.185 mo
329.152 179.882 327.576 182.087 325.598 182.112 cv
323.62 182.136 321.989 179.969 321.956 177.272 cv
321.924 174.576 323.5 172.37 325.479 172.346 cv
327.456 172.322 329.087 174.488 329.119 177.185 cv
cp
f
316.783 79.2358 mo
316.783 79.2358 309.974 81.6001 309.085 82.5703 cv
308.196 83.5405 306.862 92.5605 308.308 93.1616 cv
309.752 93.7627 311.51 91.3936 311.51 91.3936 cv
320.752 84.874 li
320.752 84.874 321.703 78.8193 316.783 79.2358 cv
cp
.976471 .533333 .458824 rgb
f
329.969 177.218 mo
302.228 177.218 li
300.131 177.218 298.432 175.518 298.432 173.422 cv
298.432 122.338 li
298.432 120.242 300.131 118.542 302.228 118.542 cv
329.969 118.542 li
332.065 118.542 333.765 120.242 333.765 122.338 cv
333.765 173.422 li
333.765 175.518 332.065 177.218 329.969 177.218 cv
cp
.372549 .215686 .4 rgb
f
305.409 90.332 mo
306.009 139.384 li
319.675 139.217 li
319.074 90.165 li
305.409 90.332 li
cp
305.515 140.39 mo
305.384 140.39 305.259 140.339 305.165 140.248 cv
305.07 140.155 305.017 140.029 305.015 139.896 cv
304.403 89.8447 li
304.4 89.5684 304.621 89.3418 304.897 89.3384 cv
319.563 89.1592 li
319.842 89.1592 320.065 89.3789 320.068 89.6528 cv
320.681 139.705 li
320.683 139.837 320.631 139.965 320.538 140.06 cv
320.446 140.155 320.319 140.209 320.187 140.211 cv
305.521 140.39 li
305.519 140.39 305.517 140.39 305.515 140.39 cv
cp
1 1 1 rgb
f
326.857 177.218 mo
299.116 177.218 li
297.02 177.218 295.32 175.518 295.32 173.422 cv
295.32 122.338 li
295.32 120.242 297.02 118.542 299.116 118.542 cv
326.857 118.542 li
328.954 118.542 330.653 120.242 330.653 122.338 cv
330.653 173.422 li
330.653 175.518 328.954 177.218 326.857 177.218 cv
cp
.470588 .290196 .486275 rgb
f
330.653 138.05 mo
295.32 138.05 li
295.183 138.05 295.07 137.938 295.07 137.8 cv
295.07 137.662 295.183 137.55 295.32 137.55 cv
330.653 137.55 li
330.791 137.55 330.903 137.662 330.903 137.8 cv
330.903 137.938 330.791 138.05 330.653 138.05 cv
cp
.643137 .611765 .94902 rgb
f
316.783 79.2358 mo
316.783 79.2358 329.002 70 333.889 64.1816 cv
338.775 58.3633 343.237 74.4951 343.237 74.4951 cv
343.237 74.4951 340.782 76.7456 336.04 80.2075 cv
329.939 84.6611 319.009 87.6348 319.009 87.6348 cv
316.783 79.2358 li
cp
.976471 .533333 .458824 rgb
f
329.641 64.7837 mo
329.641 64.7837 337.874 57.1548 341.758 50.6812 cv
345.641 44.2075 339.772 77.2515 339.772 77.2515 cv
329.641 64.7837 li
cp
.988235 .737255 .286275 rgb
f
362.418 33.1519 mo
362.418 33.1519 368.029 34.186 367.575 41.2788 cv
367.254 46.3071 367.748 48.2163 370.622 49.5103 cv
377.974 52.8184 376.95 62.3477 371.641 62.1519 cv
366.331 61.9561 356.87 56.7866 356.87 56.7866 cv
356.292 31.6514 li
362.418 33.1519 li
cp
0 0 0 rgb
f
374.866 61.1733 mo
374.866 61.1733 386.125 70.7104 383.742 84.5991 cv
381.358 98.4883 366.072 93.6475 364.347 90.8081 cv
362.621 87.9688 362.785 75.6963 362.785 75.6963 cv
369.853 60.5151 li
374.866 61.1733 li
cp
.364706 .156863 .4 rgb
f
372.995 91.6382 mo
371.89 91.6382 370.648 91.4658 369.261 91.0474 cv
369.129 91.0078 369.054 90.8682 369.094 90.7358 cv
369.134 90.6045 369.271 90.5283 369.405 90.5688 cv
376.898 92.8286 379.899 87.6206 379.929 87.5674 cv
379.996 87.4473 380.148 87.4043 380.269 87.4702 cv
380.39 87.5376 380.433 87.6895 380.366 87.8105 cv
380.34 87.8569 378.168 91.6382 372.995 91.6382 cv
cp
.643137 .611765 .94902 rgb
f
320.478 92.3667 mo
304.029 92.5679 li
302.788 92.583 301.77 91.5889 301.755 90.3477 cv
301.751 90.0288 li
301.735 88.7876 302.729 87.769 303.971 87.7539 cv
320.419 87.5527 li
321.66 87.5376 322.679 88.5317 322.693 89.7729 cv
322.697 90.0918 li
322.713 91.333 321.719 92.3516 320.478 92.3667 cv
cp
.364706 .156863 .4 rgb
f
350.553 159.07 mo
350.553 159.07 343.604 160.607 343.65 161.679 cv
343.696 162.75 344.202 165.646 343.819 166.503 cv
343.437 167.361 335.979 176.291 336.04 177.331 cv
336.124 178.726 356.292 172.711 356.292 172.711 cv
356.292 157.799 li
350.553 159.07 li
cp
.545098 .537255 .898039 rgb
f
351.026 26.7632 mo
351.026 26.7632 357.247 23.082 360.712 28.1431 cv
364.077 33.0571 360.365 38.3149 360.365 38.3149 cv
352.397 31.5449 li
351.026 26.7632 li
cp
0 0 0 rgb
f
352.409 172.8 mo
364.926 172.513 li
364.584 157.608 li
352.067 157.896 li
352.409 172.8 li
cp
.976471 .533333 .458824 rgb
f
366.158 87.9644 mo
366.158 87.9644 368.538 96.4346 368.676 113.072 cv
368.794 127.436 371.444 159.31 370.364 160.823 cv
369.284 162.335 347.245 161.471 346.381 161.039 cv
345.517 160.606 345.301 150.667 345.301 150.667 cv
345.301 150.667 330.067 128.387 328.663 121.931 cv
327.697 117.492 339.772 81.0962 339.772 81.0962 cv
366.158 87.9644 li
cp
.635294 .27451 .686275 rgb
f
356.932 45.7554 mo
356.932 45.7554 367.109 48.5088 368.914 54.104 cv
370.719 59.6992 368.505 87.502 366.158 87.9644 cv
348.743 91.3936 341.529 84.4019 339.562 81.7368 cv
339.285 81.3628 339.154 66.1655 339.362 64.1519 cv
339.571 62.1382 339.852 54.2612 341.758 50.6812 cv
343.663 47.1006 345.478 46.6929 347.723 46.4653 cv
349.969 46.2373 356.932 45.7554 356.932 45.7554 cv
cp
.988235 .737255 .286275 rgb
f
357.875 41.1904 mo
357.896 46.8628 li
357.896 46.8628 356.878 48.4966 353.561 48.7783 cv
351.089 48.9878 350.219 48.4321 350.219 48.4321 cv
350.553 45.5581 li
350.883 42.7554 li
356.87 41.416 li
357.875 41.1904 li
cp
.976471 .533333 .458824 rgb
f
356.87 41.416 mo
356.856 41.5708 356.799 41.7539 356.708 41.9639 cv
355.448 44.8018 351.98 45.4253 350.553 45.5581 cv
350.883 42.7554 li
356.87 41.416 li
cp
0 0 0 rgb
f
349.572 29.8301 mo
349.572 29.8301 346.621 36.9526 347.809 40.8999 cv
348.996 44.8472 352.6 44.1538 354.748 43.3457 cv
356.897 42.5371 357.876 41.1914 357.876 41.1914 cv
357.876 41.1914 359.909 41.8384 361.226 39.9336 cv
362.541 38.0283 361.668 35.8862 360.505 35.4141 cv
359.342 34.9414 357.985 35.8008 357.985 35.8008 cv
359.021 33.7275 li
359.021 33.7275 354.299 23.3809 349.572 29.8301 cv
cp
.976471 .533333 .458824 rgb
f
349.89 38.3315 mo
350.023 38.3184 350.121 38.1987 350.107 38.0654 cv
349.878 35.8018 350.813 34.8936 350.822 34.8848 cv
350.92 34.7935 350.926 34.6396 350.835 34.542 cv
350.744 34.4443 350.593 34.4375 350.494 34.5269 cv
350.448 34.5688 349.367 35.5869 349.624 38.1143 cv
349.638 38.248 349.757 38.3452 349.89 38.3315 cv
cp
0 0 0 rgb
f
351.742 40.6143 mo
352.292 40.5586 352.989 40.2808 353.412 39.4834 cv
353.475 39.3647 353.43 39.2173 353.311 39.1548 cv
353.191 39.0918 353.045 39.1372 352.982 39.2559 cv
352.418 40.3228 351.323 40.1274 351.277 40.1177 cv
351.147 40.0918 351.019 40.1782 350.992 40.3096 cv
350.967 40.4409 351.052 40.5684 351.183 40.5947 cv
351.328 40.6235 351.523 40.6367 351.742 40.6143 cv
cp
f
358.287 39.0977 mo
358.34 39.0923 358.391 39.0698 358.432 39.0303 cv
360.582 36.9429 li
360.678 36.8491 360.681 36.6953 360.587 36.5991 cv
360.494 36.5029 360.339 36.5005 360.243 36.5942 cv
358.093 38.6816 li
357.997 38.7749 357.994 38.9287 358.088 39.0254 cv
358.142 39.0806 358.216 39.105 358.287 39.0977 cv
cp
f
360.624 38.8608 mo
360.708 38.8521 360.785 38.8008 360.822 38.7183 cv
360.877 38.5962 360.822 38.4521 360.699 38.397 cv
359.267 37.7549 li
359.145 37.7012 359.001 37.7554 358.945 37.8779 cv
358.891 38 358.945 38.144 359.068 38.1992 cv
360.501 38.8408 li
360.541 38.8589 360.583 38.8647 360.624 38.8608 cv
cp
f
357.985 35.8008 mo
357.985 35.8008 354.966 36.5005 352.76 33.1812 cv
350.554 29.8623 350.707 28.4688 350.707 28.4688 cv
348.705 32.0176 li
348.705 32.0176 348.166 29.6118 349.09 28.0425 cv
350.013 26.4727 351.026 26.7632 351.026 26.7632 cv
357.771 28.2446 li
359.687 33.5615 li
357.985 35.8008 li
cp
f
352.897 35.8389 mo
352.999 35.8286 353.087 35.7554 353.11 35.6504 cv
353.382 34.4419 li
353.397 34.3726 353.382 34.3003 353.339 34.2432 cv
352.815 33.542 li
352.735 33.4341 352.584 33.4116 352.476 33.4922 cv
352.368 33.5728 352.346 33.7251 352.426 33.8325 cv
352.883 34.4448 li
352.636 35.5439 li
352.606 35.6753 352.689 35.8052 352.82 35.8345 cv
352.847 35.8403 352.873 35.8418 352.897 35.8389 cv
cp
f
348.793 35.4678 mo
348.895 35.4575 348.981 35.3843 349.006 35.2793 cv
349.276 34.0708 li
349.291 34.0049 349.277 33.9365 349.24 33.8809 cv
348.647 33.0093 li
348.572 32.8989 348.422 32.8691 348.31 32.9453 cv
348.198 33.0205 348.17 33.1714 348.246 33.2827 cv
348.779 34.0674 li
348.531 35.1729 li
348.502 35.3037 348.584 35.4341 348.715 35.4634 cv
348.741 35.4692 348.768 35.4702 348.793 35.4678 cv
cp
f
348.675 32.1733 mo
348.712 32.1729 349.804 32.0742 349.804 32.0742 cv
349.938 32.062 350.036 31.9438 350.023 31.8101 cv
350.012 31.6768 349.894 31.5762 349.76 31.5898 cv
348.669 31.6885 li
348.535 31.7007 348.437 31.8188 348.448 31.9526 cv
348.459 32.0737 348.558 32.166 348.675 32.1733 cv
cp
f
353.282 32.4771 mo
353.354 32.4502 353.41 32.3911 353.432 32.312 cv
353.467 32.1826 353.39 32.0493 353.26 32.0146 cv
351.938 31.6602 li
351.809 31.624 351.675 31.7017 351.64 31.832 cv
351.605 31.9614 351.682 32.0947 351.812 32.1294 cv
353.134 32.4839 li
353.185 32.4976 353.236 32.4941 353.282 32.4771 cv
cp
f
344.864 148.562 mo
344.727 148.562 344.614 148.451 344.614 148.313 cv
344.453 98.2124 li
339.596 93.3379 li
339.498 93.2402 339.498 93.082 339.596 92.9844 cv
339.693 92.8872 339.852 92.8872 339.949 92.9854 cv
344.88 97.9326 li
344.927 97.979 344.953 98.042 344.953 98.1079 cv
345.114 148.311 li
345.114 148.449 345.003 148.562 344.865 148.562 cv
344.864 148.562 li
cp
1 1 1 rgb
f
365.11 102.196 mo
362.859 101.884 361.186 100.987 360.101 99.5283 cv
358.33 97.1475 358.769 94.1528 358.788 94.0269 cv
358.81 93.8906 358.943 93.8003 359.073 93.8179 cv
359.21 93.8389 359.303 93.9663 359.282 94.103 cv
359.277 94.1318 358.858 97.0234 360.504 99.2334 cv
361.507 100.579 363.067 101.409 365.145 101.699 cv
365.281 101.718 365.377 101.844 365.358 101.981 cv
365.341 102.106 365.233 102.196 365.11 102.196 cv
cp
f
353.061 49.2646 mo
352.182 49.2646 351.201 49.0957 350.126 48.6641 cv
349.997 48.6128 349.936 48.4673 349.986 48.3389 cv
350.039 48.2104 350.186 48.1499 350.312 48.2002 cv
354.93 50.0532 357.589 46.8433 357.701 46.7061 cv
357.787 46.5986 357.944 46.5815 358.053 46.6685 cv
358.159 46.7549 358.177 46.9116 358.091 47.0195 cv
358.067 47.0479 356.239 49.2646 353.061 49.2646 cv
cp
.545098 .333333 .556863 rgb
f
351.238 163.148 mo
350.566 163.184 349.943 163.502 349.524 164.029 cv
348.199 165.692 345.243 169.332 344.384 169.789 cv
343.266 170.385 331.53 174.872 329.339 177.198 cv
327.147 179.524 327.162 183.922 327.831 184.308 cv
328.401 184.637 356.977 183.233 365.341 182.814 cv
366.61 182.75 367.599 181.691 367.575 180.42 cv
367.282 164.741 li
367.258 163.41 366.135 162.365 364.806 162.435 cv
351.238 163.148 li
cp
.643137 .611765 .94902 rgb
f
346.375 167.337 mo
346.375 167.337 352.085 173.373 350.857 173.932 cv
349.63 174.49 339.025 173.302 339.252 172.164 cv
339.479 171.025 345.107 167.296 346.375 167.337 cv
cp
1 1 1 rgb
f
359.687 28.9453 mo
359.687 28.9453 366.833 22.8325 369.237 26.7422 cv
371.641 30.6519 364.337 34.6802 360.655 33.4438 cv
356.974 32.2075 359.687 28.9453 359.687 28.9453 cv
cp
0 0 0 rgb
f
361.65 47.439 mo
361.65 47.439 368.538 48.9316 373.552 54.9585 cv
378.186 60.5293 379.304 67.3345 379.304 67.3345 cv
379.304 67.3345 374.137 65.5542 371.214 65.5845 cv
368.291 65.6152 364.429 66.9297 364.429 66.9297 cv
361.65 47.439 li
cp
.988235 .737255 .286275 rgb
f
364.165 48.3125 mo
364.165 48.3125 363.128 56.1758 364.04 61.7729 cv
365.014 67.7524 368.21 75.7813 368.21 75.7813 cv
369.575 81.6519 li
369.575 81.6519 365.744 80.3184 362.906 75.647 cv
361.433 73.2207 358.183 66.0879 358.183 57.1768 cv
358.183 48.2651 358.777 46.3486 358.777 46.3486 cv
358.777 46.3486 363.039 47.1743 364.165 48.3125 cv
cp
.364706 .156863 .4 rgb
f
378.693 67.1338 mo
378.693 67.1338 383.577 80.8188 375.441 82.4624 cv
367.306 84.106 362.539 66.437 362.539 66.437 cv
368.209 63.6426 li
371.214 65.5845 li
371.214 65.5845 376.592 65.9438 378.693 67.1338 cv
cp
.976471 .533333 .458824 rgb
f
368.209 63.6426 mo
368.209 63.6426 367.881 60.3828 367.552 58.8901 cv
367.224 57.3965 365.744 56.2461 365.744 56.2461 cv
365.744 56.2461 364.075 54.4683 363.36 54.4458 cv
362.646 54.4229 362.046 55.5884 362.046 55.5884 cv
362.046 55.5884 359.169 57.0352 358.183 57.9146 cv
357.197 58.7939 356.544 61.0127 356.952 61.999 cv
357.361 62.9849 358.43 64.7568 359.087 64.3228 cv
359.744 63.8892 359.642 62.3823 359.642 62.3823 cv
359.642 62.3823 361.553 67.4131 364.922 67.8701 cv
368.291 68.3271 368.209 63.6426 368.209 63.6426 cv
cp
f
347.526 46.3486 mo
347.526 46.3486 345.2 48.7368 343.05 53.8042 cv
340.899 58.8716 339.235 68.7622 339.235 68.7622 cv
339.235 68.7622 338.029 56.8184 340.554 49.9863 cv
341.808 46.5923 347.526 46.3486 347.526 46.3486 cv
cp
.364706 .156863 .4 rgb
f
366.593 58.6655 mo
366.493 58.6655 366.398 58.6055 366.36 58.5068 cv
365.512 56.3374 li
365.461 56.2085 365.524 56.0635 365.653 56.0132 cv
365.778 55.9629 365.927 56.0259 365.977 56.1548 cv
366.825 58.3242 li
366.876 58.4531 366.813 58.5981 366.684 58.6484 cv
366.654 58.6602 366.623 58.6655 366.593 58.6655 cv
cp
0 0 0 rgb
f
359.642 62.6323 mo
359.569 62.6323 359.499 62.6011 359.45 62.5435 cv
358.433 61.3345 li
358.344 61.2285 358.357 61.0708 358.463 60.9819 cv
358.568 60.8921 358.726 60.9063 358.815 61.0122 cv
359.392 61.6973 li
359.392 61.1733 li
359.392 61.0352 359.504 60.9233 359.642 60.9233 cv
359.779 60.9233 359.892 61.0352 359.892 61.1733 cv
359.892 62.3823 li
359.892 62.4873 359.826 62.5811 359.728 62.6172 cv
359.699 62.6274 359.67 62.6323 359.642 62.6323 cv
cp
f
320.826 86.7349 mo
320.826 86.7349 316.687 91.3892 314.908 92.4351 cv
313.131 93.4805 312.765 92.082 312.987 91.3936 cv
313.21 90.7051 313.708 89.1187 315.741 86.2236 cv
318.308 82.5703 319.974 84.0962 319.974 84.0962 cv
320.826 86.7349 li
cp
.976471 .533333 .458824 rgb
f
314.908 87.6914 mo
314.885 87.6914 314.861 87.688 314.838 87.6812 cv
314.706 87.6426 314.63 87.5039 314.668 87.3716 cv
314.694 87.2822 315.322 85.1812 316.966 84.4585 cv
317.088 84.4043 317.239 84.46 317.295 84.5869 cv
317.351 84.7134 317.293 84.8608 317.167 84.9165 cv
315.739 85.5444 315.154 87.4917 315.148 87.5117 cv
315.116 87.6206 315.017 87.6914 314.908 87.6914 cv
cp
0 0 0 rgb
f
324.963 168.832 mo
300.904 168.832 li
299.539 168.832 298.432 167.724 298.432 166.358 cv
298.432 145.866 li
298.432 144.5 299.539 143.394 300.904 143.394 cv
324.963 143.394 li
326.328 143.394 327.436 144.5 327.436 145.866 cv
327.436 166.358 li
327.436 167.724 326.328 168.832 324.963 168.832 cv
cp
.372549 .215686 .4 rgb
f
338.947 76.4863 mo
338.8 76.481 338.692 76.3647 338.697 76.2266 cv
338.985 68.7524 li
338.991 68.6177 339.102 68.5122 339.235 68.5122 cv
339.383 68.5176 339.49 68.6338 339.485 68.772 cv
339.197 76.2461 li
339.191 76.3809 339.081 76.4863 338.947 76.4863 cv
cp
.545098 .333333 .556863 rgb
f
438.846 377.626 mo
438.881 379.864 437.579 381.699 435.938 381.726 cv
434.296 381.752 432.937 379.959 432.901 377.721 cv
432.866 375.482 434.168 373.647 435.81 373.621 cv
437.45 373.596 438.81 375.389 438.846 377.626 cv
cp
f
429.913 310.811 mo
429.913 310.811 423.1 312.575 422.626 314.146 cv
422.151 315.718 423.207 319.34 424.491 319.811 cv
425.776 320.281 425.776 317.308 425.776 317.308 cv
431.06 313.764 li
432.753 311.635 li
429.913 310.811 li
cp
.988235 .560784 .466667 rgb
f
420.479 377.729 mo
420.487 379.968 419.163 381.787 417.521 381.793 cv
415.88 381.799 414.542 379.989 414.534 377.752 cv
414.525 375.514 415.85 373.694 417.491 373.688 cv
419.133 373.682 420.471 375.491 420.479 377.729 cv
cp
.545098 .333333 .556863 rgb
f
438.141 377.339 mo
417.897 377.413 li
416.371 377.419 415.13 376.187 415.124 374.66 cv
414.988 337.565 li
414.983 336.04 416.216 334.798 417.741 334.792 cv
437.985 334.719 li
439.511 334.713 440.753 335.945 440.758 337.472 cv
440.894 374.566 li
440.899 376.092 439.667 377.334 438.141 377.339 cv
cp
.917647 .635294 .176471 rgb
f
420.096 317.183 mo
420.245 345.738 li
430.557 345.712 li
430.408 317.156 li
420.096 317.183 li
cp
419.748 346.739 mo
419.473 346.739 419.249 346.517 419.248 346.242 cv
419.093 316.687 li
419.092 316.554 419.145 316.426 419.238 316.331 cv
419.331 316.237 419.459 316.184 419.592 316.184 cv
430.904 316.155 li
431.181 316.155 431.404 316.378 431.405 316.652 cv
431.56 346.208 li
431.561 346.341 431.508 346.469 431.414 346.563 cv
431.321 346.657 431.193 346.711 431.061 346.711 cv
419.749 346.739 li
419.748 346.739 li
cp
.643137 .611765 .94902 rgb
f
432.924 377.358 mo
415.161 377.423 li
413.721 377.429 412.548 376.265 412.543 374.823 cv
412.406 337.421 li
412.401 335.98 413.564 334.808 415.006 334.803 cv
432.769 334.737 li
434.21 334.732 435.382 335.896 435.387 337.337 cv
435.523 374.739 li
435.529 376.181 434.365 377.353 432.924 377.358 cv
cp
.988235 .737255 .286275 rgb
f
431.29 318.589 mo
419.415 318.71 li
418.594 318.719 417.915 318.183 417.9 317.513 cv
417.886 316.843 418.54 316.293 419.362 316.284 cv
431.237 316.163 li
432.06 316.154 432.737 316.69 432.752 317.36 cv
432.767 318.03 432.112 318.58 431.29 318.589 cv
cp
.545098 .333333 .556863 rgb
f
430.343 374.932 mo
417.725 374.978 li
416.739 374.98 415.938 374.185 415.934 373.198 cv
415.869 355.704 li
415.866 354.718 416.662 353.916 417.648 353.912 cv
430.266 353.866 li
431.252 353.862 432.054 354.659 432.058 355.645 cv
432.121 373.14 li
432.125 374.125 431.328 374.928 430.343 374.932 cv
cp
.917647 .635294 .176471 rgb
f
430.441 350.96 mo
417.139 351.009 li
416.342 351.012 415.693 350.368 415.69 349.571 cv
415.651 338.708 li
415.648 337.912 416.292 337.264 417.088 337.261 cv
430.392 337.212 li
431.188 337.21 431.836 337.853 431.839 338.649 cv
431.879 349.513 li
431.882 350.309 431.238 350.957 430.441 350.96 cv
cp
f
441.052 301.628 mo
441.052 301.628 438.013 304.648 434.144 307.68 cv
430.719 310.363 428.207 311.961 428.207 311.961 cv
429.948 317.008 li
429.948 317.008 444.021 313.788 446.247 309.449 cv
448.474 305.11 441.052 301.628 441.052 301.628 cv
cp
.988235 .560784 .466667 rgb
f
457.404 274.824 mo
457.404 274.824 462.803 273.112 466.057 275.339 cv
469.311 277.564 473.164 294.472 467.17 297.45 cv
461.176 300.43 457.371 290.892 457.733 281.823 cv
457.942 276.581 457.404 274.824 457.404 274.824 cv
cp
0 0 0 rgb
f
482.669 281.499 mo
482.669 281.499 476.342 281.833 475.935 283.487 cv
475.527 285.143 480.778 284.68 480.778 284.68 cv
478.275 288.924 li
478.275 288.924 475.961 293.845 476.236 294.947 cv
476.512 296.051 478.473 294.644 478.473 294.644 cv
478.473 294.644 476.747 298.134 478.627 297.922 cv
480.507 297.709 481.964 295.367 481.964 295.367 cv
481.964 295.367 480.082 298.746 482.319 298.29 cv
483.53 298.044 489.654 290.949 490.385 285.594 cv
491.116 280.238 486.647 281.668 486.647 281.668 cv
482.669 281.499 li
cp
.956863 .517647 .384314 rgb
f
483.213 293.705 mo
483.128 293.705 483.045 293.662 482.998 293.583 cv
479.934 288.462 li
479.863 288.344 479.901 288.19 480.021 288.119 cv
480.138 288.05 480.292 288.086 480.363 288.206 cv
483.428 293.327 li
483.498 293.445 483.46 293.599 483.341 293.67 cv
483.301 293.693 483.257 293.705 483.213 293.705 cv
cp
0 0 0 rgb
f
484.147 286.862 mo
483.063 286.862 481.87 286.188 480.598 284.853 cv
480.502 284.752 480.506 284.594 480.605 284.499 cv
480.707 284.402 480.865 284.409 480.959 284.507 cv
482.276 285.89 483.461 286.507 484.482 286.335 cv
485.664 286.14 486.242 284.919 486.247 284.907 cv
486.306 284.782 486.452 284.728 486.579 284.785 cv
486.704 284.843 486.76 284.99 486.702 285.116 cv
486.675 285.176 486.013 286.586 484.569 286.827 cv
484.431 286.851 484.29 286.862 484.147 286.862 cv
cp
f
442.252 343.582 mo
443.689 372.241 li
453.568 373.356 li
454.503 340.271 li
442.252 343.582 li
cp
1 1 1 rgb
f
428.569 382.277 mo
429.17 382.517 454.615 382.903 455.194 381.954 cv
455.37 381.668 455.486 380.702 455.554 379.49 cv
455.729 376.633 454.687 372.594 454.687 372.594 cv
454.687 372.594 454.856 371.142 454.811 370.469 cv
454.772 369.804 443.529 370 443.529 370 cv
435.652 376.367 li
435.652 376.367 433.465 376.006 431.085 376.423 cv
429.824 376.64 429.028 378.197 428.643 379.66 cv
428.299 380.957 428.284 382.161 428.569 382.277 cv
cp
.537255 .533333 .886275 rgb
f
428.517 382.202 mo
429.109 382.461 454.53 383.656 455.139 382.727 cv
455.324 382.445 455.47 381.484 455.576 380.274 cv
450.733 380.523 438.822 380.939 428.673 379.589 cv
428.289 380.874 428.235 382.077 428.517 382.202 cv
cp
.988235 .737255 .286275 rgb
f
437.721 375.305 mo
437.592 375.305 437.482 375.206 437.472 375.075 cv
437.46 374.938 437.563 374.817 437.7 374.806 cv
441.768 374.468 li
440.524 372.943 li
440.437 372.836 440.453 372.679 440.56 372.592 cv
440.667 372.504 440.825 372.52 440.911 372.627 cv
442.455 374.52 li
442.514 374.592 442.528 374.69 442.492 374.775 cv
442.455 374.861 442.375 374.919 442.282 374.927 cv
437.741 375.304 li
437.734 375.305 437.728 375.305 437.721 375.305 cv
cp
1 1 1 rgb
f
468.801 342.388 mo
470.246 373.811 li
460.226 374.271 li
456.55 344.737 li
468.801 342.388 li
cp
f
467.666 319.381 mo
467.666 319.381 468.907 329.631 470.277 339.53 cv
471.647 349.429 472.771 366.396 472.771 366.396 cv
455.63 366.723 li
438.411 366.195 li
438.411 366.195 443.583 322.747 444.749 317.632 cv
445.916 312.517 467.666 319.381 467.666 319.381 cv
cp
.364706 .156863 .4 rgb
f
456.16 289.468 mo
456.16 289.468 461.89 288.897 464.63 293.455 cv
466.842 297.134 467.886 319.816 467.886 319.816 cv
461.965 313.117 li
444.436 308.567 li
444.436 308.567 444.765 296.786 447.764 292.603 cv
450.763 288.419 456.16 289.468 456.16 289.468 cv
cp
.654902 .435294 .658824 rgb
f
467.508 314.288 mo
468.708 319.486 li
468.708 319.486 461.907 320.836 454.479 320.142 cv
447.05 319.447 444.272 317.793 444.272 317.793 cv
444.436 308.567 li
462.708 303.732 li
467.508 314.288 li
cp
f
454.185 366.445 mo
454.048 366.445 453.937 366.336 453.935 366.199 cv
453.402 328.168 li
446.601 325.69 li
446.472 325.643 446.404 325.499 446.451 325.369 cv
446.499 325.24 446.643 325.175 446.772 325.22 cv
453.736 327.757 li
453.833 327.793 453.898 327.885 453.9 327.988 cv
454.435 366.191 li
454.437 366.33 454.326 366.443 454.188 366.445 cv
454.187 366.445 454.186 366.445 454.185 366.445 cv
cp
.643137 .611765 .94902 rgb
f
457.352 285.547 mo
457.404 289.914 li
457.404 289.914 456.54 291.199 453.688 291.505 cv
451.563 291.731 450.812 291.327 450.812 291.327 cv
451.081 289.105 li
451.348 286.938 li
456.488 285.748 li
457.352 285.547 li
cp
.988235 .560784 .466667 rgb
f
456.49 285.759 mo
456.48 285.893 456.434 286.051 456.359 286.233 cv
455.324 288.699 452.292 289.1 451.065 289.239 cv
451.356 287.017 li
456.49 285.759 li
cp
0 0 0 rgb
f
450.003 275.908 mo
450.003 275.908 447.585 282.094 448.677 285.473 cv
449.768 288.852 452.859 288.191 454.696 287.458 cv
456.532 286.724 457.352 285.548 457.352 285.548 cv
457.352 285.548 459.115 286.069 460.215 284.406 cv
461.314 282.742 460.525 280.913 459.516 280.526 cv
458.506 280.14 457.353 280.903 457.353 280.903 cv
458.209 279.1 li
458.209 279.1 453.961 270.271 450.003 275.908 cv
cp
.988235 .560784 .466667 rgb
f
450.509 283.107 mo
450.406 283.107 450.311 283.044 450.273 282.942 cv
449.789 281.597 450.771 280.647 450.813 280.607 cv
450.912 280.513 451.07 280.518 451.165 280.617 cv
451.26 280.717 451.256 280.875 451.157 280.97 cv
451.125 281.001 450.372 281.74 450.744 282.772 cv
450.791 282.902 450.724 283.046 450.594 283.093 cv
450.565 283.103 450.537 283.107 450.509 283.107 cv
cp
0 0 0 rgb
f
457.733 283.799 mo
457.676 283.799 457.617 283.779 457.57 283.738 cv
457.466 283.648 457.454 283.49 457.544 283.386 cv
459.114 281.56 li
459.205 281.455 459.363 281.442 459.467 281.533 cv
459.571 281.623 459.583 281.781 459.493 281.886 cv
457.923 283.712 li
457.873 283.77 457.804 283.799 457.733 283.799 cv
cp
f
459.46 283.25 mo
459.434 283.249 458.283 283.128 458.283 283.128 cv
458.146 283.113 458.047 282.99 458.061 282.853 cv
458.075 282.716 458.204 282.612 458.336 282.63 cv
459.486 282.751 li
459.623 282.766 459.723 282.889 459.709 283.026 cv
459.695 283.154 459.587 283.25 459.46 283.25 cv
cp
f
454.185 279.072 mo
454.096 279.072 454.01 279.026 453.962 278.943 cv
453.686 278.463 453 278.633 452.97 278.642 cv
452.829 278.675 452.693 278.595 452.657 278.457 cv
452.621 278.32 452.703 278.181 452.84 278.145 cv
452.884 278.133 453.937 277.865 454.407 278.688 cv
454.478 278.811 454.436 278.968 454.313 279.038 cv
454.272 279.062 454.229 279.072 454.185 279.072 cv
cp
f
449.469 278.581 mo
449.403 278.581 449.338 278.556 449.289 278.505 cv
449.193 278.406 449.195 278.248 449.295 278.151 cv
449.346 278.101 449.796 277.65 450.362 277.704 cv
450.636 277.726 450.88 277.868 451.067 278.117 cv
451.151 278.228 451.129 278.384 451.019 278.467 cv
450.909 278.55 450.752 278.529 450.669 278.418 cv
450.566 278.283 450.454 278.213 450.323 278.202 cv
450.035 278.2 449.732 278.424 449.643 278.511 cv
449.594 278.558 449.531 278.581 449.469 278.581 cv
cp
f
452.141 291.689 mo
451.693 291.689 451.234 291.654 450.769 291.573 cv
450.633 291.55 450.542 291.42 450.565 291.284 cv
450.588 291.149 450.712 291.051 450.854 291.081 cv
454.151 291.655 457.239 289.724 457.27 289.703 cv
457.386 289.629 457.54 289.663 457.615 289.779 cv
457.689 289.896 457.655 290.051 457.539 290.125 cv
457.425 290.198 455.049 291.689 452.141 291.689 cv
cp
1 1 1 rgb
f
451.488 284.929 mo
451.352 284.929 451.24 284.819 451.238 284.683 cv
451.236 284.545 451.346 284.432 451.483 284.429 cv
451.518 284.428 452.333 284.398 452.956 283.605 cv
453.04 283.497 453.197 283.477 453.307 283.563 cv
453.415 283.648 453.435 283.806 453.349 283.914 cv
452.574 284.9 451.536 284.928 451.492 284.929 cv
451.491 284.929 451.489 284.929 451.488 284.929 cv
cp
0 0 0 rgb
f
466.438 326.98 mo
466.405 326.98 463.141 326.938 463.141 323.274 cv
463.141 323.133 463.256 323.018 463.397 323.018 cv
463.539 323.018 463.654 323.133 463.654 323.274 cv
463.654 326.418 466.325 326.466 466.439 326.467 cv
466.581 326.468 466.695 326.583 466.695 326.725 cv
466.694 326.866 466.58 326.98 466.438 326.98 cv
cp
.313726 .470588 .286275 rgb
f
445.008 383.059 mo
445.623 383.259 471.041 382.002 471.558 381.018 cv
471.714 380.721 471.767 379.75 471.756 378.536 cv
471.746 375.673 470.446 371.71 470.446 371.71 cv
470.446 371.71 470.521 370.249 470.433 369.581 cv
470.353 368.92 459.145 369.841 459.145 369.841 cv
451.695 376.704 li
451.695 376.704 449.488 376.483 447.141 377.054 cv
445.896 377.352 445.203 378.957 444.912 380.441 cv
444.653 381.759 444.716 382.961 445.008 383.059 cv
cp
.643137 .611765 .94902 rgb
f
444.951 382.987 mo
445.56 383.207 471.004 382.759 471.552 381.792 cv
471.718 381.5 471.802 380.53 471.829 379.317 cv
467.013 379.878 455.153 381.062 444.938 380.368 cv
444.638 381.677 444.662 382.88 444.951 382.987 cv
cp
.988235 .737255 .286275 rgb
f
453.674 375.511 mo
453.552 375.511 453.445 375.422 453.427 375.298 cv
453.406 375.161 453.501 375.034 453.637 375.014 cv
457.675 374.413 li
456.336 372.973 li
456.241 372.872 456.247 372.714 456.349 372.62 cv
456.45 372.525 456.609 372.531 456.701 372.633 cv
458.364 374.421 li
458.428 374.488 458.448 374.586 458.418 374.674 cv
458.387 374.761 458.311 374.824 458.219 374.838 cv
453.711 375.508 li
453.698 375.51 453.686 375.511 453.674 375.511 cv
cp
1 1 1 rgb
f
525.152 361.23 mo
524.979 367.616 li
513.352 367.616 li
512.396 361.23 li
525.152 361.23 li
cp
.956863 .517647 .384314 rgb
f
493.254 358.21 mo
488.999 366.282 li
477.986 358.695 li
482.176 350.866 li
493.254 358.21 li
cp
f
523.602 282.899 mo
523.602 282.899 524.979 294.563 525.324 299.991 cv
525.669 305.421 530.269 360.233 530.269 361.038 cv
530.269 361.843 507.842 362.526 507.279 362.526 cv
506.717 362.526 504.513 328.839 504.513 328.839 cv
504.513 328.839 495.926 362.258 495.409 362.258 cv
494.892 362.258 476.188 352.02 475.301 351.617 cv
474.413 351.215 491.763 289.767 495.122 273.881 cv
498.481 257.995 517.744 265.313 517.744 265.313 cv
524.635 270.633 li
523.602 282.899 li
cp
.988235 .737255 .286275 rgb
f
508.281 306.561 mo
508.198 306.561 508.114 306.551 508.03 306.529 cv
507.496 306.391 507.174 305.846 507.312 305.311 cv
507.347 305.178 510.87 292.007 522.122 291.692 cv
522.25 291.689 522.378 291.688 522.504 291.688 cv
533.507 291.688 537.049 305.178 537.084 305.315 cv
537.219 305.851 536.896 306.394 536.36 306.529 cv
535.83 306.66 535.282 306.342 535.146 305.807 cv
535.114 305.685 531.942 293.688 522.494 293.688 cv
522.39 293.688 522.285 293.689 522.179 293.692 cv
512.414 293.965 509.279 305.691 509.249 305.811 cv
509.133 306.261 508.727 306.561 508.281 306.561 cv
cp
.545098 .537255 .898039 rgb
f
519.123 283.045 mo
519.123 283.045 513.102 287.214 513.446 292.358 cv
513.791 297.503 515.571 298.331 516.433 298.449 cv
517.294 298.567 517.639 298.449 517.639 298.449 cv
517.639 298.449 518.557 299.159 519.591 299.04 cv
520.624 298.922 521.026 298.153 521.026 298.153 cv
521.026 298.153 522.864 298.567 523.553 298.331 cv
524.242 298.095 524.988 296.793 524.988 296.438 cv
524.988 296.084 524.988 292.831 524.988 292.831 cv
524.988 292.831 525.934 292.963 526.596 292.063 cv
528.196 289.887 526.884 284.198 526.884 284.198 cv
526.884 284.198 520.483 281.31 519.123 283.045 cv
cp
.956863 .517647 .384314 rgb
f
530.576 291.127 mo
530.576 291.127 537.22 281.412 537.708 271.142 cv
538.446 255.629 525.448 245.495 516.519 243.016 cv
507.589 240.537 496.589 242.514 493.254 246.515 cv
489.92 250.515 481.128 277.477 480.778 279.54 cv
480.585 280.685 491.632 288.05 491.632 288.05 cv
494.946 275.243 li
494.946 275.243 499.275 276.161 507.411 276.253 cv
515.546 276.345 521.912 273.865 521.912 273.865 cv
517.72 282.055 li
530.576 291.127 li
cp
.364706 .156863 .4 rgb
f
509.479 380.014 mo
509.479 381.342 509.916 382.864 510.804 383.24 cv
511.686 383.622 518.886 384.428 525.184 383.863 cv
531.203 383.322 532.647 380.53 532.124 379.185 cv
531.879 378.538 531.62 377.915 531.428 377.468 cv
531.249 377.039 531.023 376.634 530.752 376.245 cv
530.096 375.311 528.81 373.395 528.478 372.413 cv
528.04 371.084 527.378 368.233 526.934 366.899 cv
526.489 365.57 525.403 365.303 525.403 365.303 cv
525.403 365.303 513.012 364.431 512.13 365.194 cv
511.241 365.953 510.804 372.225 510.804 373.171 cv
510.804 374.123 li
510.804 375.229 509.883 377.662 509.578 379.208 cv
509.519 379.52 509.479 379.79 509.479 380.014 cv
cp
.654902 .435294 .658824 rgb
f
501.2 238.97 mo
501.2 239.118 li
501.304 241.929 li
501.376 244.132 li
501.376 244.132 501.189 244.643 503.681 244.494 cv
507.02 244.281 508.104 242.812 508.104 242.812 cv
508.28 237.649 li
507.268 237.841 li
501.2 238.97 li
cp
.956863 .517647 .384314 rgb
f
501.2 239.118 mo
501.304 241.929 li
502.926 241.737 505.882 241.034 507.092 238.416 cv
507.185 238.203 507.247 238.012 507.268 237.852 cv
501.21 239.076 li
501.2 239.118 li
cp
0 0 0 rgb
f
500.229 225.666 mo
500.229 225.666 497.079 232.959 498.17 237.076 cv
499.262 241.193 502.901 240.571 505.082 239.792 cv
507.262 239.013 508.28 237.646 508.28 237.646 cv
508.28 237.646 510.308 238.369 511.68 236.433 cv
513.052 234.496 512.229 232.256 511.072 231.736 cv
509.915 231.216 508.53 232.069 508.53 232.069 cv
509.625 229.951 li
509.625 229.951 505.146 219.117 500.229 225.666 cv
cp
.956863 .517647 .384314 rgb
f
500.497 234.979 mo
500.39 234.979 500.29 234.909 500.258 234.801 cv
499.786 233.231 500.86 231.636 500.906 231.568 cv
500.983 231.455 501.14 231.427 501.253 231.504 cv
501.367 231.581 501.396 231.737 501.318 231.851 cv
501.309 231.865 500.335 233.319 500.736 234.656 cv
500.776 234.789 500.701 234.928 500.569 234.968 cv
500.545 234.976 500.521 234.979 500.497 234.979 cv
cp
0 0 0 rgb
f
508.832 235.517 mo
508.771 235.517 508.711 235.495 508.663 235.451 cv
508.562 235.357 508.555 235.199 508.647 235.098 cv
510.577 232.992 li
510.672 232.891 510.83 232.884 510.931 232.977 cv
511.032 233.07 511.039 233.229 510.946 233.33 cv
509.017 235.436 li
508.967 235.489 508.899 235.517 508.832 235.517 cv
cp
f
510.874 234.952 mo
510.836 234.949 509.502 234.741 509.502 234.741 cv
509.365 234.72 509.271 234.592 509.293 234.456 cv
509.314 234.319 509.445 234.228 509.578 234.247 cv
510.912 234.455 li
511.049 234.477 511.143 234.604 511.121 234.74 cv
511.102 234.864 510.995 234.952 510.874 234.952 cv
cp
f
502.072 236.5 mo
502.343 236.672 502.739 236.831 503.115 236.636 cv
503.475 236.451 503.719 236.146 503.874 235.884 cv
502.072 236.5 li
cp
502.742 237.229 mo
502.005 237.229 501.411 236.615 501.38 236.582 cv
501.321 236.521 501.299 236.434 501.318 236.351 cv
501.339 236.268 501.4 236.201 501.48 236.174 cv
504.258 235.224 li
504.345 235.193 504.444 235.214 504.511 235.278 cv
504.578 235.343 504.604 235.438 504.579 235.528 cv
504.567 235.572 504.264 236.607 503.344 237.081 cv
503.139 237.187 502.936 237.229 502.742 237.229 cv
cp
f
504.948 229.638 mo
504.856 229.638 504.769 229.587 504.725 229.499 cv
504.41 228.872 503.567 229.045 503.533 229.053 cv
503.391 229.083 503.266 228.995 503.235 228.862 cv
503.206 228.728 503.291 228.595 503.425 228.564 cv
503.858 228.468 504.781 228.492 505.172 229.276 cv
505.233 229.399 505.184 229.55 505.06 229.611 cv
505.024 229.629 504.986 229.638 504.948 229.638 cv
cp
f
501.112 228.796 mo
501.031 228.796 500.952 228.757 500.904 228.685 cv
500.785 228.505 500.646 228.408 500.482 228.388 cv
500.068 228.337 499.65 228.726 499.646 228.73 cv
499.545 228.824 499.386 228.818 499.293 228.714 cv
499.2 228.612 499.207 228.454 499.31 228.361 cv
499.334 228.339 499.914 227.807 500.544 227.892 cv
500.856 227.93 501.118 228.104 501.32 228.407 cv
501.396 228.522 501.366 228.678 501.251 228.754 cv
501.208 228.782 501.16 228.796 501.112 228.796 cv
cp
f
499.786 231.926 mo
499.614 231.903 499.52 231.777 499.539 231.641 cv
499.733 230.281 li
499.753 230.145 499.876 230.046 500.016 230.069 cv
500.152 230.089 500.247 230.215 500.228 230.352 cv
500.033 231.711 li
500.016 231.836 499.909 231.926 499.786 231.926 cv
cp
f
503.716 232.251 mo
503.548 232.232 503.451 232.107 503.468 231.971 cv
503.636 230.607 li
503.652 230.471 503.78 230.379 503.914 230.39 cv
504.052 230.406 504.148 230.531 504.132 230.668 cv
503.964 232.031 li
503.948 232.158 503.841 232.251 503.716 232.251 cv
cp
f
490.466 364.206 mo
490.466 364.206 478.212 357.084 476.968 357.083 cv
475.723 357.082 462.301 359.09 462.301 359.09 cv
462.301 359.09 457.782 358.125 455.105 359.479 cv
452.43 360.834 451.726 364.044 452.035 364.65 cv
452.345 365.257 481.569 382.354 482.577 382.176 cv
483.584 381.997 488.525 371.161 490.466 364.206 cv
cp
.654902 .435294 .658824 rgb
f
522.15 273.396 mo
521.97 273.368 521.88 273.237 521.904 273.102 cv
521.96 272.798 523.311 265.63 527.82 263.312 cv
527.94 263.249 528.093 263.297 528.157 263.42 cv
528.22 263.543 528.172 263.693 528.049 263.757 cv
523.759 265.961 522.409 273.119 522.396 273.191 cv
522.374 273.312 522.27 273.396 522.15 273.396 cv
cp
.988235 .737255 .286275 rgb
f
524.651 262.393 mo
524.563 262.393 524.509 262.427 524.469 262.462 cv
523.926 262.925 524.005 265.153 524.216 266.867 cv
524.785 265.631 525.53 263.653 525.18 262.783 cv
525.104 262.596 524.985 262.48 524.806 262.421 cv
524.745 262.401 524.694 262.393 524.651 262.393 cv
cp
524.083 267.957 mo
523.937 267.937 523.854 267.854 523.836 267.747 cv
523.757 267.262 523.092 262.979 524.144 262.081 cv
524.301 261.946 524.569 261.815 524.962 261.946 cv
525.283 262.052 525.513 262.271 525.644 262.596 cv
526.241 264.079 524.504 267.444 524.304 267.823 cv
524.261 267.906 524.175 267.957 524.083 267.957 cv
cp
f
502.726 244.8 mo
502.105 244.8 501.464 244.737 500.812 244.589 cv
500.677 244.558 500.593 244.424 500.623 244.289 cv
500.654 244.154 500.791 244.075 500.923 244.101 cv
504.937 245.015 508.702 242.413 508.74 242.387 cv
508.851 242.307 509.008 242.334 509.088 242.447 cv
509.168 242.56 509.141 242.716 509.027 242.795 cv
508.892 242.891 506.137 244.8 502.726 244.8 cv
cp
f
517.639 298.699 mo
517.54 298.699 517.447 298.641 517.407 298.544 cv
517.354 298.413 516.092 295.305 516.092 292.692 cv
516.092 292.555 516.204 292.442 516.342 292.442 cv
516.479 292.442 516.592 292.555 516.592 292.692 cv
516.592 295.205 517.857 298.323 517.87 298.354 cv
517.922 298.482 517.861 298.628 517.733 298.681 cv
517.702 298.693 517.67 298.699 517.639 298.699 cv
cp
0 0 0 rgb
f
521.026 298.403 mo
520.927 298.403 520.833 298.344 520.794 298.246 cv
520.743 298.117 519.538 295.075 519.422 292.705 cv
519.415 292.566 519.521 292.449 519.659 292.442 cv
519.805 292.442 519.915 292.547 519.922 292.68 cv
520.033 294.967 521.246 298.03 521.259 298.061 cv
521.31 298.188 521.247 298.334 521.119 298.386 cv
521.089 298.397 521.058 298.403 521.026 298.403 cv
cp
f
504.233 326.447 mo
504.099 326.447 503.987 326.34 503.983 326.204 cv
503.612 313.307 503.631 293.639 503.634 291.625 cv
495.313 288.128 li
495.185 288.074 495.125 287.928 495.179 287.801 cv
495.231 287.674 495.38 287.611 495.506 287.667 cv
503.98 291.229 li
504.073 291.268 504.134 291.358 504.134 291.46 cv
504.134 291.67 504.095 312.659 504.483 326.19 cv
504.487 326.328 504.379 326.443 504.24 326.447 cv
504.238 326.447 504.235 326.447 504.233 326.447 cv
cp
1 1 1 rgb
f
516.089 373.867 mo
516.017 373.867 515.945 373.836 515.896 373.775 cv
515.808 373.669 515.823 373.512 515.931 373.424 cv
519.216 370.732 523.958 373.288 524.157 373.398 cv
524.278 373.465 524.322 373.616 524.256 373.737 cv
524.19 373.859 524.037 373.903 523.917 373.836 cv
523.87 373.811 519.271 371.332 516.247 373.811 cv
516.201 373.849 516.145 373.867 516.089 373.867 cv
cp
.988235 .737255 .286275 rgb
f
515.697 370.867 mo
515.625 370.867 515.554 370.836 515.504 370.775 cv
515.416 370.669 515.432 370.512 515.539 370.424 cv
518.824 367.732 523.568 370.288 523.767 370.398 cv
523.888 370.465 523.932 370.616 523.865 370.737 cv
523.799 370.859 523.646 370.903 523.526 370.836 cv
523.479 370.811 518.88 368.332 515.855 370.811 cv
515.81 370.849 515.753 370.867 515.697 370.867 cv
cp
f
474.795 360.947 mo
474.753 360.947 474.71 360.937 474.671 360.914 cv
469.907 358.181 li
469.787 358.112 469.746 357.959 469.814 357.84 cv
469.883 357.719 470.036 357.678 470.155 357.747 cv
474.919 360.48 li
475.039 360.549 475.08 360.702 475.012 360.821 cv
474.966 360.902 474.881 360.947 474.795 360.947 cv
cp
f
468.79 361.145 mo
468.74 361.145 468.691 361.13 468.647 361.1 cv
465.676 359.036 li
465.563 358.958 465.534 358.802 465.613 358.688 cv
465.691 358.574 465.848 358.548 465.961 358.626 cv
468.933 360.689 li
469.046 360.768 469.074 360.924 468.995 361.037 cv
468.947 361.107 468.869 361.145 468.79 361.145 cv
cp
f
453.193 281.723 mo
453.035 281.711 452.933 281.59 452.944 281.452 cv
453.062 280.003 li
452.742 279.729 li
452.638 279.64 452.626 279.482 452.716 279.377 cv
452.805 279.272 452.963 279.26 453.068 279.351 cv
453.484 279.707 li
453.545 279.759 453.577 279.837 453.57 279.917 cv
453.442 281.493 li
453.432 281.624 453.322 281.723 453.193 281.723 cv
cp
0 0 0 rgb
f
449.813 281.582 mo
449.65 281.567 449.55 281.444 449.563 281.307 cv
449.706 279.89 li
449.308 279.555 li
449.202 279.466 449.188 279.308 449.277 279.202 cv
449.367 279.098 449.524 279.084 449.63 279.172 cv
450.129 279.592 li
450.192 279.646 450.225 279.726 450.217 279.809 cv
450.062 281.357 li
450.048 281.486 449.939 281.582 449.813 281.582 cv
cp
f
508.361 232.088 mo
508.361 232.088 508.582 233.393 507.079 232.088 cv
505.576 230.783 505.64 228.99 504.956 226.785 cv
504.272 224.58 502.973 223.678 501.338 224.672 cv
500.109 225.418 499.884 226.528 499.884 226.528 cv
499.884 226.528 495.721 221.203 498.256 220.528 cv
500.791 219.853 503.246 221.325 503.246 221.325 cv
503.246 221.325 507.08 219.317 510.735 222.845 cv
514.919 226.882 513.346 229.15 513.346 229.15 cv
513.346 229.15 514.3 230.66 513.907 231.735 cv
513.515 232.811 512.275 233.22 512.275 233.22 cv
512.275 233.22 511.314 231.028 508.361 232.088 cv
cp
f
457.353 280.903 mo
457.353 280.903 453.483 279.831 452.32 278.142 cv
451.156 276.451 451.122 275.424 451.122 275.424 cv
449.469 277.467 li
449.469 277.467 449.857 273.353 452.905 273.146 cv
455.952 272.94 458.264 273.797 459.806 275.51 cv
461.347 277.223 460.185 281.038 460.185 281.038 cv
460.185 281.038 458.885 279.963 457.353 280.903 cv
cp
f
447.764 292.603 mo
447.764 292.603 445.067 295.991 443.581 297.45 cv
440.622 300.354 439.168 301.8 439.168 301.8 cv
444.749 312.815 li
450.169 304.462 li
447.764 292.603 li
cp
.654902 .435294 .658824 rgb
f
455.324 322.602 mo
455.254 322.602 455.185 322.572 455.136 322.516 cv
455.048 322.414 446.438 312.185 449.922 290.404 cv
449.943 290.269 450.074 290.177 450.208 290.196 cv
450.345 290.219 450.438 290.347 450.416 290.482 cv
446.968 312.036 455.428 322.089 455.513 322.188 cv
455.604 322.292 455.593 322.45 455.488 322.54 cv
455.44 322.581 455.383 322.602 455.324 322.602 cv
cp
.988235 .737255 .286275 rgb
f
451.109 326.149 mo
450.818 324.188 452.173 322.363 454.135 322.072 cv
454.525 322.014 454.907 322.038 455.276 322.103 cv
455.263 322.037 455.237 321.977 455.228 321.91 cv
454.937 319.948 456.291 318.123 458.253 317.832 cv
460.214 317.542 462.039 318.896 462.33 320.857 cv
462.342 320.938 462.335 321.017 462.342 321.097 cv
462.708 320.894 463.11 320.742 463.549 320.677 cv
465.511 320.386 467.336 321.74 467.627 323.702 cv
467.872 325.354 466.942 326.897 465.474 327.521 cv
466.128 328.066 466.602 328.835 466.736 329.744 cv
467.027 331.705 465.673 333.531 463.711 333.821 cv
462.411 334.015 461.182 333.475 460.408 332.523 cv
459.943 333.658 458.924 334.531 457.623 334.724 cv
455.662 335.015 453.836 333.66 453.546 331.699 cv
453.408 330.771 453.648 329.878 454.138 329.158 cv
452.614 328.933 451.347 327.753 451.109 326.149 cv
cp
.917647 .635294 .176471 rgb
f
466.438 322.602 mo
466.363 322.602 466.288 322.567 466.239 322.502 cv
466.156 322.392 466.178 322.235 466.288 322.151 cv
466.317 322.13 469.215 319.883 469.175 314.875 cv
469.174 314.736 469.316 314.614 469.425 314.623 cv
469.562 314.623 469.674 314.733 469.675 314.871 cv
469.718 320.145 466.716 322.456 466.589 322.552 cv
466.544 322.585 466.491 322.602 466.438 322.602 cv
cp
.988235 .737255 .286275 rgb
f
472.771 307.047 mo
472.771 307.047 475.918 313.311 472.771 317.632 cv
470.316 321.003 454.016 318.869 454.016 318.869 cv
454.473 313.445 li
472.771 307.047 li
cp
.988235 .560784 .466667 rgb
f
452.196 325.988 mo
451.905 324.027 453.26 322.202 455.221 321.911 cv
455.612 321.854 455.993 321.877 456.363 321.941 cv
456.35 321.876 456.324 321.816 456.314 321.749 cv
456.023 319.788 457.378 317.962 459.339 317.671 cv
461.301 317.381 463.126 318.735 463.417 320.696 cv
463.429 320.777 463.422 320.855 463.428 320.936 cv
463.795 320.732 464.197 320.581 464.636 320.516 cv
466.597 320.225 468.423 321.579 468.714 323.541 cv
468.958 325.192 468.029 326.737 466.56 327.36 cv
467.215 327.905 467.688 328.674 467.823 329.583 cv
468.113 331.544 466.76 333.37 464.798 333.66 cv
463.498 333.854 462.268 333.313 461.495 332.363 cv
461.03 333.497 460.01 334.37 458.71 334.563 cv
456.748 334.854 454.923 333.499 454.632 331.538 cv
454.494 330.609 454.734 329.717 455.225 328.998 cv
453.7 328.772 452.434 327.592 452.196 325.988 cv
cp
.988235 .737255 .286275 rgb
f
457.788 326.247 mo
458.014 327.772 459.434 328.825 460.959 328.6 cv
462.484 328.373 463.537 326.953 463.312 325.428 cv
463.085 323.903 461.665 322.85 460.141 323.076 cv
458.615 323.302 457.562 324.722 457.788 326.247 cv
cp
.917647 .305882 .305882 rgb
f
459.911 289.843 mo
459.911 289.843 466.057 290.382 470.246 297.45 cv
473.813 303.47 474.795 308.65 474.795 308.65 cv
460.557 311.318 li
459.911 289.843 li
cp
.654902 .435294 .658824 rgb
f
455.544 312.705 mo
455.544 312.705 452.885 311.207 452.304 311.324 cv
451.723 311.442 450.482 312.991 450.482 312.991 cv
450.482 312.991 447.424 313.462 447.564 314.202 cv
447.706 314.943 448.646 315.549 448.646 315.549 cv
448.646 315.549 449.523 319.803 450.482 320.503 cv
451.44 321.203 456.395 319.238 456.772 318.403 cv
457.149 317.568 457.253 313.664 457.253 313.664 cv
455.544 312.705 li
cp
.988235 .560784 .466667 rgb
f
450.482 313.241 mo
450.353 313.241 450.242 313.141 450.233 313.01 cv
450.223 312.872 450.326 312.752 450.464 312.742 cv
452.887 312.566 li
453.037 312.542 453.146 312.66 453.154 312.797 cv
453.165 312.935 453.062 313.055 452.924 313.064 cv
450.501 313.24 li
450.494 313.241 450.488 313.241 450.482 313.241 cv
cp
0 0 0 rgb
f
552.444 315.327 mo
552.444 320.987 li
552.444 327.747 547.374 333.228 541.145 333.228 cv
500.374 333.228 li
494.124 333.228 489.074 327.747 489.074 320.987 cv
489.074 315.327 li
489.074 308.567 494.124 303.088 500.374 303.088 cv
541.145 303.088 li
547.374 303.088 552.444 308.567 552.444 315.327 cv
cp
.643137 .611765 .94902 rgb
f
459.304 280.717 mo
459.263 280.717 459.221 280.707 459.183 280.686 cv
459.062 280.618 459.019 280.466 459.085 280.346 cv
460.93 277.027 458.804 274.944 458.713 274.857 cv
458.613 274.762 458.608 274.604 458.703 274.504 cv
458.8 274.403 458.956 274.399 459.057 274.494 cv
459.082 274.518 461.561 276.922 459.522 280.588 cv
459.477 280.671 459.392 280.717 459.304 280.717 cv
cp
1 1 1 rgb
f
461.117 272.999 mo
461.029 272.999 460.945 273.025 460.858 273.078 cv
460.341 273.392 459.973 274.501 459.805 275.183 cv
460.661 274.439 461.488 273.488 461.417 273.137 cv
461.413 273.117 461.402 273.064 461.264 273.022 cv
461.214 273.007 461.165 272.999 461.117 272.999 cv
cp
459.911 276.759 mo
459.788 276.759 459.682 276.669 459.664 276.545 cv
459.644 276.408 459.739 276.281 459.875 276.262 cv
461.143 276.078 463.284 275.539 463.636 274.871 cv
463.695 274.759 463.694 274.653 463.633 274.53 cv
463.561 274.384 463.451 274.297 463.288 274.258 cv
462.428 274.061 460.59 275.235 459.955 275.71 cv
459.855 275.784 459.716 275.773 459.629 275.687 cv
459.575 275.725 459.511 275.745 459.437 275.729 cv
459.301 275.704 459.211 275.573 459.236 275.438 cv
459.279 275.211 459.676 273.211 460.599 272.65 cv
460.852 272.497 461.132 272.46 461.409 272.544 cv
461.76 272.65 461.873 272.871 461.907 273.037 cv
461.974 273.368 461.751 273.798 461.433 274.218 cv
462.113 273.886 462.854 273.644 463.404 273.771 cv
463.71 273.845 463.944 274.03 464.082 274.31 cv
464.213 274.575 464.212 274.85 464.078 275.104 cv
463.493 276.215 460.308 276.704 459.947 276.756 cv
459.935 276.758 459.923 276.759 459.911 276.759 cv
cp
f
462.281 311.061 mo
462.169 311.061 462.066 310.984 462.038 310.87 cv
460.955 306.457 li
460.923 306.323 461.005 306.188 461.139 306.154 cv
461.271 306.121 461.408 306.203 461.441 306.338 cv
462.524 310.751 li
462.557 310.885 462.475 311.021 462.341 311.054 cv
462.321 311.059 462.301 311.061 462.281 311.061 cv
cp
f
444.436 312.445 mo
444.284 312.438 444.179 312.32 444.186 312.183 cv
444.207 311.78 444.716 302.301 445.974 299.702 cv
446.033 299.575 446.186 299.523 446.307 299.586 cv
446.432 299.646 446.483 299.795 446.423 299.919 cv
445.209 302.429 444.69 312.111 444.686 312.208 cv
444.679 312.342 444.567 312.445 444.436 312.445 cv
cp
f
459.293 306.948 mo
459.216 306.955 459.163 307.018 459.118 307.136 cv
459.047 307.324 459.059 307.503 459.154 307.681 cv
459.447 308.229 460.438 308.657 461.172 308.897 cv
460.48 307.875 459.665 306.948 459.293 306.948 cv
cp
461.739 309.567 mo
461.721 309.567 461.702 309.565 461.684 309.562 cv
461.586 309.539 459.295 309.003 458.713 307.917 cv
458.548 307.608 458.527 307.286 458.651 306.958 cv
458.798 306.57 459.046 306.469 459.228 306.452 cv
459.245 306.45 459.264 306.449 459.282 306.449 cv
460.21 306.449 461.556 308.537 461.953 309.188 cv
462.005 309.273 462.001 309.382 461.942 309.464 cv
461.895 309.529 461.818 309.567 461.739 309.567 cv
cp
f
429.096 314.538 mo
429.096 314.538 425.698 317.609 427.198 318.71 cv
428.698 319.811 431.06 315.228 431.06 315.228 cv
429.096 314.538 li
cp
.988235 .560784 .466667 rgb
f
427.631 316.233 mo
427.596 316.233 427.561 316.227 427.527 316.211 cv
427.401 316.153 427.347 316.007 427.403 315.881 cv
427.419 315.846 427.813 314.999 428.97 314.322 cv
429.086 314.251 429.24 314.292 429.312 314.412 cv
429.381 314.531 429.341 314.685 429.222 314.754 cv
428.211 315.346 427.861 316.081 427.858 316.089 cv
427.815 316.18 427.726 316.233 427.631 316.233 cv
cp
0 0 0 rgb
f
552.444 317.008 mo
552.444 320.647 li
503.805 320.647 li
503.805 317.008 li
552.444 317.008 li
cp
.654902 .435294 .658824 rgb
f
506.423 314.969 mo
506.423 320.64 li
506.423 326.682 502.384 331.705 497.061 332.688 cv
492.436 331.165 489.071 326.502 489.071 320.986 cv
489.071 315.328 li
489.071 309.273 493.121 304.25 498.455 303.268 cv
503.07 304.802 506.423 309.466 506.423 314.969 cv
cp
.545098 .537255 .898039 rgb
f
156.841 351.653 mo
156.587 351.653 156.372 351.458 156.353 351.2 cv
156.32 350.779 155.446 340.886 145.168 340.656 cv
134.804 340.399 132.319 348.41 132.218 348.75 cv
132.14 349.01 131.868 349.162 131.607 349.08 cv
131.348 349.003 131.2 348.73 131.276 348.471 cv
131.303 348.382 134.008 339.669 144.738 339.669 cv
144.888 339.669 145.038 339.671 145.19 339.674 cv
156.368 339.925 157.323 351.015 157.332 351.127 cv
157.352 351.396 157.149 351.632 156.879 351.652 cv
156.866 351.653 156.854 351.653 156.841 351.653 cv
cp
.917647 .635294 .176471 rgb
f
129.05 381.002 mo
159.415 381.002 li
160.766 381.002 161.861 379.907 161.861 378.556 cv
161.861 349.821 li
161.861 348.471 160.766 347.375 159.415 347.375 cv
129.05 347.375 li
127.698 347.375 126.603 348.471 126.603 349.821 cv
126.603 378.556 li
126.603 379.907 127.698 381.002 129.05 381.002 cv
cp
.545098 .34902 .556863 rgb
f
135.786 381.002 mo
166.15 381.002 li
167.502 381.002 168.597 379.907 168.597 378.556 cv
168.597 349.821 li
168.597 348.471 167.502 347.375 166.15 347.375 cv
135.786 347.375 li
134.434 347.375 133.339 348.471 133.339 349.821 cv
133.339 378.556 li
133.339 379.907 134.434 381.002 135.786 381.002 cv
cp
.654902 .435294 .658824 rgb
f
127.284 252.966 mo
121.77 255.746 li
124.527 263.794 li
132.789 259.925 li
127.284 252.966 li
cp
.956863 .517647 .384314 rgb
f
127.284 266.634 mo
123.406 252.621 li
123.406 252.621 114.407 253.38 109.334 251.58 cv
104.262 249.78 98.3716 241.169 92.0757 241.169 cv
87.7534 241.169 100.589 270.041 100.589 270.041 cv
100.589 270.041 111.403 275.47 127.284 266.634 cv
cp
.635294 .27451 .686275 rgb
f
137.841 261.408 mo
137.841 261.408 129.544 263.428 126.908 261.445 cv
124.271 259.462 127.776 253.69 127.776 253.69 cv
134.08 252.861 li
137.841 261.408 li
cp
.956863 .517647 .384314 rgb
f
130.276 262.803 mo
138.858 264.578 li
139.313 264.672 139.759 264.38 139.853 263.925 cv
143.848 244.604 li
143.942 244.148 143.65 243.703 143.195 243.609 cv
134.612 241.835 li
134.157 241.74 133.712 242.033 133.618 242.488 cv
129.623 261.81 li
129.528 262.264 129.821 262.709 130.276 262.803 cv
cp
.917647 .635294 .176471 rgb
f
128.845 262.507 mo
137.428 264.282 li
137.883 264.376 138.328 264.084 138.422 263.629 cv
142.417 244.308 li
142.512 243.853 142.219 243.407 141.764 243.313 cv
133.181 241.539 li
132.726 241.444 132.281 241.737 132.187 242.192 cv
128.191 261.514 li
128.098 261.968 128.39 262.413 128.845 262.507 cv
cp
.988235 .737255 .286275 rgb
f
125.189 254.163 mo
125.189 254.163 126.774 250.655 128.236 248.987 cv
129.699 247.32 133.896 247.912 134.294 249.159 cv
134.692 250.405 130.486 251.301 130.486 251.301 cv
130.486 251.301 131.909 257.094 127.875 258.38 cv
123.84 259.666 125.189 254.163 125.189 254.163 cv
cp
.956863 .517647 .384314 rgb
f
125.926 259.364 mo
125.809 259.364 125.706 259.277 125.69 259.157 cv
125.673 259.026 125.765 258.906 125.896 258.89 cv
127.497 258.678 128.681 258.047 129.413 257.016 cv
130.659 255.262 130.192 252.919 130.188 252.896 cv
130.161 252.766 130.244 252.64 130.373 252.613 cv
130.5 252.584 130.629 252.669 130.655 252.798 cv
130.677 252.902 131.167 255.37 129.802 257.292 cv
128.99 258.436 127.696 259.133 125.958 259.362 cv
125.947 259.364 125.937 259.364 125.926 259.364 cv
cp
0 0 0 rgb
f
92.0444 228.692 mo
92.0444 228.692 93.5718 222.84 91.6821 220.461 cv
89.9956 218.339 82.6426 220.097 80.1284 222.018 cv
77.6143 223.938 77.6997 226.201 77.6997 226.201 cv
77.6997 226.201 76.4302 226.644 76.2144 227.781 cv
75.9985 228.919 77.104 230.679 77.104 230.679 cv
77.104 230.679 78.29 228.91 80.251 229.829 cv
82.2119 230.748 92.0444 228.692 92.0444 228.692 cv
cp
f
104.635 360.354 mo
104.635 367.544 li
118.17 367.036 li
118.17 360.354 li
104.635 360.354 li
cp
.956863 .517647 .384314 rgb
f
71.3535 359.544 mo
71.3535 366.734 li
83.8823 366.227 li
83.8823 359.544 li
71.3535 359.544 li
cp
f
86.9927 378.619 mo
86.9927 379.888 86.5659 381.34 85.6929 381.705 cv
84.8203 382.07 77.7549 382.832 71.5732 382.294 cv
65.6553 381.776 64.4268 381.34 63.9907 380.802 cv
63.7773 380.527 64.1934 379.259 64.6709 378.03 cv
64.7012 377.97 64.7217 377.898 64.752 377.838 cv
64.9956 377.219 65.249 376.619 65.4321 376.193 cv
65.6147 375.787 65.8379 375.401 66.1021 375.025 cv
66.7417 374.143 68.0103 372.315 68.335 371.371 cv
68.7612 370.112 69.4111 367.393 69.8477 366.113 cv
70.2842 364.854 71.3501 364.591 71.3501 364.591 cv
71.3501 364.591 83.521 363.758 84.394 364.489 cv
85.2568 365.21 85.6929 371.199 85.6929 372.103 cv
85.6929 373.006 li
85.6929 373.849 86.2715 375.513 86.6475 376.894 cv
86.749 377.238 86.8301 377.563 86.8911 377.857 cv
86.9517 378.152 86.9927 378.406 86.9927 378.619 cv
cp
.988235 .737255 .286275 rgb
f
140.965 381.208 mo
140.153 381.543 105.609 382.486 104.808 381.208 cv
104.564 380.822 104.391 379.513 104.279 377.868 cv
103.995 373.99 103.995 368.225 103.995 368.225 cv
103.995 368.225 103.742 366.255 103.792 365.342 cv
103.833 364.438 120.45 364.783 120.45 364.783 cv
131.138 371.84 li
131.138 371.84 134.214 372.772 137.453 373.3 cv
139.168 373.574 140.275 375.676 140.823 377.655 cv
141.31 379.411 141.351 381.045 140.965 381.208 cv
cp
f
102.196 281.94 mo
102.196 281.94 112.034 295.945 118.125 320.308 cv
124.215 344.67 123.809 362.604 123.809 362.604 cv
100.783 362.604 li
100.783 362.604 100.178 347.715 97.647 335.534 cv
95.1157 323.353 91.6255 310.495 91.6255 310.495 cv
88.9453 362.604 li
65.9634 362.604 li
65.9634 362.604 69.3999 295.45 72.1069 286.731 cv
74.8135 278.012 102.196 281.94 102.196 281.94 cv
cp
.643137 .611765 .94902 rgb
f
77.7949 285.524 mo
77.7949 285.524 97.647 286.275 99.7007 283.1 cv
103.018 277.972 98.4673 255.893 98.4673 255.893 cv
90.1123 241.169 li
82.5303 241.319 li
77.8779 263.019 li
77.7949 285.524 li
cp
1 1 1 rgb
f
82.5044 238.281 mo
82.543 242.639 li
82.543 242.639 84.2056 244.013 86.3086 244.014 cv
89.1479 244.014 90.1123 241.817 90.1123 241.817 cv
90.0049 236.71 li
82.5044 238.281 li
cp
.956863 .517647 .384314 rgb
f
82.5044 238.275 mo
82.5044 238.275 83.4717 242.138 86.6865 241.603 cv
89.2773 241.171 90.0024 237.176 90.0024 237.176 cv
82.5044 238.275 li
cp
0 0 0 rgb
f
90.9883 225.569 mo
90.9883 225.569 92.8257 233.294 90.4536 237.131 cv
88.0815 240.968 84.7432 240.016 83.2192 238.944 cv
81.1636 237.5 80.6646 235.395 80.6646 235.395 cv
80.6646 235.395 77.9526 236.057 76.9448 233.865 cv
75.8862 231.563 77.5083 229.6 78.8716 229.429 cv
80.2354 229.259 80.4053 229.501 80.4053 229.501 cv
79.8965 227.016 li
79.8965 227.016 87.8164 217.414 90.9883 225.569 cv
cp
.956863 .517647 .384314 rgb
f
89.8276 229.276 mo
89.8276 229.276 93.8975 227.328 94.3579 230.524 cv
94.8921 234.229 90.4482 234.453 90.4482 234.453 cv
89.8276 229.276 li
cp
f
79.7476 229.776 mo
79.7476 229.776 81.2188 230.317 84.1753 227.955 cv
87.1313 225.594 86.1323 222.995 86.1323 222.995 cv
86.1323 222.995 90.418 225.429 91.4941 228.655 cv
92.5703 231.883 92.5093 220.917 87.7817 221.334 cv
83.0537 221.751 76.0981 225.142 79.7476 229.776 cv
cp
0 0 0 rgb
f
93.4619 241.319 mo
93.4619 241.319 97.7227 247.675 100.171 256.86 cv
103.554 269.553 105.406 286.269 105.145 286.661 cv
104.693 287.338 99.8525 288.276 99.8525 288.276 cv
99.8525 288.276 97.3364 275.316 94.6299 260.961 cv
91.9229 246.606 90.1123 241.169 90.1123 241.169 cv
93.4619 241.319 li
cp
.635294 .27451 .686275 rgb
f
82.5303 241.319 mo
82.5303 241.319 72.5464 243 69.4819 253.216 cv
65.5513 266.32 76.5371 285.658 76.5371 285.658 cv
79.3066 268.833 li
79.3066 268.833 81.2324 251.909 82.5303 241.319 cv
cp
.372549 .517647 .341176 rgb
f
69.8237 268.563 mo
70.7534 288.276 li
79.0757 289.463 li
82.5303 241.319 li
69.8237 268.563 li
cp
.635294 .27451 .686275 rgb
f
80.1123 233.513 mo
80.0493 233.513 79.9863 233.489 79.9385 233.44 cv
77.9937 231.484 li
77.8979 231.389 77.8984 231.233 77.9946 231.138 cv
78.0903 231.041 78.2456 231.04 78.3413 231.139 cv
80.2861 233.095 li
80.3818 233.19 80.3813 233.346 80.2852 233.441 cv
80.2373 233.489 80.1748 233.513 80.1123 233.513 cv
cp
0 0 0 rgb
f
78.0947 233.028 mo
77.9785 233.028 77.875 232.945 77.8535 232.826 cv
77.8296 232.693 77.9185 232.565 78.0518 232.542 cv
79.3555 232.309 li
79.4888 232.286 79.6167 232.373 79.6406 232.507 cv
79.6646 232.64 79.5757 232.768 79.4424 232.791 cv
78.1387 233.024 li
78.124 233.027 78.1094 233.028 78.0947 233.028 cv
cp
f
84.1226 230.627 mo
83.9941 230.627 83.8862 230.527 83.8774 230.397 cv
83.793 229.092 li
83.7842 228.957 83.8872 228.84 84.0225 228.831 cv
84.1733 228.832 84.2744 228.926 84.2832 229.061 cv
84.3677 230.366 li
84.3765 230.501 84.2734 230.618 84.1382 230.627 cv
84.1328 230.627 84.1274 230.627 84.1226 230.627 cv
cp
f
88.9995 230.499 mo
88.874 230.499 88.7666 230.403 88.7554 230.275 cv
88.6411 228.972 li
88.6294 228.837 88.7295 228.718 88.8643 228.706 cv
88.9941 228.686 89.1187 228.794 89.1304 228.929 cv
89.2446 230.232 li
89.2563 230.367 89.1563 230.486 89.0215 230.498 cv
89.0142 230.499 89.0068 230.499 88.9995 230.499 cv
cp
f
91.9893 232.466 mo
91.9453 232.466 91.9014 232.454 91.8613 232.43 cv
91.7456 232.359 91.709 232.208 91.7798 232.093 cv
93.1401 229.865 li
93.2114 229.749 93.3638 229.715 93.4775 229.784 cv
93.5933 229.854 93.6299 230.006 93.5591 230.121 cv
92.1987 232.349 li
92.1523 232.425 92.0718 232.466 91.9893 232.466 cv
cp
f
93.6895 231.754 mo
93.6753 231.754 92.4526 231.684 92.4526 231.684 cv
92.3174 231.676 92.2139 231.56 92.2217 231.425 cv
92.23 231.29 92.3335 231.199 92.481 231.193 cv
93.7036 231.264 li
93.8389 231.271 93.9424 231.388 93.9346 231.522 cv
93.9268 231.653 93.8188 231.754 93.6895 231.754 cv
cp
f
86.8027 234.419 mo
86.7593 234.419 86.7158 234.408 86.6763 234.384 cv
86.5601 234.314 86.5225 234.164 86.5923 234.048 cv
87.4263 232.658 86.5063 230.899 86.4966 230.882 cv
86.4331 230.763 86.478 230.614 86.5977 230.55 cv
86.7183 230.487 86.8662 230.532 86.9297 230.651 cv
86.9736 230.733 87.9888 232.675 87.0132 234.3 cv
86.9673 234.377 86.8857 234.419 86.8027 234.419 cv
cp
f
85.3926 236.177 mo
84.896 236.177 84.1606 235.936 83.7837 234.992 cv
83.7334 234.866 83.7949 234.724 83.9209 234.674 cv
84.0449 234.619 84.189 234.684 84.2397 234.811 cv
84.6533 235.848 85.5225 235.677 85.5586 235.671 cv
85.6875 235.64 85.8208 235.728 85.8496 235.86 cv
85.8774 235.993 85.7925 236.123 85.6602 236.151 cv
85.584 236.167 85.4932 236.177 85.3926 236.177 cv
cp
f
89.5771 227.854 mo
89.5439 227.854 89.5098 227.847 89.4775 227.833 cv
88.3184 227.318 li
88.1943 227.263 88.1387 227.118 88.1938 226.994 cv
88.2485 226.87 88.3936 226.816 88.5176 226.869 cv
89.6768 227.384 li
89.8008 227.439 89.8564 227.584 89.8013 227.708 cv
89.7607 227.8 89.6709 227.854 89.5771 227.854 cv
cp
f
83.5029 228.204 mo
83.4116 228.204 83.3242 228.153 83.2817 228.065 cv
83.2231 227.943 83.2744 227.797 83.3965 227.738 cv
85.0127 226.959 li
85.1343 226.9 85.2817 226.951 85.3403 227.073 cv
85.3989 227.195 85.3477 227.342 85.2256 227.4 cv
83.6094 228.18 li
83.5752 228.196 83.5391 228.204 83.5029 228.204 cv
cp
f
72.606 370.013 mo
72.4854 370.013 72.3799 369.924 72.3633 369.801 cv
72.3447 369.666 72.439 369.543 72.5732 369.524 cv
76.8281 368.943 80.9365 369.518 80.9766 369.524 cv
81.1108 369.544 81.2041 369.668 81.1851 369.803 cv
81.166 369.937 81.042 370.031 80.9072 370.011 cv
80.8667 370.005 76.8262 369.439 72.6396 370.011 cv
72.6284 370.013 72.6172 370.013 72.606 370.013 cv
cp
1 1 1 rgb
f
72.606 373.047 mo
72.4854 373.047 72.3799 372.958 72.3633 372.835 cv
72.3447 372.701 72.439 372.577 72.5732 372.559 cv
76.8281 371.976 80.9365 372.553 80.9766 372.559 cv
81.1108 372.578 81.2041 372.702 81.1851 372.837 cv
81.166 372.971 81.042 373.068 80.9072 373.045 cv
80.8667 373.039 76.8262 372.474 72.6396 373.045 cv
72.6284 373.047 72.6172 373.047 72.606 373.047 cv
cp
f
86.2339 244.428 mo
85.002 244.428 83.7124 243.893 82.3892 242.83 cv
82.2837 242.745 82.2666 242.591 82.3516 242.485 cv
82.4375 242.38 82.5913 242.364 82.6968 242.447 cv
84.1812 243.64 85.5996 244.12 86.9146 243.874 cv
88.8271 243.517 89.8892 241.713 89.8994 241.694 cv
89.9683 241.578 90.1172 241.539 90.2349 241.604 cv
90.3521 241.673 90.3926 241.822 90.3252 241.939 cv
90.2778 242.021 89.1455 243.953 87.0098 244.355 cv
86.7539 244.404 86.4951 244.428 86.2339 244.428 cv
cp
.654902 .435294 .658824 rgb
f
91.6255 310.74 mo
91.4897 310.74 91.3799 310.631 91.3799 310.495 cv
91.3799 297.713 li
91.3799 297.612 91.4419 297.521 91.5356 297.484 cv
97.5439 295.125 li
97.6714 295.075 97.813 295.138 97.8623 295.264 cv
97.9116 295.39 97.8496 295.532 97.7236 295.582 cv
91.8711 297.88 li
91.8711 310.495 li
91.8711 310.631 91.7612 310.74 91.6255 310.74 cv
cp
.988235 .737255 .286275 rgb
f
122.288 368.919 mo
122.154 368.919 122.044 368.812 122.042 368.678 cv
122.041 368.542 122.149 368.431 122.285 368.429 cv
125.896 368.375 li
126.003 368.377 126.143 368.481 126.145 368.616 cv
126.147 368.752 126.039 368.863 125.903 368.865 cv
122.292 368.919 li
122.291 368.919 122.289 368.919 122.288 368.919 cv
cp
1 1 1 rgb
f
124.797 370.901 mo
124.664 370.901 124.554 370.794 124.552 370.66 cv
124.55 370.524 124.658 370.413 124.794 370.411 cv
128.405 370.357 li
128.542 370.357 128.652 370.465 128.654 370.599 cv
128.656 370.734 128.548 370.846 128.412 370.848 cv
124.801 370.901 li
124.8 370.901 124.798 370.901 124.797 370.901 cv
cp
f
63.104 333.071 mo
76.52 333.234 li
77.0317 291.372 li
63.6152 291.209 li
63.104 333.071 li
cp
77.0049 334.223 mo
76.999 334.223 62.6011 334.047 62.6011 334.047 cv
62.4707 334.045 62.3467 333.991 62.2559 333.898 cv
62.1646 333.806 62.1143 333.68 62.1162 333.55 cv
62.6396 290.706 li
62.6426 290.435 62.8408 290.179 63.1362 290.221 cv
77.5347 290.396 li
77.665 290.398 77.7891 290.452 77.8804 290.545 cv
77.9712 290.638 78.0215 290.764 78.0195 290.894 cv
77.4956 333.737 li
77.4927 334.007 77.2734 334.223 77.0049 334.223 cv
cp
.654902 .435294 .658824 rgb
f
68.459 306.268 mo
68.3579 306.268 68.2632 306.205 68.2275 306.104 cv
68.2007 306.028 65.4849 298.519 59.623 298.519 cv
58.1509 298.519 56.9946 298.991 56.186 299.922 cv
54.3286 302.061 54.8525 305.949 54.8584 305.988 cv
54.877 306.122 54.7837 306.246 54.6494 306.266 cv
54.52 306.275 54.3911 306.191 54.3721 306.057 cv
54.3481 305.889 53.8101 301.91 55.814 299.602 cv
56.7202 298.558 58.002 298.028 59.623 298.028 cv
65.834 298.028 68.6626 305.862 68.6904 305.941 cv
68.7354 306.068 68.6685 306.209 68.5405 306.254 cv
68.5137 306.264 68.4858 306.268 68.459 306.268 cv
cp
.917647 .635294 .176471 rgb
f
47.1064 383.142 mo
74.3418 383.142 li
76.3999 383.142 78.0684 381.473 78.0684 379.415 cv
78.0684 329.264 li
78.0684 327.205 76.3999 325.536 74.3418 325.536 cv
47.1064 325.536 li
45.0483 325.536 43.3799 327.205 43.3799 329.264 cv
43.3799 379.415 li
43.3799 381.473 45.0483 383.142 47.1064 383.142 cv
cp
.25098 .113725 .286275 rgb
f
50.1611 383.142 mo
77.396 383.142 li
79.4541 383.142 81.123 381.473 81.123 379.415 cv
81.123 329.264 li
81.123 327.205 79.4541 325.536 77.396 325.536 cv
50.1611 325.536 li
48.1025 325.536 46.4341 327.205 46.4341 329.264 cv
46.4341 379.415 li
46.4341 381.473 48.1025 383.142 50.1611 383.142 cv
cp
.364706 .156863 .4 rgb
f
81.123 344.688 mo
46.4341 344.688 li
46.2983 344.688 46.1885 344.579 46.1885 344.443 cv
46.1885 344.308 46.2983 344.198 46.4341 344.198 cv
81.123 344.198 li
81.2588 344.198 81.3687 344.308 81.3687 344.443 cv
81.3687 344.579 81.2588 344.688 81.123 344.688 cv
cp
.654902 .435294 .658824 rgb
f
62.0962 294.008 mo
78.5366 294.209 li
79.6743 294.224 80.6079 293.312 80.6221 292.174 cv
80.6357 291.036 79.7246 290.103 78.5869 290.089 cv
62.1465 289.888 li
61.0088 289.874 60.0752 290.785 60.061 291.923 cv
60.0474 293.061 60.9585 293.994 62.0962 294.008 cv
cp
.364706 .156863 .4 rgb
f
47.0889 381.68 mo
47.0566 384.327 48.6045 386.492 50.5469 386.517 cv
52.4888 386.54 54.0889 384.413 54.1216 381.766 cv
54.1538 379.118 52.606 376.952 50.6641 376.929 cv
48.7217 376.904 47.1216 379.032 47.0889 381.68 cv
cp
.643137 .611765 .94902 rgb
f
71.0356 381.68 mo
71.0034 384.327 72.5513 386.492 74.4932 386.517 cv
76.4351 386.54 78.0356 384.413 78.0679 381.766 cv
78.1006 379.118 76.5522 376.952 74.6104 376.929 cv
72.6685 376.904 71.0679 379.032 71.0356 381.68 cv
cp
f
47.416 325.886 mo
74.4688 325.886 li
70.5415 306.032 li
51.3428 306.032 li
47.416 325.886 li
cp
.827451 .235294 .235294 rgb
f
50.6885 325.876 mo
77.7412 325.876 li
73.814 306.022 li
54.6152 306.022 li
50.6885 325.876 li
cp
.917647 .305882 .305882 rgb
f
70.9951 307.519 mo
70.8984 307.519 70.8066 307.461 70.7681 307.366 cv
70.7378 307.291 67.6514 299.906 61.5205 300.44 cv
59.4561 300.626 57.9336 301.309 56.9951 302.47 cv
55.7734 303.981 55.9785 305.794 55.981 305.812 cv
55.9976 305.946 55.9019 306.069 55.7671 306.085 cv
55.6294 306.106 55.5103 306.006 55.4937 305.871 cv
55.4834 305.789 55.2622 303.833 56.6133 302.161 cv
57.6387 300.893 59.2749 300.149 61.4766 299.952 cv
67.9727 299.361 71.1909 307.103 71.2227 307.181 cv
71.2734 307.307 71.2134 307.449 71.0879 307.501 cv
71.0576 307.513 71.0259 307.519 70.9951 307.519 cv
cp
.988235 .737255 .286275 rgb
f
69.0972 282.455 mo
69.0972 282.455 77.0078 286.904 77.7495 288.191 cv
78.4912 289.479 75.3335 297.291 74.4707 297.429 cv
73.6079 297.566 73.1821 295.851 73.1821 295.851 cv
73.1821 295.851 72.0674 297.39 71.0166 297.417 cv
69.9653 297.443 69.9238 295.523 69.9238 295.523 cv
69.9238 295.523 68.1592 296.467 67.5684 296.42 cv
66.9775 296.374 65.8403 290.792 65.8403 290.792 cv
65.8403 290.792 61.4995 292.365 60.1582 285.603 cv
58.8169 278.839 69.0972 282.455 69.0972 282.455 cv
cp
.956863 .517647 .384314 rgb
f
73.5483 295.141 mo
73.5229 295.141 73.4976 295.137 73.4722 295.129 cv
73.3433 295.087 73.2729 294.948 73.3149 294.819 cv
74.999 289.677 li
75.041 289.548 75.1782 289.478 75.3086 289.52 cv
75.4375 289.562 75.5078 289.7 75.4658 289.829 cv
73.7817 294.972 li
73.7476 295.075 73.6519 295.141 73.5483 295.141 cv
cp
0 0 0 rgb
f
69.6855 295.184 mo
69.6675 295.184 69.6484 295.182 69.6299 295.178 cv
69.498 295.146 69.416 295.015 69.4463 294.883 cv
70.8018 289.056 li
70.8325 288.925 70.9658 288.844 71.0967 288.872 cv
71.2285 288.903 71.3105 289.035 71.2803 289.167 cv
69.9248 294.994 li
69.8984 295.107 69.7974 295.184 69.6855 295.184 cv
cp
f
82.5303 241.319 mo
82.5303 241.319 65.9634 242.417 57.5737 261.288 cv
52.9028 271.795 56.9194 286.269 56.9194 286.269 cv
71.3535 283.814 li
71.3535 283.814 71.4316 270.884 73.4546 268.27 cv
75.478 265.656 82.5303 241.319 82.5303 241.319 cv
cp
.635294 .27451 .686275 rgb
f
73.5479 279.745 mo
73.4209 279.745 73.3135 279.647 73.3037 279.519 cv
73.2964 279.421 72.5405 269.745 69.6816 265.529 cv
69.6055 265.417 69.6348 265.265 69.7471 265.188 cv
69.8589 265.114 70.0122 265.142 70.0879 265.254 cv
73.0205 269.578 73.7627 279.079 73.793 279.481 cv
73.8032 279.617 73.7017 279.734 73.5669 279.745 cv
73.5605 279.745 73.5542 279.745 73.5479 279.745 cv
cp
1 1 1 rgb
f
139.231 247.978 mo
139.214 247.978 139.198 247.977 139.181 247.973 cv
133.707 246.827 li
133.574 246.8 133.489 246.669 133.517 246.537 cv
133.544 246.404 133.676 246.317 133.807 246.347 cv
139.281 247.492 li
139.414 247.52 139.499 247.65 139.471 247.782 cv
139.447 247.898 139.345 247.978 139.231 247.978 cv
cp
f
138.006 253.721 mo
137.989 253.721 137.973 253.72 137.956 253.716 cv
132.481 252.57 li
132.349 252.543 132.264 252.412 132.292 252.28 cv
132.32 252.146 132.451 252.06 132.582 252.09 cv
138.056 253.235 li
138.189 253.263 138.274 253.394 138.246 253.525 cv
138.222 253.642 138.12 253.721 138.006 253.721 cv
cp
f
137.222 257.694 mo
137.205 257.694 137.188 257.693 137.171 257.689 cv
131.697 256.544 li
131.564 256.517 131.479 256.386 131.507 256.254 cv
131.535 256.12 131.665 256.034 131.797 256.063 cv
137.272 257.209 li
137.405 257.236 137.49 257.367 137.462 257.499 cv
137.438 257.615 137.335 257.694 137.222 257.694 cv
cp
f
103.27 270.604 mo
103.147 270.604 103.042 270.514 103.026 270.389 cv
102.188 263.414 li
102.172 263.279 102.268 263.157 102.403 263.141 cv
102.535 263.129 102.66 263.221 102.676 263.355 cv
103.514 270.33 li
103.53 270.465 103.434 270.587 103.299 270.604 cv
103.29 270.604 103.279 270.604 103.27 270.604 cv
cp
f
108.501 253.108 mo
107.726 254.074 106.677 255.633 106.822 256.591 cv
106.865 256.875 107.012 257.087 107.271 257.236 cv
107.307 257.257 107.32 257.252 107.341 257.243 cv
107.803 257.008 108.257 254.896 108.501 253.108 cv
cp
107.313 257.742 mo
107.215 257.742 107.118 257.715 107.025 257.662 cv
106.634 257.436 106.402 257.1 106.336 256.664 cv
106.082 254.978 108.558 252.277 108.663 252.163 cv
108.735 252.087 108.848 252.063 108.945 252.106 cv
109.041 252.15 109.099 252.251 109.087 252.356 cv
109.002 253.159 108.526 257.191 107.563 257.681 cv
107.482 257.722 107.397 257.742 107.313 257.742 cv
cp
f
72.5386 264.963 mo
72.4858 264.963 72.4443 264.983 72.4014 265.028 cv
71.8789 265.57 72.0605 268.268 72.3604 270.42 cv
72.7871 268.602 73.2773 265.873 72.7769 265.11 cv
72.7021 264.997 72.6284 264.974 72.5728 264.966 cv
72.561 264.964 72.5498 264.963 72.5386 264.963 cv
cp
72.3037 271.887 mo
72.1772 271.881 72.082 271.797 72.062 271.685 cv
71.9551 271.077 71.0459 265.728 72.0479 264.688 cv
72.2095 264.521 72.416 264.449 72.6401 264.479 cv
72.8628 264.511 73.0518 264.636 73.187 264.841 cv
74.0488 266.153 72.6973 271.143 72.54 271.707 cv
72.5107 271.813 72.4136 271.887 72.3037 271.887 cv
cp
f
137.73 351.336 mo
137.516 351.336 137.318 351.194 137.258 350.978 cv
137.212 350.813 136.158 346.897 138.319 343.611 cv
139.769 341.407 142.297 340.044 145.833 339.561 cv
156.78 338.059 164.56 349.274 164.885 349.752 cv
165.038 349.976 164.98 350.28 164.757 350.434 cv
164.534 350.587 164.228 350.529 164.075 350.305 cv
163.998 350.193 156.293 339.115 145.966 340.533 cv
142.728 340.977 140.432 342.191 139.145 344.144 cv
137.227 347.052 138.194 350.679 138.204 350.715 cv
138.276 350.976 138.123 351.246 137.862 351.318 cv
137.818 351.331 137.774 351.336 137.73 351.336 cv
cp
.988235 .737255 .286275 rgb
f
140.426 361.188 mo
161.51 361.188 li
162.418 361.188 163.155 360.452 163.155 359.544 cv
163.155 358.636 162.418 357.899 161.51 357.899 cv
140.426 357.899 li
139.518 357.899 138.782 358.636 138.782 359.544 cv
138.782 360.452 139.518 361.188 140.426 361.188 cv
cp
.364706 .156863 .4 rgb
f
140.426 368.379 mo
161.51 368.379 li
162.418 368.379 163.155 367.643 163.155 366.734 cv
163.155 365.826 162.418 365.09 161.51 365.09 cv
140.426 365.09 li
139.518 365.09 138.782 365.826 138.782 366.734 cv
138.782 367.643 139.518 368.379 140.426 368.379 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.100A.p1.100-temp_01.eps)
%%CreationDate: 12/24/2021 4:42 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6k?AVEpGi)`ra+4>In2hd,%5](K.Vd"8eVd&\0MGMdS/%m?i9oskEOY1dg+Bl,^7VBaj`,ET/2[bKiFmOc54W)WQIFE0eKhG
%C0Ji%opGHfs'&TM;)epJrG-'Qch%XKQDrr6V4cU'XAs:,]q2A@/%,4C/H+$Na7fE]pr8B.$];pGO'&FGkAHqeElU5e(5bDd;ChR&
%R%;U&co@rCDsG[V3l(KqI&EJb2Y4a.Zk)^h-2>2Lh`0fkiAbL-@#cq@N\``M:.6O_o>Z8Q+-(rR6G67f)hgo[dkXrumasYcEDZ?(
%$g8#qJU^>^ALnL"qTWK%B+o(4K"$a$(j</&4/cU[SQa]#OA>g4q2[c)DQ=oX\#/3cG.$1Npg1mtR*"A.*bK@"_%gc<Am4]3O:CiR
%!O-*k-AaE=#tiaBh[!mCKr65ufUC1V-2Jdd%(ekAf5r/KR]oK<HIkfGR%oLkkEpE$5KVVr'F;DhJfbr:(P/1hC3$59[Dm4F([PfC
%DZGXTG=Tne:jZ+n1]Vh[Q$L"aH^/tTjSb<kA;`Y>E"ke:*7d+>CKEe(0Xakqic].Vgt!nNc-icp1T8jA%__IdC/@*nSC26*F=X&s
%XrF\[T'L'5bXcDR9_WWRV@1G_]u,sPGS/oM[)91rljJ.Ia)H"0%KS3nC5&]TGm!nuh6uBdSFc,O+l>al8&SY]U:q:YjPbe'3GX.2
%UCia.Aa&,9^";ZYp2BCbNcB*q/7"M=!l@dD0j's(ZUt6%PV[d+#8D]Zn6i0nM5>YZLn6Hu1CSZ>D1)%>HqpTW;T$:O_n^1""2?]%
%r\g7Bk1n1hZ'oOi-elXU[Z/gR4.?[@ofT>9H!&+>5AKV3=O$HA)SX+%XHlUk[<*=VVUP<73fS9f=o:1I[;BZMc!lBCQ5f@iH-/5o
%*g=@XVW%9(!R:-<X5UYZ)6;`-_U\4$\0uaE3k-ScVR;3;i5W8ZI)\sl."'%;(g,QN/de4bmJ$mDEEtOR_j"eaeSo6tN-2F//.6ZY
%-I7cc=>HiER@Ed4Gl^$USfNkfP7P,PXMTHh%G-E^fG/<MYFN@k)i&@9)QkgMBa,#*`\la3I_l7D*oOAp4;Qm3<l6fS1N+V8$Nl`.
%J7F>D5a)^5.GQtU,/YJ&1%7N^nEP9"1jPZ2O3E$-gW!715HKJF$ulst8BlGAr&(VhT<T<p3j+V(_N"('lehi<H&1Q*,r,1>%*%oN
%SO91ZnW"sB.)SRf&kTUB%"4]h_k'A1i6gW'N="4We&Q4^ptS#V^u+aUS3.H7@lEd=",OS1dN>6)S,0Z)1_6Rp9kPWRg2t,t*n!:m
%'<-6rRmP89mrf!&p28fY6?#io2Ft^LL/SRPk)R!OY&!ZbYEDoNnkTPjWr:(iVTGIbYP\XM/W5P@YPdQCr42dKJ$-te?+2]&/,tc(
%ri5q>J#O-3DSP`a1s]^BW;Xkg>?h$9rQ9UnlVI(sgd?JOrT2Aa-[s#l$8ZO&fkf*Kr<%c+*L_t5o;&GXT]Tuh-b+F_Q#mTbSZgPU
%s&\U>nBkI#c%e1tri.gOi7C&OIV6_`).s?6:"$a+1qt9S=X*0D?/bEPSIgf-3`0N6fS(6ek_6\4A,m+Jd$tMnic;gl-l6:,R&Qn<
%0)poj6hH)p:'RD-#suU81qiSGG9U.%b=n<Qa%csi$d55*J-.8ENpS-VHK;-a?l.1*2PZ[CJ;$UNUkI*<D']XHp0)TTKEcFcgM@Z_
%ej219VNWuQ]=H*UOTm:T*7aIHN:(6#'N=%oRQF`6A#A41lW0e<QKDA4pUm:;r<eW4D5P"2QVD4,)J]aqY53Zt]X._3k_s8:q^U<p
%3gSrsWU9qM)#Xp`#OmJ5-Zrl7/b1/XU`CHuKPK^O14(CMlZ`u_#VQM^=N_>X)Gh092A))..anB;%;$DZeIfDb#Aoc8<94-#i#biA
%]m:i)1F/&f#VVHd4keE?9)5(+J_DsA500BJ@n9PWAC=%chNhW\/UH-$8#j<Ze7\F.C_l&!qgiP?P!I`AKVRQli$Y`7GSS!:/qEB<
%3WM&GONom99+5O+#&\;rJ.@5p5Tsk>k8>_l1],LocfhCIM`?:4%7Ua'aR;LP!oVut3hclYo2:V*br0I]/q=G6[$u4Mc&u6KI>OLg
%WdB>(1+hFVi?\L7(-t:$,,\KZ?$YH1nf^V9UZfPO"5ALZLU[A0Td@ZrZ&:H!mT9aJ[,Y`H,*`AJkUaLFZOPp%!j(0663I0B"p9P*
%_\gfYJend\Js\F%M6.Q*0]9WP6(U!_\9?MhPa=9aL`WNhH5MX&?l-&Q1pW#jUP<:=#f$uC6!`uo]*'r6$&$\M7$FF`k\;'e_M'Qq
%8D<DS/5@R4%`%aC1IJ)a&7q&7E0nJh#&,-I'-q[ITF.%*/P\?2fqC`)LLqSn^hVh^I'57#/_L:@7YGWgp^5a[UOe^uO?gIONJt*#
%>Hj#B;Ej%?5lt0nGskTT%WM=hc!?tH4j#BT)'Ts`06K4>d/ggp#E.f3."E*fFiP9]-=Z\*,_LFOkVA;t]3#61(c7!a'T*Bq"p!@$
%A4_r3*S,p7b"2^n/AeD$db&Mu6\/Ms2hR,mchCPRBPA?Y`@_-))16s.flB=qABoX.G(D@Q7#N<G.:Ad$)Ya:lgSX?t]deZQ\diLF
%8(m0q^t""",Ot9;N#7!<7^7u5<9VsEBtUBK,.jK_j!.:4G<k$s2$cl.l/P%-HLF<5Z6g-I.Hj=_*Ca$4$piCR1k7q3]$I%pX!"4b
%"UhaZ)+Z/a,)YVjf`d0=-cOITS4".C4SZg,?jlI]Z4*kC[ZhpnimH%r;I*@emiL`^\t##nh7G)4iDkt7MdI.d*&[!3%-a>KV2/Cg
%c2B!$E1ID4NV`D%Nb18l&tPrXAuk]!joBe2e,"g?P:6DRV)*^e0nS,[e7JmKDXId"_%2[QTI8M]0T[>OC'RV+P&A\3/IW(PLN_8o
%=O=K22D?u/K@+]Ui5T>4-pdXa;ABoDVere,P!jD28;D?X2*'*7dA$C/-8ErC;$)\4!pp$2aWS+ARW1,\gWUdP,[mSO!]GZL]hHji
%e1FH%1^Z2REB6P_)YJ?$K_R5dqs!cV$&3tu#rd_a0`[=[CEH*K%^7BfC,;U/0(?\JgEJsRT$Sm"Z\V/=fkC+plpB\4.ju#P<1:9n
%[KQh#Y:^])JjH<U,-k``!o!rl9eb7XJ1ce=[;c^-0Z5!@$S.=P8L[#F#OO'+6I2GI-=i>NZV![q"WTm7"Di$'X)skjgc5362W:=?
%g,W1U1)5UE_!R>mmj,Y7pU7k/KlCq9j\Xij@KT5-BT=-0'?)$,[[^R8UCo&Sq-d^pY^R53+[S/?&Ro9Q6\O)WP7J8#h)gF"<7Dme
%:&7:H\gWRXTf4IfTZ&a0J9A0*Ysr:(ZNN<o1MRT^@kaZCfN>)-i@EL?IA_qfbT'*a4,CCL>nHAn8g>[@NX)d[*GrAo+ji`_3%4hJ
%HAXK:\m#5'FA\K?0lRbg/0[GLE*uSjJT(j6T6.*@2tW26LDiPSm]5P1''BjO/DX$iB+VX63hnHY=='Y!H6?qRTcpBALaH!qQ_.@q
%$`6+%KSJ&<\TTcLD_omC?QA",EV7\KX7O@;%_0Y609BTS7MVr<;+q[Ur#9%FoJH"\b7$+XO;Yp*6@"V2)r\<0KY1h,/L.X)/q>YZ
%Jh",b(`N[42L#7g_.3%O$PV;22Q0#13s:0PdMdX:j4QC0[ciS)];$BD=kh%%g,gIC"BGmtnjAI3LRJ32e)CRXa:4l6\4aPk6j(Sf
%kYMco?pKd!^sbV(O[0V#@![Nh?1`",W!AlX`%-kpJ'3S-l2jO1e7g-r;+%[tpWNa98E,q_8(hH/fo!3^i2)3-I4LQ84Y>+G?%R0a
%p:.<mkI&dKBW(B8/Yf/qF#OkS\-Rj!N<3"7=UE"JQ?0^V#jkGOk^>.#5r%>QW7Y"#fWCY2hlpbN8a'B[MF8nak+UhZdU"lQO&-f(
%?];NLPp6DUACNBLn?9$KKn#XGL95?Rhs6`HSKV=[IC:T:A*h$0hWs+k]NHgMTBY)UeF0hB.ZtO'.ZU=f.(tNS)8")nR?`(I5U(5u
%U8^C10+=#ZSdSOYD[A^KiI,@l6Mc@H9'+Z%POjI7;.5,anhtDp5!tW0YDU](\<+^5a!7b<.@AM_16T_$68K2>?3X[bio8(C02P01
%6<K!iM.NOhaa<$S>fC/b$gtP;Yq1[QpeGl1_56*Yjo.$SB*N/Ke=>;X/Saa65gqJddeopu#(VtmJ46!;V<='788g#\dj#7$:UPIq
%Ik6[Z"snXiiA93A<G-8\,bNDGTp96AURlQQrC;*od%gCR*R.fOc=;##&90#6l7`Gg1J'Tk.PF0.+eM'`*l(.I2F.k,L6L3:3pQ7$
%J`;$4J0s]Z72<VHgPH"PK/+O[SXiLojdI^o7`p&,rYQQpD<t)clVS=i;"g^Bf]e)Pk4M.'\7F:ppRTY5b>K<AJpAKj[?44IRZoS&
%]EN#u1WU<i3a3H5OSIb>j(0WR6lliShiW0BnE@s&TnBd'9'4b+#15^p?;&.Y4TO3WEK_<SLXej83[o)ULO`ER6imCPf,9ASW7*.O
%-4p\HO9Eh%*K-0CiaoHK3D?(D8.G20Z(fr\]6dheEq6[H.Wfj])Ef'OO>\g]9LuU*7D%f+!d$X@;\u04eLr/?f=h32W=-1^m1Wa7
%j63u/4BKY<5EX2jaS-Id`//@q;&f7rS)9fC-kPbDZA[TXI5K"NJ];*XmbD&F_<C#r'M#To.YkPJ_.L$geU5=!:'O_Sj9XL/$1bsT
%\jGG)hESYmknN@B)+pFE%+/p@%rKYoi8VN4i*8oVM-p?"RUa/uqep-a#[]BA=@YBhUg*e+G(EqNib`>a:8^LP[4=K^:C/@&$fE[S
%*'DtY059[\EF`YYEGe-oT\KWj"H-6SG>*jQg'ZfV<GOebiDSs.7Bjkg^:Dt]@%Ct;1<aW5@2T.i0>/7O59+5RBR7,Y"7E[=B]%i1
%(S&,WFXR))G/;Re/^1aN=22sH(smXY]C=HO:.H]mM!RSR%i-;hjGrRN9j%tm)\gTEh!$mM-Q`-t>Q/,iQO_q36T9sf@4BQW?I^`s
%\A_S\5Vs>REE"kPgc4-]@.u\8*=\sEq`>^G'C.tL-@/;[Xf^lnBKt-j_U3HlM_o#R]3^qYMC>S5-[O'VNM-#fd`s2ILk"'NBX$`C
%F`_EN8)NG=3`J97'TQW6SQnI`SV%6Erj](<'#$DscT2?"H@ebOLQ:&:?E,#DDah]NC<NjD$4kfP:#=;.Q_l$jI]fn5L%I>DPCeEY
%*#HUZR=uq/:_.Um<1JqRY:aBp$&U'#Cd8lYU!jT)X8ctUkh3CJ+p04ZF;9Bo4+5V76"2%^3-.3-k.Gho!:\ul#W>=9]j=lM`*A%>
%3/AWqAq")\8.QbN=\$7rVj'oFKDirjZt+EDdLmE5L`(\5^13>4gIf!\;;n?*;g<D=o>o=5K8OE2A'H/bb-.WH`?psG\jJJF)21a<
%+>JH>9<:IYjr=if3('RaM3(;*C:'<cP+G;;_%-RH]8!0qo)Z]hr7?fn396>H&;0AI\[I0&7ZkQ;&Qk"55#SXsg)1KIm*0-5:`AYl
%E'DVd'Kk<n8(d#*ZJCD\3+6.b!*a%@Uik[6SDPZg&\kep*@H.]O@lFT4Q7JYEkpYYgL6Y-]*MFXIaZWHTkL8AT'5^-;LI9fPSS-S
%-&F_BM*6mBoQ;^`Z\o*(,QSOFLYu9KK>K%Oa"DT=OlKYfZk5k^D/akR9sI6rTotW[0[fa[HFOq('FYEFQO/j"HE$9iI,5<r.I`?3
%4E?h?H1QIul]Mt!%tj5u*7(@TPHA@\bkSKl@ShktYkd`c?=f;;\#lIY+igX%iN)#EDAhF9cP)dp^VqhBS6<mLVouk(*fiW"IscBL
%][D]j,Xg>eliQILOL#O*FJVUeD<#s:*R>_%"ec*j8c9*AJL1Q_o$`5t>\KjG]]UJSR=.i+p-rKf;dXe).qJb<D++tXEhZ67D>r,Y
%/pY*rQGu,Sq6suQ/fj;q6RIDT9Uo&-c3^TnKC1ja.YI@<=bc-&(RaVZ%4=4e-E2ST%c`75L^[gciM6(eO`#_mc5%NV.OY@$#,uJ1
%O;FP)!>1$!6)`0l586<V$pbR\qUt=LjSW4c$GskEn8>[SQdA3bjLtn@%lDM8i"Y*u-a<lhimoiVa!.mTCm#ju),QAjK9ZMsKSb8^
%',=egmgF!e1Z2UQ*WQqC/D3U7\$[@TTa`++D(.g=K]rEA)Lut#*(0/ukuVQlYdF"`'=I>(RpGZ$9msC,%&^:[d:aXoFg-eb#ZX-@
%hXN9QYm<sQ`?[8P-H#P"J+R:gS4LFuV1]5TY]+nFMC;o0\l>Hg]`pjW"C2_j[d3o_q=>J9%FKfu6l[tQi=>4+<BudiSTrLq-4FN'
%/ufA&2U(-m?M%OWPVC&@"S0.*4?eL[2P"jmAaW>ATBhd:dXn?G2Q)9b6;V-cftJY^4;N?%$mf[U.`8KA#]J#.A$^/sF1FmrbP=SI
%Xr5B1FL\k5P64rAKa06a3&!&Y&OP>AaC<."SP03hWWrnc]18'_>&8ABgt(_co9!oP.pU'qK"THa47_TQaAb.rO"qffGt+[e3`8Zq
%;\USsJh1X1n#ik'O:oCS8BM]X6KG?[Z=niB4QqHF(nS=Oc,1]G+=)oS&)'_Of-WO\9/`o9*ChO:V"G9FpmF,Q5I+0HLIldo\4n(=
%i3Y8lKfhi:'lrCG`Cr=b_GaX;iCC*JdsEK-Hd9rVro6Oe6T^@UT\DnSZA]O^&8X?TOSV,^/dP#Q,"=L+&luMi8m.l_BQ=Z8nG;hI
%5jRpdAq,,ndraZmJP]<"?&VZVP$ps4$H71SWsi_+PV.p,0<re/r=f?uO<L>BN"5'BkeQ&4UqsQkd)Vr#8+4G$7C>rE7s'Xt-07NM
%M(G67PEL[H%oHSd;XW"-_<?E62bXXcC&/2#&04)`9&j1c0&?$TL?E`S-Wdh.X^VrS.LWWK6EWS8Vk]D"<0MDR9LM>3_@%]&'g:(f
%*\,.o?4)n?#Be(KkiD=IKODg]BPGkK^Du-HT44PBfiapeR\\=!&aD8fl8rinka+fr*ueCbdbBr6h[0lrZk&?T.KfRR*N.Aad]rLP
%rIGI5+?$a"\LtFr*_Kr_h2!-4<'+4(C.lUd7',"JU+l`D+[,`S3$YQ\&9PImm;kT^[SH!gE5E1"IE8c+\*57iO;l!,fYeSVM0[JV
%kSP-[V4jV1%t'>kq$=Ur]ig$:c.OnV-tQY(DdesA%^p,,4D=Y3.9S_f,8jIT.ujhTZTc=eaqFr#eH0Sm;PYOEG<IuFWk5loh?/^2
%9%*>9WsSrt-`%oCoXNHsSa;pOqlI4s]5d_/12u7t]ZqNem@e"Gl\HB,-MfR4D0B:=PVVNZNul0L57[UGZVb!k\5dA)IR[Cn]FqnR
%Huo(mYZ9!/cS3GLkt28356HCgJUaEQYZ<2RY2m(Z&+n[tctHIbb8oo=$I8Ard%F4TT7Qdps6]E%meL:r$"%T%.a@6Rq6KS+s'&+X
%.i1M<1rqO([DK*i+$7"-$6PRD9Ct"iZ'1WKK0J47X%pMb<0p*sQnA0B+NE;*>P]2NWjL(TQ^(aRh#Wj[Q+mRC8i>$Of2Lr(YiqGP
%>)^1/FgtZN%c@$]VfnD/0ke4"l8,BhWrNq#L$EdQ5GUX,/#As/=$CB\fN,]d].dX"TllBFpl4)%DW.=m11&Zf((42$^Ns2,`DX*U
%rAo+"W>&QHp%c<*_<?+8't,)G-qsU9Z;AgO[FfK*cj8@c<(^0g]qO*K[9po4G0T&O_!ReRmJ8C["BsCqP-kM';-^nbN7MaoD^>*u
%P"%IW&S1`tdJ6dX**GCYUG/p05ri:jFjD/ar?CF`18T9r/6u54KmK^]h+5Y]?Y^?r`SgN(]b-32L<RVH4(Vkba<bSd=LqXR<(aZg
%/NuD+`m3Q=GKn[`P<6WDs2R%DKrta,Mg\h3DB)<I"al4+.$ST?j)TK-ei=#=W*ie5)_&(7NP@S>h9Hdn%K$7+p"'#m#(1a/\%?"h
%#P:2YaPlSMq6ch>^=nMtrDP23iQF+2hHJm4fa(uh*^RbUXlaiZa^#^?q-$Ul)BuW("7i2Z,sF28,&_d\qmCL:/68tQF+$'WILKMK
%Y<&_5pPVaK[u_\.VsKb[$HrN$4h@Q1kaJq6H5Y=#iTe"JY`uBOI4[s#1&iZ'j.H3Q6A;eQa=m%B?I:(H$N6Wd_V.%cO#Pqo.-)?!
%$;6QT`Yn)k.P0Um$iNQ>F52"LUKP2G%>.h\D\c@*86GDr2ADM,"OWbJ7PBX'NEfA^o6XW%(qkrMZZM:Eptl/g*YPT&DcE(MXO55&
%nEWBK(49o7DQ;&k=8i#">e+n1."F$2H@^4=LHjUoZ>gnm'q*=>($NP90Nr,n-_mUk1@a?#E%bF;>\Vc0_)<7K$E@K:727B2+3G%_
%?t9k7C/FN<@Sg0!]BXfbEKtqi`#Lit7bg)=OJAUHXqLtZq+J%:j`0nqehb-RCia&Z3HJfTFY@<<b0<VjR46a+.5On?JkW_uRLb-F
%EPGDM:Q$s*+KQp:QrELOc>:%Z/N:#tB"$L=QCHQJrG9#Dn3&0@?i0ZAO6HqqR8[\EXbeL2l.#E;6ED38*LUelkG$TK_uhC7hGGs:
%lA^0<pg3H05"]R%[/,3QM`!?^f)8bMloqh-D805W(]8;g0Fj,PhH[V(X9X_.e"9MNb,b$Mr&rc(.VhkC[/#%_[;)4W;J?#Z87a!E
%*7G$$RY0`dM'T6c3)FPE0)]$oSF_Xg0#>iudmGnbZA]tG.[WDgWt[(lN??c)%HS)5k,6p6EP6_*+;@iX"P54$[</6MDtmlYMX#&!
%DsPm%(V'-6[8IKP[D6sL#rO]n/59%Cd?r\)?ofbhj-RV<Ibj$>FL>]X=W@-Skno2@6FjA%jpl_0pSMp]8Te+?nX7f](.sYYMT/se
%R(De,/\N+P)<D\o%T"]5khtY=YlFr!G;DcSNNN@6NNrJ1UI$(^ikFZ*HK*1uXjFR1"V$a99GD!NL!71=;]]0&+65BI+<5I8M;M-4
%K/#O+E>"8hgB8!5`P];(e?/k+jHOFAe%$QMFV_;7T0J\(PHIlBWEKl2;K)rg;LJI\hkn8*`n[or+$$a&:K&<u&f",b*g;39BO]a2
%.Sd4QkNiM/6h`H&?YHJ/N3M=?3\:7sqUN9\-=81t.M:dS\gm,Jl`J[:f6DG2!kTC=1Lus"SuJ5^R'Eo9'.bs%2.Ks:-$TUfjQ(9`
%BfJGc2@[d@8giLC_^@CZ=g/\lJoG1T>@B6r:Y\ln[U114H/d-C.g_AYf=EdR4a;-9_<cc*^I1GAK%^keHk[>Pp;1Gl\=19(e5[$p
%h"/W('np8tF**EV_Ir+K^K_8+a$Gi*Dc_dmoea4_od(?i1q-h!Dj,O62OQnF>4ck:rk?RI?_'lQUL6,YNl[WC)]hX9FJf\1Sd7tZ
%8I65Xq5M?MJ$GTSHH4dfMl!m4C3<YKSp=QZcXuSS6ch(GD[NrHjR>*^`Jcs0;`P^WM0G:7$(jHK^`>@K.p'k#4utopCR1DVi`f8n
%6n=<Qb$NXK-'bPcWchb8\5Z/#]IXbTC+4&>H^)[*UhJ7X(L/DOS?-pA9;r)*7jq2/5$u*4)H<E"<n7(NQ%H5T<)b^,b5JHY0E1Hj
%.NfXC"qA>EW'bOKHeT<ijlBEZWo@4V[>\Rg*;Bm(8ofA8[oZEe*Y>;s?].fYI%oC=*.4@o0q'D1f"Y;0_Cl]t8d`A/^GUWm\<nj,
%9pmCZM]$m%B$HlXU>3_LR:W,bd_dnQU8TVTm"p&r1Jq,SnX?se'I?=+p.jf(%j+!(jeCP*pmJ!a'U?Xr^%e!&[\f]>:Im*qP"IOR
%7@E83r%$3-)KJ\qe!,cbZC%m53E)3$U8.pN]DNY2J25;:)/&q,9t;Z%M]$m@2QaM<9#>4->e#8=8i);a2+iN[+aZ6&Qfffohp$=R
%nnr]>S;m<EZae=!9\]N")7mTCr"&ZF-W,>lplQrcAsmAFd<g&[b`&a]M6GSg^8:m^)./m'[2E>@#em`IK9DY62H/5IRB6XKUbf/3
%j(c'`C,9F<VQA%Pg5N(,$Wi6UK[0U:R`-O-2['cjDA7/d!e<'^\igok1GVi._2O=bACO=CLP:50iaL77Gs2ZB)#kPiMe$NV9-HT]
%kB`qg,8[=@U&8h$05mfnV96Rm1FDM;P<q8O>SbJ7Io!ErQ*;2%NJu:c%["?s[C"V80#L9FhX>O5A,<(L@_)`h=puIAn/bmpiJZ@G
%aYoaHq=:GDq+eu,0D-f$q_EIH'6WQ_-nXIDGiQuWWC@[r5@H]0\bg-b)1,TL?SL.$dD>i!IYMj:g^iGb"*0Z)[8I7Sqk0qXoBF`D
%$cY>c1iS%r+G)Ef;81eT1qugUO:LMgijli]h7fcE%D*LbhWR#)d_/dD$>WJ3P+-g2No>.ZB'e3V?Rmt990kq!KhW\:<n>[<rYc=_
%qB$Dam[tSA]]joBH=Ou6N9Lq;P8K+cV2UrZ$YX_3n'Q6tJ#D7cb?=ae(B9rEIqS</HdG#jn_`ksrt<f!#dDZ6'cH3dk'N0?d$2Ir
%Vt,U,Ahi2c\9iO71#HuX:M)?=$1`=7I*=NV\@cXXr7Jp*YQ<i#NBJXcn-mIYVCQ6)`QB[be'm=5P\gRff;r80Q#WmO?$]$60c*4;
%*nU6+'T84uUDHfZ>[9:]_HIH<Y#SS'GCqWI/nS[pkgr[9;(dit31,!4Afe7GL[<?[gba>u==S,neUjI,$'Hpn"DfVo<AqT..`J'c
%=UXeiQ'u&$(kA*dcGmbE2Z&KhnTCBOWDk\RftAn/\uQAbn:)0Fc,QF6Ja:sSYi^AmSZT,dTEq/(rD&Kdp["d!'Zeq_7DcXfglr4O
%hn,&g-PGh4eK>+nHu6Gi$0X0p`)um]5dQtmB7p?P%I*9rcG&-^@ng9M[Tic2/*5\i$Z%bi3F6<XQ^Qmq[S*)M?H1dj,2Fg:G`c;L
%o"WBg0/LYlbjdH0]_n*90?#)Xr'U_`B+C`*"6jtB3L0lqb_%`q*i*#BC@(mN;gR9<?THG[T:BW$0:O@*)M`cMTW;]<fmq3_m;]mR
%6KP<H\DK(sD*K4![22Q9-g],2R2D8Jr7<Qh\6%WK]7jt3UuO;e_PF>Zblm'[(mHi83$u$4?PAH`(iR0CCn6fsLpPj&*rU!aDdPQ>
%p@FOkZ_-*bbLK7LaI/pl<5-57@C,"\j!$f:r]#8do!0;nE;HsbYIHS+6V7^#Jsf^8)-3aoc>+7B(-:%9ci(!)cY$57-d<_Eanurl
%J@dLn8_MYK)$Ap-1Oh-&1HCp[Zd:&B6CW_QEHOWQ(qkmo5V3MH<UmehZ_gq6b>HYGmSVg8Dd6DGRjsg"UQAPLKp;8M)t-aJoq+$)
%`cr>-p<8RP3JuD3O"nqUjA(7J6Y-]_5K:p.0s8`0;Kd3Fa-cWrRJAQa`K/F9Q'/)chMX+H1FiGSVr4bI(mS!10k69QQSh"Zn;I1/
%Jk@p`[i;lN<qg*NY>)Q13e2@&=1XP;>5@$:m11S(h+oe<6K(D*$bm`nCVdJl:sQ%BA6nlsCMi1UEMLn%%<</+\88D+8YN)9Hl]UB
%PjM92770]2Hs*M7<2;TU]<@LDY"VaA2t$XeV!5O)84tB/r_0)]U3KZ*D\Z2qER=(/TL%nSs*KAte>3-&[6];cnT3-[>r7H>lcF5U
%.bUi^DEc:I#>s0H8\6$SjsV70.*8%O2?Pu^FOkAnr(ag]<CpOIMj^DhNC1jT'&H>Rb*U7KVE<b;!F0W%64/]L>3;XViY>?l-I*@0
%-+''Zqql@&cYU/Li-@+omb_?tbaP#(F*FkN'P,>0RN"K)H=kFHXLX`V2m_ZG>Id`@="-h94f>NaR5m2^k@Wl3bab/jF#.m?f:4q'
%<:X*J?\J^(hj1UGb*H8\B@bk6=E@*%2^-bB)W"2t4Z?s(0drW!*d7gl@-pYWXV+QVn9&oX`&R@Ab-2fbVMm$ar<4(FMa#1@H2X-=
%1@?N$>4)'/-\bPKY%R)=eR]>OD>ps(NJjO']@i-_;5NR@$B:Ys9)dUlj(D6.h(J$L1DsbDJJ1UD;_@q5F9uT+8dJ(T6-MI='0nq6
%lB!&GrhfT\OqYa_e:/BXg_lQtPo4VIkt7@mCL+n;k\bBIX&I(YX#Fg\IP*V*q.dK98+l+$JF6td5H^8(+=L]@"=gJ^PJ5F%FZ1.I
%iaPZ[ML?MQ'kPh'8H[\:Bt+pN2\ao&s/St2.`Gk#2=G<D[_eS35nQ:0HFtJFmob(]'M&`$WeFq)rQU1\@,.%FBd0sq>Q+E_`+X6K
%9jsnJN45YqdbQMInD5Md[QXlJ'$b[dT5(2BghME--BkMFc#f\J:A!GmM2ikkc]k0/;i5Jg6hb)n6VO&sH^9(CL7BCa!W+<T!t*38
%c(I,FF^V'C>(_DH^JQ/9)fad-r`>9WmcQLT>+oqA$C$"o@%nLEH?eXS9R1F\B2C3P#N;'1]nSfh`c\B!QjLg$E4e>ONOs./&b+g5
%*7[o%-5S&JSt*pB0qnRGRV\K^&+])-"t*dBREkd+X0\0aN#6gZa!<.O;g=MP<;oMD?i+:%HWeV[SlnsmB,;6;cPC@blhZ]rTLi\T
%,p0]s\34=G=SQ`$mFX3V4f6>NrSFqS7^&'5Wj%Abik8Q>`Cauc(g`4]S!_X1IFEU;`fq@g'7WNl_)*6t>uOR0a8Tt5[;!-U@QIe.
%'7@n)\oi!k:8[@>j'.l\A$;7p?#&2$ABc[Cmbd14$Kh[BL*>b15F"EpqXj/7pnW_qM-$Wq>M`Zj[;;Np:&_3.,ZlEK.,=;F<5:1"
%SidT`LrRen:K>)4*OY@(Rq/#MgsJNqO_I.fKG2gDduJ%p1Gl^^1t/@pRAK=/3J:'G4;*$>o?6f"Q![E+6_)1sYVUUJFL9f%ShpDe
%^V-:E+#TLt55pOYTp3#sZ1rN&_'E2D\)i^8i`qkX'[+6JK3S<\dR%tEf?UkJq::TM;43,,kPLP8+nS+Q]r]?H<,bhc8&+lWs6WnP
%4.!]D/2lJ_J::],-Bu_U/qR3*euW6!pAD4G("?[t[62ZQe<_oh2XM<=Ke);dZKb#X;I#"?B(!7VfB^VbKU`T)U2rAF@;,i+LFX2u
%_e$tad09L#1jVRhrV?89r*?VZ36%GclTgN7b*=&[qLh8IoE"Ht#Ia=4:hLlsKP:(h:oY:`<[B>@J59Sh%K:_?A'#<F,okBT"DI$+
%g[TC3Uc03V_&H2!:!8Y.h^5U"R"Y))-[p@Jn%M-A%ff%70D=@g(<c^g^-"`&J5Pkk)9N4TP`=\*LVS]sCG^DKrF4,e"MBi6MqcI'
%l,+,*:iFk)3=M"dA\@tqd-LVhJ,a_[K1Dq)T@TsMgSeEAZt"0'(X5tJL_i>Qo]>VhdRC!g?2]7MQI&VmBEU?[9I8:AJc1]#)h8Y2
%kNcOWiXUG(&9(GWOa__m*\9sWE_Dl!>M]4N;$JcRL%D!)Hf9?dZ!9Nnmap`n,:,6I`\0eb^oc;>4$QJ&W%JEgr'@[:=aa*_5^FD,
%p'E&Qi/1Qb1_u!$K?^R)cse;F'9'R4Me3T&rKBeBqg]N`(G2/Xm<&G85"_'5ZFfkFq8a7jc$H-_qMT/u/67$Xf!k0TI?dq/<g`kf
%;08T$UX"QK'GufjVZ%NVF$)K(lJJ2ZFHLVBo#LN`pMh=>HEiR$*]@nfq6teepr+C,<r6H5RRH5GEUSBoUK9?/]9Pl.PP&$1(kni"
%N*M[s&'E<gg-7$5s3"VF_8VO.eMMiLA$RB<2Q9;[fQo/"%FCbkK?M8#X`-/Ohas$rD)=.C"E?qTn^<I[O,"JO_JLjd;$n4j*n75T
%0H'>g-SqB]4q]03Mq%0*Y,PkAj:N2(,Fs%-H\=^/qR%&e]j7^Epr0#$g+:gmUrVoS-^AGRX_h3q,o<3/nR?sLEDc7Aq&!BE*n+U8
%*ReEm9CD"i/6kKB:p1T37K>:JZIZXD)1-4.+M-jin4[igW`I3]l@iS2(F&J]+&Z<%VeJl$jO\=]-g)9R+dne)BBUo5bHO?I<;h2X
%)&pXHWFikJ89ApBHF;17mp'l\Q>AH/Yp7$?#\ra,=Mbd??pKTOX_!<LKR(2paBl&b5u@"*+"p[fX$I31>\Y&/)6aGgNo'5oE[>p.
%Bf9Ac9!bP/VW^G@NfFWc5s;/p%q6p&5E4;r^<l@&$H5=V'K`mC\43ObckVuBbMW9pEI.fAA4O>A>aAc%1oml45bSdS!@0L,,8ThI
%Zj6d^^),;&>FS9IM]DtOiQXh6MS]Q&bsiFu0tN3H5k!KOrUNt;^C"G*Q"g]"TUph3*!S:54fVBS*c(rGS0NC5qPVa'*^f3*Zfn>-
%h,QO[fn,,hDA6PF4FXt>74hCL[_>il#I/TM<k/P%]aGP;a$;D-DRGW<\qgr,-?fQ9lZL[s]oMIahh.Z_a:1D!^<A/tU--TUU8[4m
%NgnQKCk"TkL;0]!489lHWjP/-1uT@I_q&L:f=h>h!L85RqK/NZkYuWB65=G]4TPK^4^S4:eGDogg8#Y85p`%%I1QJ`51K/N_cQ1!
%)ZV`fJkFSp\a-GNT7`SUW@l4WnV,kNc=#TsD'r8[YPY@\Xh)-0S6nYclDP`*EIr8JTgS>ub_/MTo=f+*45"5N(bXh_n.ql-hmRi`
%NQkI<q&nR--*d.A8u)"T#[!/dn%i>:fI-alPEHO.PJn_>&,*6H>XPBo$i:lDgWB*L;-SgrYr$?4>&NTP^b$9U&.q:p/q)@[nqC[)
%_BV5rG;1`jD?S";cnL>&,i0dZDd*33.LE6%Et/TX"@Z]3QU,tB7S\dU2/Ga.<;)P,D&eQNb!ZIinYFM'EO#K)Y=D_B<]]HA$a"'&
%%O?fhBlaR#lL'F1p%g,dF/jkaUU=g`_^atXFb`_RC\5oU#C"$G`uY)#'`*TtCV=SdXFI?W,XD@'G1Il`]Bb.P)`4t'@!R!hop\;@
%!W[3rZI^QQ!^q@a#P:P`o8CR""4oe/eET>R&e!38%+c6aSOopcOn3/G@]+TVM+(NH0B(f*6i$n]hC.sEJm-):=NUc50L@sHnM?K1
%JaAEZI70QWpe!s.\V?5#6ODCNY>>;Y-eQ!>l]8(%W)VMUcs&5[21JTdH.il'XukoOY+9Ne%pk0=]>Upj]o]\l:gB]_Q-2L6'K5-,
%HJtmjpJKLfQ:,nT.P-LNV@>gh`.U6c"%\)YET9Ro7mA7aOq%clqC/\_q[iEE%b]Eho?-X*KG_)-BZ5E._`DgH6f<g/38bOge'nUI
%8B2VQ;\jRZXl^AWhPrPg=KD61.'^_seI?,7jc9<'`M$`m;/0mbIB/SFTcR<M>dn[H+#uSd7%:X]g2FB]rc4j-+i@V9'Rom)5BaOe
%*)F5-Off0FOiZW]`jR^@&FNtV;6&ng%HL'nF*e-c/cq%V4o+2[-*k["*2-Q0.U=.9)RsCcS/VO_J#\@:ZkV`Ef31jfKVHuH`s?LS
%R07*NPX@8A:1'NijV*n_!L1'U9F;=^="/e"BV<sd(`]bp91]4oSdTPU)DD9Ai._aQCITi&n'ON"YT-iq<MIH'["6ck4CbGOJ8s\N
%,F7<0*kr6'9WF@.f6amGY&Sfi_7j24$:P\S^^>sJ[C&u/rsGe!7/bgE%B.>@m\k8.]'7)7OTU(TefW6pYZ@QViCH39f.it9-s]b/
%jq&cJ$.T4Yg*ef3dQA\S^<j^-^u&"!Mb:"#;pEirjP:=[0$B5B^,U^[;b%YfJJ_Cd(.g.f?"X8+;=\K]FjQkWWl3h<+:l6VC\;,J
%h4?$<4$q]fXP>gk;7311SAG=hB$u0WBM&t(='+jteuAE9h:d2HU->SP^0%LC<n^TFd@WOY&J%oL]r7O4.%n+)SBB!jQ&k@F;7$VO
%D0\Mqd(W@(Nf]&VFWG2N+"Ca#/79]n[GBtN9X.V;jSnN-Z.3<djlj)VoQSj7?U+=oV#Yih<Q*3;)1_Z#$cDHHC/h4Db(qnV/#loW
%C;35\<$/Q<<$U:"Z$H9D7A3TLLJ8cSEi"4H22\h(9M,ILm&8g.1-3!beq6XB8,h<C7XHn,fjV<n&[+;Y;RU@i*jql4?d;<ZIeRS%
%+uX8FMl(s/`iUX7dF5+:/9VZ]H8'660\WWr#OA?Uk`n[[Vg!;h.hgttDNE\pj707KGPEq9*e3qVWKC=JGi<LOrIrsheFDYWr3!<8
%+-5%![.pBkiop3X_=NC_aR4KSjW;'M?=t(`GH8K-rJJX^^LZ?oQ%sGNpsR>Gkgm.b[gmkps'V5(G[>a1UViQ+2>h]^F?WtFiQ]5T
%Ga`]_;pU)5T$cOT<j80fIepJ]D]V*<O'>t34"p-a-@JQ*mcH>'GefS?hWHfd@u``"h:G+2hCQo[kDthpiR^_I\,6@nT"m&7%hm&T
%n6lK9boLXSh!?!Lma43Vhb"^M-gUPiVJ9ZT7r*6lZ_l3\flU'fL*,=2a0i$&:VSL?)]tY6.j_>OC@mWij2'MeX44;69j`?qo#lK#
%=0K(c::.Ruj%M7s0Qs(j(od29_rSqKqEf?U[3>V-9:rXF*c-5F>X!P?OEoA54qlEOSd':440Y0DO'dghNj0re%mFfC?V^9h?b[AW
%%r0F-qdna/5$<7,?>RU4;X;r2VlSdJ5]_=HNQ*PtF"+S;jlS]B7_X:I"6dtT+fnbkW=YOdq+FiT_cNJ(r2($+T%h%43]Mn5G)k8i
%FpMe[YE,<d`lJ%2^7BTEr[<&VJ$t`u>+[`f7SAT=DkC)e:N)h@/QU`2Co9JN?W&g%q+&cG]dom&(tJ'J!:^MFNdr7eGk3LiWa%Ef
%O0^nQ[f%\"RP$^JZ*CmJ\#Vanp+5C.DXD'1D<!o<pZpH-c-'2YeYeCq,GA(c\WK"'oXp\H>ikJeL/[sD1m&+0c^_-3QeBm[NW$%>
%l`VpB9rIVLJ($9I^!3,EMhA,>m85\8lJ;@am-!!Ne=-..6Y7^\o+8K+'qZ;%<7+mZE1HUtV3.k@G4a<(mh6>Vh!::\p221%gl,UD
%VRFG)G#GNGXZfNF]L]VLM7Ljlg.*BOg=pu.]s2TJIh=I9MU*sAC[l[(X5e9s(LQ4mbaAdY>>*#scX&MKVK6dqQ<-8p`L$>VIZ(CG
%GUnI6]Xq!/;X`$]r%t$OWjpb9qeWCEqRjOijl0?WLue*FptXl,NVNFHb^TJ@=M9MD3'bH@:C\qOJqk<!G'rOWnO%\LlaRR7H*s&r
%YJ-T$`?1Y"5)laoh"hpb>c]Ntf<5NWi`bU9F^2+36/7iG4GXs$2g3t[I/Ga;5FVTlGP(K1gjQnL`4`8J,/3Ror].]\UGGm>-];V4
%r9;[s#OuH):Ti^'bPGs9[BYmOVa&Cta0uh"&)u9[DpRGs(9/J:3sX=3poCf71;<'-SB(ArXY.X)([[dgl\f9sI_<""`ntHJho&<[
%?g$Ee/!%-un'@V2j"MS4^2`/)?PbrH^RSDeiYSL_a79)^l@\kCron=u]&G[.2iHCJG\Q3o[s7!WYoWk148Te34;'=0i]DU1DSDRn
%Rp/S20?u.T^O7oIRXV-YXjn6%b\;G'k+&.6Q!ft>lg)R63HtM^dbNtSq;^8ZL]6>EkI#Nkk0hjOa)fq[YKXPJ:HQP+h2a3!jpps/
%k1ii(Fa<CLj7HmMSH^*_9GZgRcB%#KEu-,>qJpXIbSAu"#Gq7]Vn))d]7\!X*knoBkDj<gjql9TfCR1>MmN5eA,F6XDS1&RX[Q`B
%hC\Qrq8Zi#0B\rLI=4>Pfme9$s5I/(cL7@\4IJG3ptD6&q>+W=rn[MC_td)7F`-&#oP='7eT#=&X*F:PL7'\:V6B(JMoi")EsL#D
%+$=q8^3[$[H2IGh[e]4S""XAJoYC?Krp@PN=4R(uF@LcTi.[:uHa'u*Aj&,"<.FJs/?uJYi8a[ui<+R>rkjB3]iWerDSFVi&#tWV
%`'SjXq#lFT=F@`q]<L":pi/UWpWEqf,ItDTG^o8J6;"jP?J)u@ID)lZlH/V6Z'0FHn8>E!G2[N4k1`6%CVa?PHN*#FTmE+W/]RCr
%\bPY@s*?E)=K4!BcJ7RA`hEB?nTc:g"N)d.gS_4jpYObk(Jbeg4^!14HM_1!f*^["<FC5W/8*6@Mp8ZkZ\OJ3ZaGR(_>;oAk38e^
%_p-f&+!7@d<Qp4[#KQXqLEE-PH[&RnW]p@9]\\![Btml#=PDRkJ(V8VrX??r_l$;i98Q=1m?6ki)bWu@\rEPgm,m'!4lDGq-fsC-
%V2l_sgf",_Fa'gPdd3f"lIF\\_c2_%?;IaG/j$\W:R@]%Xs]OE^Lc]RLP_Muo%TMqZfNj*poEMndh<^5q-27S<YdIJ<`]ol+6HYk
%:RQ,OcX)tt.kchd_92)_MSJ_b&q"#r./G#eD@3""X>DEi+'+_pY<K&q[rT3oq-rc$2=j8K>hsmo.B]90]reF5F7k7;YBt.r[4umd
%^bCh8cKA,e7!<5CdGqXWLIYSACuNc-Y!2mLh5<X#;=9@Ior)tPF1*u.5.Og#>Bm`jk%q+Ff96$gcIQ;:0.Uh9ejj6;bK$s&[@>+^
%oigtP]p;bpIFq3FM\j@NoBRk9PB_5]FI"oBIJb5H^O#Jq;1)M!Y0Xd<*j;af*F5bYq0?a=h0ea<rEuC/XM98Vo(+o8UUC*gnFM@B
%[$5s>)/nYUZtG\seQt-DkI&d>baEYEg9@q>%'2,K/FC;.]"YqlY!4pQ^=ILUD,5X[EJ/e7V^m)h`Smdupf9omn`8Z/GZrcMMHB&g
%n&3tG`4!_la,]r'49*Z0c5`/[gKa_eUoc:gN'eucdeMldG]%ob]lMB.ZNCYk1"RB/<V+=BB@2,&DKX6P]CMV'#4EV_c+<G<DQVcs
%1bA+>RBs?NklpCtqSBJ&>J&=bDi[p=HY"Mrb]`Y40C3LirRa:o3^1#+MG$D8S+ggJ=nuabNjkP)U4h;#r9CD*qGc60q-%@KWTR.2
%llDV,O'fPu]!'O2ds_7<F5JR^HN)Ha5BneC&\L0s;N%GQn+G9)A+*([!%?`Qr+KT:nF#th7WpBom-E?u`k10?\ktG4P(@%"+1s((
%2U1l;Fu,>-=Pl6_I+mE#T=oW^g$lDUa4etSp%Wh/CZ4gBF`-BIms\Mjr9a(RQR?RphPHi,?-+`ag%V[k:X2`X]R!J(Bc0\gD83)6
%I?M/9oQ:,`b0JK-pNq\t:TK37ij6&#oZa_?qmB5G%][-rci!.)bd1L'pR\Q1Cp-'!3l])#a%Hg1kP<P#2&ZGlkpC->*t$,lr4B#j
%g""beo'8[C3q`"4c.A3S\lhY=WbSrkkLB3QW`mTJ_D(5mrech5MVY2pj$r'?qXS+m2"TXB1S8Xsp?S-5#Dkk2e(Jk!;uO"G]X>KK
%['5g9=-g>PI#KG^$7hrsfnX3Ile0PUCG3:Agq:a8*&Qs8nVuWXgX_hjH$a1L+,APK[#j%srjKCCH_G_gdP!A2[@7tNYIC+;.'42e
%Frm3eHFf;F?N.P-k!Lc7o@;Tu]j,H4rKg<4q:1hP-eFts?CqEt?S*:GW5!ZLrq#A)0KM=(SqY2PP$<:BqrD#?M:UMCLWPh;ldHAO
%pQkLIl/'lU._U&sVBGTHVDdK3X3T8gIa[*LY^^90n*cSaJ'8lXp9L.mREq<]pb:<IFRX/5k2E#Dp?)s1SpbDrSi8hl?H5992IF)L
%b1u:bDeT6,H%!5<0-;dJ+)4<lN3COSWOr/rW3lTejmdZ$puZgJrTN89o>,J?,X1sBou'"=pA!]fA*Mq4Wc<=SAgMX^s!IEte]+*Q
%a3S,-WL[k^S6DPWkbidZ:\RU;(Uq,M/Z4V')!3ApFnt1d]t5tB<kEajp""T^l0I)VeYUO"=#YK:GH5'l3:AVphH[_joKg"Uj*otX
%rPnNuZhGi.2Ce/g>KaW#oZR*RLKDLGk7@C7(Jd7J5KUl/VABU.5CU8D55c2qPZWTI5&K_+>^UkhqKVa5jeV*f2LTrOo0N<Qjl_6%
%o&`()k0;KQcB@UckMBOKIT\RQRU=KSrT;;d%um+Z@-?OEs6TRGRK*9^iN_:q3IH7[H$":UELK*T]Vqr;*9GuS`[M=[40IlkEg9]f
%IboNqoelb1Vq(@7dgsWQq,4PN_^FnO5r$&uFD8D_QFf7=HeZ3G\U8:")8b%:3]LG.^B3.OIVl_MDdFNgQVO`B2mli*r4'CBGl;77
%6_V0-Mi-b#q_5MNp%[Q^l"fs,kK/^m=NoZmAs1G6rG0q:52LVQ(>h"BTJZDOoX+8gnStQ#=_(m*+"hgLb?GMMO6,0.p8%9#8MhnM
%?PmF@l\h[%X$Sn8Y9"aWJ#QILj"Fi.Dsisif!ht+J$'PG&jbo1imVW/I)XdA0/$RVs6j[V`YXb*'ok)h16geA(:7tfe&_C9NT:12
%F"aVgkqB/pIs:J=ES9f(%:a]WQOR9obPa3JqBdBa7P[K-HrI+*'"LW@gurd:m$)EtGdtA()?VVOll(CqSF[t&Lf%)QqQNmL2T\s)
%WQ"9<Om_Ds_<E"QZKGZAB4MEEr.L*ZI[/AH$c-dHA(]=<V-M,Jf.*U>;u';Q6[-3bS,OE6m!oa/1&nB2OEcGZ333f%/_=OjnBW]7
%"Gaepn*FjdrDfOR4=E@%g'Rp[Zo?eNk/\7\0Ers1XL6lm4kh"$F@]_;>41[im_H%]h^k=P]`Nf\;5rBA[+tYXdLJbo*J'C]U*Xlg
%b(\a*om[1J#g)S$G&Bt!6<,ok>q+qcB"F1]9e'B`L1W#kD<:Ja-Q<lUJVU]:D^t$s*=tqE:LUunfXpNiOkJ?i+5P`rE:+e^(k@XH
%F?bk,N5d?`=@Mkj;pGF@lJA9:%7d<mO(&_(8_1TZZ&`4b@N+k*d,?AcM]9C,STHg7pYLnL.]N<SaP[=Oe4s'-[+E]1Q>e)_e3T\R
%1fVhs+$)pcC/DE%CjAo/PkP%/bull#8m!;m"+LV1U,3<h_eBGi(-9`Q%,8ijc>(7"Sb,!9V8,#)7Zk<(&ijAW]G6FtVB4+V:83R_
%_l":'ci)gZ4eiKf%,7"!3fda#3a:joJf-Q%EUs7RZr1c]iPLi;+>6:^)$.Tn4MrIfU"N7;LJ..V_9$i+FA_`>`M!SI@B8m6S&,/Q
%`3)qN;8H\&7Q^"5K@*W]&@o])%LI;\AA3[o;]VhX"#1`#Tiqn)<21#LJ4#+9n`1T*>R[PZf!l3!1.sA,."[n54ndns.*(WPGJjs*
%*(/h9RG*@,!ngt1*P^YceR4ou_6HB:W"(nDk;p*<kkJee)68A;*!<nqYVADli(gKR69/'pF1YPmDKlkJJQj.Z@1Qh,$?hXA@KefA
%i5^^=\,2$&ec7nLN`eQqnQIl=n4ku2=hsFMG[rfUCj?\+?+FcIW)/O4b;X\=>%4`6#T6.8<iD&08kc6:6f/4`k.'B:o3bQJ,NnLa
%1nkaY"VH%r>auR]*t#E,+*?K3Lfnhu!^f$:5+Ml./ekW#::CYWJ`cB,"nD4)7+QM,0qI`)p#$03[&;bTnFN#C:^2/H.1)7#f/h0f
%Xq!6Fs$p:fD"]Tb,M1aoh6XP?2mo>PiI@!EhT00bbO]h$f,d+;?;)/Q9NW'XYcr6Did_!;7()Pd0R(]Nj9'8n]-H@\:'QZ+Y'gef
%fo_qu6hNC?'2U[9F1be>Y5*GA""054L6i,lFCAs0_k(a\[d3M'H3r3O4;V?69@3WaT&JTIq0#'cWrcLL1XI]X-*0i0G58GYh+3ON
%:LUBKJZBkqYd@@.%amCa_3SH\fRQ[!Ek<e*n.q',^_`s"Chs@`/m%f>K^"jU]st+C3^@QGD)[l)f;d=cr#PU+UXh@^oT1egS.iBl
%)&X[=8E,PJc^h,eD`*$H.q>`_nkQ`Gftq.@i3B&Km)#H%M`WO6S5T+S+'jlO,,q?IZU6\E?)To%KBE.WWg;Ocb!n>!l(/#aoCeqU
%n&]en$:*WH\>9]/BWJc(Z.<Ob=DPD84ZL1LnXDo(_PPh7b)S*c\rJUn!Re7jeFksV@d'c>anV=GjU>?P1uL+q_ZbcB,b),76T=L8
%;-VWmgPQRmBnG!-0[,1[AS\ke-$6pCjBkjlS.Q+!K^6-C9Ges^$XH"0@%ueP-59>'Z:NSP4-kMr_G/[kV9;a=\\<"qRULNtSS,jQ
%W(>B#*`gpb`GKJeRL2L#EWcdY]ih4$1VqU%1o_j\YQV-7^m6Z;9@LdV*Tf\(T\2VDVJD#jmo"3o=RQkR;\qb;OY'2%Ou\VT8!T+0
%%<;R-0Xo(aA*qpsEpW02D[OZ0a"^:Y+QtB^(Bh):K]h@^YGPnM2G,&7`K@<u(r?@+(60^8$!(_SNeEe(*82gc9K4)LY'+Lk91?_F
%KGQ'PRLT<VW1j:m`'&njJLD)$6]c,N$A:'+XOpCM]*Vnl?7[jfDC6tCUhaL!@8X1;k$_td;9Xc+7[k??_SA<p%+6a8B1"hj9#I&5
%4%mI;[KgLIU)/j-YWtJS-SNOudnRsl&m4l@0O5FhCB.TE9'ZC2Ge[-,q8L)kJoA8-rRPboP8mWl?JKZLXa+'"BSMs,#,H?H=%sfA
%^cEKO:qrPfq6k@ZX]/=+Vf<N3'6e/4-euFKYrk9$XH6tKfI(m)gq\G+kTU*e>`^9BMf.J&J9=ng'T4LQ3i=1XELHQ*Z7UlC&4!M-
%jRO)/9[<j8%(<ui=GW^%6\,S_YXI).5[asi"Wfu(!-?aS"+'Q,-qOQ94r1`@8[V54HGos+o!g'j`+`&)bHh1o!1JX6KpDh`ln0*C
%Se19U/9,blVW35%a!E@a<-(;\T\^ZMX4SAoeA6TX_brk)h_e7m^`q%M,tK"CV]oEu9Eq#!4/=T=W<TsX_.aiN(Y@,Y/qOE7:WC8n
%E08>M_*.Au,I0DC@B&C4lks]Dlh(s7m!"mDQQF>k4tKL-`B1;q&sn1.@.TOHhe7R=R'nOL#q/HKKS/`u^#`G"Gt%U@;g%3H5dV"q
%mS$jR&Vaq[C$iEb-:k+U4U4he[lr20j9G"lJQY<rA\0i5J]S`]4I#87\'C`r^k=X-FWTB1!6J@GPbkqr>O)S?U(B_Ng,`$*1nsS0
%8jd_H1.YX4C!A!)o<`/eU%@J-N=M5o^q&/>.Sm+D6fi$IG,ROjd[&#hNmZ:"HD,S5)@rtiY^32<b]KGEcLW.,H%&iPBeqh90[0Y%
%/%)mo*\#q,;FelR=c,YVaV?Dk(?A/%OfLc".1P"-[S;.ah496>9TMW_Pssr_3QfcU/i@J9=bNVRA3+-f)Pj\fS5!WF9fq(">[/B'
%Y\l/3.:I!=D1^r&$:mnu=4is1:'o;?86jod0sO-!8cXGQY69_''0iQ):q7!rBXf>ue1hpCN<$rDF[-So/gtS8\d4[o!uq(WWnDR4
%K5[F0726943NuQ6eI;?Z*)N_c@Q!@;"/3+,P0GjX!50sp6SRslf5\>[crC546u/`cRCXE<B#8RN:hd-m$RE6?lER<9kXTi=i'8Vj
%ZP0e1nD#SE%lII@7:(""!?5!C_uL/_+_X[(R4Aoe"6<_inCoMS6+p$DmV!5$/:\o\G(ZdhYO%8Wn0G[[;ud.X#'\,\^]s9>ScTTY
%!"5*c.RrnAR`=jhYYQ;3)F-C)!<WA'0hbFBZo!h/i!E42$$r7gi2)mpckYao1/6,s@4L/[:i:'']AnDk!*XQX)?CP:.35gD5QHAc
%MZ$SL!'C77AX]h'";Wi&Lr03<@;6'#bLRXLeP]4sD,<P*>bL0skk,(;!:hpJflSLR\F?>&?PpX%kC\\5*PmpBQl'KN\-N=9g2n.p
%>+k?+#4TL6%#5BA!PrH.Sj@iU/^?7?Yt(%__+kXb0<V-7j!'>h3hTXIO(IQ&E"<m1\d!]:Cf[AuhhLA<-ZKUhoBI*Q'H&h0Fhflk
%4UYjR&>qZ3<XDFH@FKHc4`pW0RPqGma42bnJZT$s'`3ljK)2sC%Q`ONl%%m+AfB<ZES]%g\/blnS.SqPJ-Rc&(T\7BD(66uLVP_I
%!(O#$GFrW;GPfVc/0jb,%G?\O)MEIKL(%E[2^b\Z0F\:_dlcmZ2D*Q)/-N<6+O^nsRfR[O9u"0hi\6/^)Gn'IXMOm1O7u9<O'$n9
%4CB,ha8kXb6/*"gZ6r#*3EjTCLCt;^5].W>^+@[a%=nAHHjYC!@+3k@b9HXA"CD1k#!c=i\9^%LfF@lig1c-=$RGd=)`pD&NroB=
%=<Q2!.k#FX3ETnW^f_Z8ZBhQpglMjO:M7O"n7UY,[$P1]fjnIE(6IE+PlZK(Cib6"*^^E1_&+S>%:DV,@%$A1!R`1h&Be=s<6n0M
%/r2A9^eq=$#[=2.c/ooe7EO*>+Gq'M`8nAZV*\?#'`tcfLeZ?@,X=)9Jh\%WrX('YFRo1!e9@G6h>lDr*^E#DaDQ.fBuG^6TkGPR
%%)U^#)9Wso/uCM%:loMsD.#`XNQ6qZbbAerik%*G[HV^7Di],3@,+%HD'9A4hF.SK,mdtDMb4R2"2Y&8"PSu'?Q#)q-p4Sud*]r]
%K/BgQ0'f8TJ(_i>4U$rK>R>\ZNfq@)f20>\cOTYYYQk5q:2IcO/FbE7AthE)D+'?jYT,%l&C]Vg`;Qq]3kA/S_`fGQ)n7nmJA+B6
%JJJKr/_7PJTn,&Y/!fUS<;A>41s<3*jI!=U]..'CRfPgMUt9EY364\l53R?GY<5PRW2-O2JaCfYP67%-b&#iR.'l:.Jo4Ac?=9^f
%&DotA/n!e>A=<W/)gD`*OHU.tka<.("9fCO6*P)(92?+O#0nD4*P9`bmr<J5L:HK1hag+o*VL4M2m=$"a2<$!*20bLXIUA"##HiD
%#4bc-'Oq;O&@a>@E<OMhE!V-,*eVE42^RT50Hs0;=jXkkP@t[,"b&lIQKb&=@X'"31sndt#XBLj0Z;QFZ$UL63?DiX/fG@;%OBjK
%kcso8*[D-$dQupk+ZGST9((n5;XXRo*D)pB)^lDb*(_7S>trS+"=fRE3TK*i!dG2YilmU^i(<ct66kK3ZLGmP:f'+]kXLeO@6'd5
%nj*BW9)0?t=`G436%<"RH7A*S^`#r'AB&D:'M$hb!`-,#&8bT%gnd?^i'I[5Ijd->)X1K.)N"hI?q3:r=N;2Y>T,Z'B;#fCF)O<#
%[VUj_J1T3f%RKMeZ6j;oga>W@#=h&l+\P'6^ek4ad9H`VR)e4gB6?<d"R0E@gm_l.j(bN.66Sr[,:kQh-E&cU>QWWHm*/!MM@2T>
%$W(aq,7,#(iQR"KqoB7i:eYFp`sV^n6!_N.!47J3!I3TP]mDK`jjfJ&qE&j,.%_EX`u\n]Jj!GMn)Q2+CKP9:hSJHmN6+_#UE33&
%8*C%A=+Me'(6IGsMZ@ph`'*7eTMF_1)c/U&1WZEt'?(.P!K`'n)6<jb3[kACrojP*1_DuU,a/e'SK*i8A.uL8`q=GDO9^SMJ0BqB
%,M5L_huKY<[d4=OD:%Pfdin$E6fl,T5aR$^G-CmPebjl_Hn!)$?q:fo%/=J?M[)&\cupYSY:d\2U1$-h&.f]"M#;oa_bZ@8m\5-O
%+GN/bC[84:'Ft=kP66]R!nsD725Yhb"3IfYJSDKcb!L'O>Ta6DreW+sX3!\Zp&PLrSHH/?@WX4W.1-R7K<@#q$OSIBZXBf1ULS8t
%PuNJG(W)"$K&YZZL2.I]>oY.C)UYLuLAi1F5?CDEV/*B;(;7$7RrW):n"_\E',aM7`:]^RT28)e)g_9*l-Rl%L$93s3Q'Q^dL2,R
%P"u.1/\lJFX5dL0=nFCrJ;lOY\?.Qhd@>0fVuZ$"\:R*.GH^Ef\XO.U4A>?3c`1JR*!OM*LN1`E*f,J&f*U>b[>etrd-er=5BL'1
%Z3"-]7k9koq:V\;^Z@7=>D?s@>Jhus4`pI5Y%^PXe93G;j&l[HL!UA!H?uK1%g)t:]k><5]af1QTpH[@mrpp,/PcIN[KH]j@H:>e
%k(\hH!+_4A!Itb'<j9EY'rD*<au#ZWPNUZdh).@[kX;0W^hUj8PH.i`FH-Ze[hYIJJm+qYQ;gp+_]7I_[XdD-*:PX1(J)+U49=@*
%kc*1UC5!kVPgKT_nmulHp*e;3,YQ]RpFs%p&.'WcToJ=S,Y`6\^r4@S2%hP<0IRNbHNTJ#QA:YiS"8,^She@J?pP;GeD/;m#!>Qb
%9Q?Qc(tf1XOrH_$Q3*3VKW#@T`uEuHN1!c\HKsQl!"0@Z2L+@(C-qW(L\lkC/R'Gc!G!LG@=/GaW9^/]C_noZJ-:JLP-l8:&eSf"
%ZSdDq*YF195U-e"DPSgMKgAi-EhFW1QI]TR<a/[lDNVh'QW&H0[V](][G/:O\=+`pp?WHdQR`m#$F]TBpM\$">%'K<I)>DOB;pg3
%L.i#-D3[crJE!e/"s[P7*ZcN-)K]<uQC9/cDs3V0nV_f#qch7\0U#6<91\*/-+P96[uc.A&(AaA<k(QG#gcBJ*+sjiQ`\0t%8=^I
%A3^f*Pakto#09IB9^cYi!Y0rs)VQ92&+:&dC@*8R0I3/$CN-H<8f=9>_BM_##*"Lk5TBEf/"/N@'r"Lb<$8^\M`g#Xk(U'HJU(<,
%]3Yg7VSn'?!ZDPTlo1]S'J?^H*.W<DW6\ksIYi^;]HC1(0ID](]PnC`(lO$6:ac>I`gqs+HL)-c"_;SVnK:fcr=_9/3lhR,.'b/g
%%LZtR+TdS1,-W5H+kP/T#TP;7C5-j[["AH*ViX&Fm286i`I;"HOXi_iWC().WuZ-H#AjlWgCD2CjK99q_+S?HORgNjll)b[Gi?Ai
%EWec(8Bl<7Td""V@?;N("o\A[K#])GNoa-8"?W>P)6Wn_R1^3W`>GI`igEFYH+LsfYroR1kfkD\[#7dK(]n+J7]oH3TODgI7#Q+P
%+gp\hOW_#n7b0iZ+Kj<\!<CRTn2`*o`ir_e'_MeAiYYu'2@kYBHgNg.XsagKi]i/?VYLjG-&4O^6>/he`$d14'%@G'$0IL\O_Mu_
%fQ]=<T[_tR6s'f].9/2Z'8;</<17'FM(K]u`PeFR/S2e,.>=K%LFn[aW.9Kb"@]9P#Zn#214Y"RJA^Hr7sT\H7kQP=10SL^7=cb>
%-F"KF'fjR6ciiHCA*O9(,qQ=S:piGlm^OG#KjaLM1_LHR4:R,WNI93N9PI1:TP[-TL1b#9Jr=XNZ_F]-FEAuUA40WoB;Y_U6jRL7
%$1r^D/^K_c"M"'QP:N$u9_;nlH1mQG1\2/PGIbq+=+uQf\dSY8AoO%e.^Dm3=FmH,@,qcI17PQ[=P]l\7eM`7`5V48N'2:$X(XS!
%g[:3+_`Z:"W1GMA]X<m#'A%uMTN6eT/b9brMmb4*!J$Jm7e+p2'T7'.<JD,\juI/:-,:]tQRfPe!@^)5PMbGY-DdM*&Vs^up*O<S
%@;&]o(;uK>W7`f3[Esi293]76/jM]W"p\o33bSD$W<<NlHFTqVjHB/QXhmbB.a^W=[Y2SDN%^@;$DiO\=H+<FnVf1"Ne(dD'HWU)
%+CQlgV8<jRWF.urNYM_'(Q9TdB4@h]SJB&8T'J/lYc4K=.E+l(K$H!CYd6$G&2cZ#Ob82s`0cL#%8->lfILFDNFr9.K,<sLj+bCk
%;o^FD)>'b]UFRJjo%iE97L1h3dm3cDX`Fde;E8'=@rif0J;oL&oBHbDIdKSrX>W3k1`cs\pYi\)g+3H/I[VUNl[%apES?+KU3TuF
%lh:r,YfLMpRH2E-bTtOr&Y^V`XrKKaJ>K\K2C+T?W>!/nAuAHLCug`pR3f-EkamnE921a7UcON/@;ZbB>iu`E[:G-5#o^/PRotAp
%-VVG=;O=1/(2Bd%mBSXK$&Yj>V)iTH='!hugn>oe0"#X3-0A,Tfa^hnGcYn"L><abR5ecJdL*2a#7+sU&r2Z)h@4\HZTA0u/Y)6l
%k`2WQMukdH)P:>YaVF-0TP,0YM<O/oM(1K2gKc%GoT]t:4"-&@'rKUI?>-nObONY8$Mp?9.(D/B=&cOUcOp[>"5Q<I1^ji?2IQ.t
%X@0!8%gT?KD6hH]H`"V*Xsr$-W[Q(mJL=QeN'Xbj,N]8BMnTI]*A!ImbVF1*]jV'!,3dJn'Ej:@-]Fsq==e]cDFH$HM#u.g*L_ek
%BEA0/\dT:2nc>FTf\qZn_j9BAR%`O+TUO&tSk("oo7b#d'%nmO,#l^<j'q-\NU:*TXNM7+iU\fA]eDEUd:*dH_;j4;'VRE[<^s&^
%9>V#q+:X94M]V,168Kg<dU=L7S9/e1cA^L#N.d3DE)TNL,"30g*(LMIJNZge:Vm:a0l1alEJ=RUBj9#$%P"Y6k6;>14l%6=KTPB2
%4[djbW2H:j!W[&-XpboF$p0!\_JJ6BX4uSP6b;i+9h]H!1^ass.Mh11Q^5\MnVj'W8[*`.jH'BpB\A29-5pdM7g$bk`#['KTVO+X
%SR%')GRfQ)'e9##8J2P>V?RhsL]^P<R)4u7,n8\a'F8fu<$7R<8a4KcOG!_gcV6\kdRY1l%`r3N$s6'^a[*d1Zcs2XibS.*-"JG?
%:B_IX&jkf.jP2C-;lGh]/XWD,g_D1#@?`(_DG*?0'#O^K_^l7B\]aat:_dB8$\NdeST$r*0_qpqcI1)$)(8cX:5hd$[LlgtJ4Zc:
%O]s(F0d-qNT]AGo<Z\41C^f2Dhp>VRL>6iAI=^3^^())Q.^2lWKg?(LC,>@b"L<"MBkqBtTe/gd.B];a!hF8Hj]l63PYEmD`C19q
%44:8\eH1[F0G#sh5qWD8:VkHbku2ZZ=<IG['rEcD;#&"Xq-i(*>7&gI#khT"7BU'h':hbZdaWfs;1W(1*KG4b.!7B/27AGa!u4fJ
%qQ^R98(gGPgd-_db4-SU)C#G5;^.Pb.3m`DhXHaT0gIuiG&\Fo*uf8a1$\\#S_G&;3t0cW<p>,j2T>cK0=l11TmN!ITGXQc[e_/K
%qoQQH%0c3hK*cf-Hf6dp'1cD`"mP5Skd,InIYdr<)#MfC:5iU,%*,Y,*9@hfo:LH(3n.`gqYqKX),MW1F]e$`)'po2,JI^`>:d<]
%lSm2#1/T@LfU(sQ%RGs93Hcp1JEMTjco.$>[%\"s?\+[(40I_?fH<sVCC##V+XN>u`!_>X0[gNX2!?RTg\+BgG8RH4C'P0o[=3m1
%I]'8kVgsJI%])DD%\7:L2]@q>Fs.#KiB:4j57j&iTnE/oGfn?#+p(Fo>X&&dQE_%^*OGMtL`r1K^ha*?;AC51_-Bi$^uHTEO7dBb
%qA*9k8\8phH81LOU1bkm:YP^N65h_2%*0Q06geNSk_)AH#3M-]YL3GZW4j3+[#_I.7n9U#%laj%K[:f+EXGDq<;(>UV!7df8kIA_
%QibW75SW/HYq(dD;/jPuT+S@h(U\[X:-/Jhk@s.q(EF3k0HUfsRdsE@Cl$,S0FJ]mUIBL%^f*KFX-M$rYW%V<IfTbC1_#GMT:q^-
%RH/B,Sk%<N<)E@k2`_$\dS!D4`<0^8OSh<)k]7Qo2)KS`!"hP]ZtnS[/NSM2$`V(<P?V-u1"Xp2#9.nkMfXW7$H\WpAX4o^Q"?p[
%-\]_iUiREP]5]Xf^goIC)moO!8Y[k&+^^*-HC4S@E!_7`j_07qEl%j<3u96D1@PJ_D/+hq$l3Nn1rFL$AVOm8rY!G/6a&A43._BW
%kaD]lkdFOTO9-oq+GNHQE",!7k%L+uLH&cUDaMEJR,RTE+i.mN_(8bD-!Wk>gpmqfB.\&@V*PF^1`k+%Uc/Gb"Y)cG+dRX5b")7i
%nqLNY10uMO/Y2\hhD=6PPt))]]VfP3$S@^4$Gln+!Fc@@'7s;%=n%.aH5bBi/P[J068Ge`Hlgf><K85<fTr1T]g`2B[R9.@c-uDh
%#K+0b>W3A25`.[2RjEes'+ISS)tb:hB^9\5G0%Yl6rXF#@K?O?9;2eVSP]7Eqh21--!^PpV/8Pl$--iu&n'h>"KH`H5`&uq"OiJC
%F3J*h4A@(Z"-"(tk/`aiSn@SK34dDjQ<[6!YSrE)%$epk:cnqIY&u9`70uTq?/lQQb]kZn#`j,X5P5SlL8?\HCVo+HjJ_&?UCIB,
%-i9Ouml2JV3HW%?f8]3HM.Lr'R088i^i4,Gklace&H=jMFUJtaQF[c:60:_`R$J(G]ZO^Z7Rrh/k!'R2+_N`&47LT6)EKViKhcIB
%!G@Mm"t?pr-,+'O4_Yn0_t46*b@,fm0HlEI,<dE`6lHoJ&9C6E<WQ`fao4Y*!N`MedK>WP@2+N6<KF2gcS_G!7]L5Y<PBQ81D*3&
%i+Rnha4c%6C^lq2'r(09M1A-`pW7f$&HUR\G_M)J43Ht]S/B7*YrA4KgNb?E&RY>l&@p"#LbRf>O9"IOe!*ZP$IA`E]th!t5!872
%D`t]p63Y^j3;^;oN@T3A8\A,e:L)A&1*qbs0!R69a=1%K.t4-W)-"J8),pc6)03QG>S_<!FIOGpn<gn#8AX5YP7gM^4lh<7fM9mI
%VHDG<)k1Utn"g!dSsCWR%IqLK2$\69R`l=>?k]]lee/cH,-b91:^J1fQ[6Da8-P1C"_jk@50Rqa_B"n$/sk3)]>kNpn&pCt-fe4)
%G/uFr-#kN2BQV-1X=CHp%81NDL&;#658>AK+V!-dWAG4&GAL&3:*f=<-^15U>a[C"2cnG\/^iJ^PRd""1dAQu#W5`T$6/>McaE7m
%bB+AH0&O<1Q-eO0)___RHZkORVYeVHjLN9j4.0u?WA^dm9RS[dNoO%n79E*k@#h$HMQ9ZIW.A)b@*=Cr0$4f3-Q;QfZHu)!+j%?J
%gKLBg#Y2lGECAM</AYFhR$1"E5Ttcf1g<p=W%6]aL7X=V#QcflCj%P]k"&M$$nY9\F8nC0JM&m?Xq@F/@U_<>B%UtL7S^h<]FtSZ
%-3oU[)Pb[D"QCMiEMVE*XG34C-VN3E<4c0SQ;GqqFE<A*@(^]CA00)26&1CJ1`I%.?t^0t8@aq<NaoC^D;#1]h^/^@47bSk,TE<I
%;PWC,4VhL3Noiq=+0_eB'mEr8&'tDnh.a<:2947D$89(M=QmjniK;=lY9p)mY(Y<sD(3QN0Ns-`FD@6OV(]qJ6R2r2dg<rWYDSuS
%=(fIK$X66/d#dai68I=ZP@5e40h\+\7Pr*UWB"Yt)l>/Sc:WY9(X3acH]PKn9d22NVdkAh4[Z5'kWUBTV^Nb[G1MBr>%M`2/b]l8
%!m7(L6C\49-s^dZ;C8@Qmj4.)FK8oF`Te%D#RN70GZqm8/>b>Wi;q'#OmOu`Ce4uk15-*qgW9WZEVD>*mBsah;X-<G_'/7^*jlTS
%'>g:Zn`RA"Q$eMY]J2-k:m.96jg<4`(Zo[niIt=:.1>W>.'kIaiCA[]fq-d*RSHFZ/Km\ph.]GPL'2*2)D#-M8Z`RkRA%58/AVET
%P$2ZtWb/--0pr>L<[2[H4AZs9g$/25^'"EDaX!`dTH-NK3hldsHtjHAOTC2\fM39l+Ve[G]@SIlKdE+%MNdTN;rX7fpXh3+$gp_+
%/fX.(L=0aAGV"^\G!e&3BLE6**[T?F+l79*mLCRnJ8*33+DH@6/),%R!m\ZF$4E6LB'6=?m_'6VrPkNfdbGg+[#J--=D#WWKM=1M
%-jA_KV'?pWdC35io'eIKh9pf[<.#)`_mu:iO)Z\W+7Pj<%W^TT)t\2tdV`7KZo#M"$55om:L<]Gn;\\dp>WSC7Qo/eHq2!n_-oEa
%=__t`XsXb<CM;aWVeW<c;Jn62n`.ND>[X=Poo;`N0U'1(!lc$[ZL`[-*4.hA>L7q/b'VAbgsGM+]306/Wg30Egm/?j$sX0%e=V$b
%@#TH,Pn\-tH5O+I*7fL3+tsAqR8S7ng7(su\3G!EbO<KVOUb%l*TL<cH)sE\\n!5nQ>iJk&f-gu5!g&YFL797jbAI-@M<18,Op`)
%_?k:?!7Sh4<Jca@KnYg5SpBhBQDPgd,D8e=T4'enNDilbKripuS-[kmXn49E#j<TZQ;$mh9p7l$V4)"MV.db[W:,JmQ",st@_@Fu
%c";4(\PBOP^3(MbhK2gJ()^OfRZ,EWU$_AuqWNJqm*m$>;kai7K/*^j*-j7F3=HL])ENKkR92bPf.NCf2cM8Knnr0ibbHBLs(CfV
%G4\>2/A3FX47I8E!,LB8B!&*GDe8uY+H6LpF]i/iAdT`_L$n4?o'PPr>20$D":l*'?tRu3((r$9e(oLp1NTm>H`t,K;?nnlX:hBF
%J=$JSWK:I36:Na+M^M:2eV*AX7_*&@OkgogqP**m!$Voj>j+D_$NeXRe,3TJF)=;SS(VN'Yt:fRQ+!XLZ0Om3"S`/$b4LAGYJ)Ws
%4DtGl1Lp6uQhs)<?'rr?Zi_YhQB4>H?3rqa)/*1eZ'!_&`kEd#H]m?FO*\>A*!Gk"gmI,!e:cJk`dG>%ph<*Kau=Tg_)2#ATmu]W
%m6Y!QRRij8$#57r<9LZ3i*J]-;[B]1#AL/+R<nt5`"ORha_D=T,r6?gCIrXfQ2(t9cL#1-\Y"o*]p#4A>3/cek-AR5Y"gK:iIIA?
%5Co^c!o[Cr1EX@$IUmos6Ll(_#m0K*&jF/O&DFRl*&)93a63<kh/BYr+f4RI08WO6L='O0=qs'91h93ZTT9_`(oCog&`\sQk7:8W
%nmt^<To$k,QD5FN4sK5JKD]0BPhJ%M(T*&@X/ELEEe"p?NiiDnat'Emo7fQ$et-JmaIW:$7I`<+%ih#JQ`"C5%EkmKBS#,GZ\R_@
%`Di^G.V[g$XS*hHoVWA5-T.b(:E(kg?hlm3E0](':>`9mlR_V#Y\JeS9rk)BJ/%.1.7FKM\PZrp_CF7B+G2U(Xjuaa4W_fp@e=$k
%O7ONoQ6^*1^-C:3ln?6%[?_1S*B6stHZYUn.b6)Nr@2T8/]Pk?9YEkgba\ToYCU&u_bNkhH!V!.L8,q&!(]lJ3u:+'8+7H'25#O1
%Jb(,@MdVV!+?9:U#Cl-!]"eV.c;piSX[ql<(gfu:eFl^q`/R]kFc-64f'f`\8KQ'4?s5"Pr1[IH%&!8DBX+kd?PH3O4^M't`!GX>
%D9PMt+^8pdHRoJ6CR$3V4Ii"^YDRRU$X,A:Jn_:R+lA78B*Ru7JGGPX,MYL05?E&*qpT`g9">l-m#`)D/JJ+L]62r]oG.82gqS);
%leseJm#%MEAl:iA*'BN3:sV_P]Ho%b5YnDq=@=8<NfUCm>UNsj*m*D.jh7^F$HI6>6O6>I#EW9qfpbm#CEh2[:F5k%V=6dWQR,''
%IZZAtqd%AKP^9J,`DqPk<2"FQIsQ>l29q%A9u+C)Rn5>AoZ^R6BV8:f4m4bTn`/'BpS77(bkqhY@,q]biGRhF^@ia[VSd6b`(l"j
%Po?dB=ILEsXOApp$4M[?S1N\SFotCmfKJb5=_'iuEOY<36u<<mEa7(D#g;/]Hf",mMnIcXX`je(%p-($=:H/i51LlX#C_q9L-BkE
%Le`Q3&2`K*NnM*N.4D"8H2rDo7KO^jE=#h!`LJr*%YnKoie3#IPL1l]1Fu&.7"U:sNmlXZs!$]*bA=Xnr,<pq3qE#U6VW@Lo/Iig
%g<1b@VM!.(`F@M`?YS!?P\[BR^47Xu"5Fcj@01dmRu11+aE;<o.[X5@#m@'[r1/_&!$5sG$KIibp0s5->C(@=oVV/l1gh7dgpZj0
%lrPQ4MP%&\ncs.V?64U(6mM?2D;;8lG\;t:\ifu_dZ=7jCZ1R$WHW>!ec.Icc&@t4hmqU_e)0,rGRA_DrZ_0ulgbaeF.UXS$!nT2
%Y3jE\&U-?k$3,-q8bVP<jXGRHJ,[_lpg&anY7TsW83$0m`W+lSq-`lnrWZDblU#iY2V;g,eSqko?];H5^t#r]kf`"i42>aQh%m6L
%Haa0/MFd>^$QpY3OoDoq>V*?g^c(%d!>jeQ!qtZX>JS-_qt7CJiUXP:[t*AFJD[hdItLt@C\#edknBPENjbSR69VK[#cS\-[uFKf
%:tc<Z1Ui+1c2Ms''8-;?F38sWr\YSMh6s<Lhku3/HtSfCLsNJu-XZn&q=Uf1/\HMQg^gr@q58u;?Jar+H5BFo]BW/%Lim!_A07ld
%;nEm.r7=84:@MKSp91XS`8q<;Q``Oe(>U9KR;mSA0Z3k_;&@FCcWuKr-=%[8C%K5D]1"d;2WljQ+LP%jmU]M3?Sd?"hLE'o_Hi=T
%LYgfj6Ug>;'4H_V:'qtG07sfl?6pY8Z/#?2NA6lCH.8[u%q"Uk@D)JHY8[t1n#6#5)F@HjA7<Q>Kf:A5[0`acIB=e4"[+Q73Y`\S
%<Q%3)\:QdmGE(cJ-c.Q^r6\;fK>E]`rDnEM;Q([&H,mGEHXa<bE"q\/MY.V*J`MMoLEgKMW').ek\GXD.\-Jl$S"G1H5M29BgP,T
%8tCltdiJ;gJ*1I\Z;o+D.D?rO14<C)Un0H:l3aCp_Pi\?9/L3E>XK%;68=KP)b#UqjNaWYR:GI>H'&(ZF<fHh\B/_Zk;lmL$P,Lg
%OjR6:#CS[ZeAYCU5<B`?gUsGZIFPl)X!rL#R:HC6?maTj6=[/1"C=)$&RZ%*+"J7^8TMq\$+3]#T$21K(nVre>le=Im5).>,Z.'j
%=@k!@&T)WoEe6u0fSH07p/QZX4O1)#2tg7bep&UF3Amcc'O@2,Equ19q3\%?fY4reAO".)Q>F.<Pt>mpkY=V>IW#.NZH+JJ-&Qad
%2gXjYBI,YRH/FF-b6&rOI.cHsF_tj%8NNCGU31GsNMs#`S5g7FJ=\B3ralE4)c\9dNm<(gNtrOg3,&O,"cofQ>XO&_nin%R"=t1g
%E]t<lA@%!J<AE=M'&+Tu1H?#\d"55Z-\rVca_3HjU.WMWKMH`ppJpijQPdVd&Z=i2Uu%I;b2$Dtg%(-iLaq4t'T5T<Q\!>C70Ts[
%@tD7<kFKWSUQXt:L'L]1mAhI"$W:J;,ioN#1Qs>l,KSU$Z>BCCh\]k&)UYSRf(.m,<kKfg*b;#4#[4DGMHjh]Kh<0$&:B89L!1U)
%$(\cH_ngB#*:dYe&j@.rZBp`7n-i5Aa_g4rpYi15]O<C5_NZh8W%L2lWaiOUYo&(Q70Hjt,Uj'j'bKeW*o:)`VGBtlYdIb`_5@Fa
%<L226EFi-TSX/jU;rY,4Hdt6.d[G5,aOSN(M2p;U_]:Rf\DocqcN6``P!O,e8<3t<,`;]r1p/`G"g3<p,T7VX`4B;1m<gInUhr+2
%nZNE943_X"giq^m&!AZjDV;%"lNT2nEGaISVVmU<nIeTticR6j1V"t=FOM5T64:j'hR7U;]+Q0<-nJR36Ho$?^`\ZL't(UpFB@?N
%RZMIWpE!Y/e2AJ`'F>#!_t*u7X0>$c[Zc!PKPN_u@t>O*-a(FJ'k0fE.hZ;@qYm/"VKc=s@IcnD'biD:oWt,.W[?4t]MkGj$sLdM
%Y/2X5;.=3H_r)hXEu>ahfW6D:X;jL)iOST%Qadmsm%fiJ:]<(>7@+FJ38=qhr@#DR1gtJgO9J65D58@9>uq\hYMDBcb:#C?T^805
%EfiJ4\uZK@WD_pJI>![e0LWL:MG&6[->m'Ke2flX!(gaGe`S1f+gb@/[3]sQ=WU&3:eVr3c^E@oaE4g,N\#hEX>)PuIP+L#`Gp_-
%0cB9-VHG[E-S%EXNf2'(&8BI)l\@>E>Dd\jW1dX#-inmsi9qc:;>fQClL7AYgin63m.7Cjl>*%B*m5+CZKtK$a=`/Td:4c*a$NIL
%Ph8i>(U9_H@X>,+o_<Y1pr->5!QX1;VpEBIeV.XQX8)B(.b?7h_;&jDh!j#JAUp,"+MQZ02i'IT8@BQ[,(h<C!'9n`_`^lF:+kA1
%jTfd>?`:pIh6].o)"1.J'9#=\EGfHKP52`JEg+Ef.()Lkie?p:O,Hj+j'VRIDh8KQ[L7%*cp*CL1Mr-BTE#Glnj?[j:EWDdGghf(
%!il>QPChJKT6o^%gO=okGs9,M%=G7M^OgN^E13fcJGq;<Pt-aV=EJiOe3/T*#Y-e7@45Z[#e(#fGb+Hqc"ZFq+BPe#kAB.a7#jh*
%:GZ5i0"5<p1pilbnAb6tJ>kG!i@CtY#5M<.[I_D<b)<[."\s9+#Z,E4jX)A=nI'fH`om$Vm@ICN8D2mB-#fCeM1j#?0\^H/jk-uJ
%_-Ncj;HFFU$[9]p]8Cj%W+;2%,>XE>5lDs$)LZZlM(De/5$d9G\<>C=YR9J!pZa84Mk_W3@l(a<].MFee3=(I`$drfeY$T1*TBsb
%=a,u_86+2TS^6G.;klei1i=eZ5ud[q2`IWRU"tic8+ku$njk<%Nm_@g.HCBPod5Vb,V5EGkgI;.`o6Ru;+FHlYl_rq-qJ;5Mi[@Y
%;25[b(u$e_O<ETN<N<=H^1=S[/!PXNYNdXbZQlX<.IDFn)qkn*7%eF!gm7n[OB&_;P#!-YR:CVdaZC$.*Y(YXmZp63hL\"#5KY34
%9Z3m020o9Ghq3u.Hi,<+g!:lAj9q5?#i!'2Z/Hh:M`WR-nS;sY45VsM^<6Dp[.73KDo8kh?CJ9rB1u!=iA3#^^>;BXi9o(^(-EGs
%+'sU'?b=JO@,tU?IjKtEr+I$\&\_<jl,sjC%&3MNU-KfHErroY*4?50qXf1[cHqb_^r0-W"fkW0W]<'bdVOU@"g%@6!9Mo6P),d0
%q$kmh)5jG?<IfU2'lbS&W0X#<\B2"?THo//2$M+\+I7t?Jk\I%W-Bj;p>m)lE0=(V;cl*>[=o#`4SWA8THhZ+5D-7mc>%pIk8!OS
%AQ4@)(7i]fHhi+E?@<iF&1T#s4r,kH^gnE,ERD-EkqWW>%>2>EC5QMU(XC!>>>k&qF1SPQE6;Do2B55g1m4epojH:Z.dn+bCeG]:
%nOu:EmsLn-8="kFKm74Spc.Tl%u[Jd$Ua6"8P6V^3H@^@>3rF+_OS#nDLZgU`kDet\m2Pm:?ijO(Ld+hU8ROF7h&,%/0[UN/>YI6
%J$A:k.EAm8dSfdr"?fJ=hPlj]_lS4BM<2%e>?g.HfKZ24lZns6M5hVE:+H[2k9%nQBTlIZC"do8%s"0b`qfu"NZ;E><mML^eWT;A
%Zm&sQT&`X[+k;1dCa1`H=j.?8%MZ1Fa\n;*.B-VK9t^)DTK!VFa[krK`G"qIZBcJg>MNn_!k*pjN%,AF+(ce'VMVdF$R_ZKA^lZI
%et=ItB\f'RcC/;+a!tZ8UI?j-?:XY?FP"KU_sk%NGRWYm*5obN0M$iaI#%GLn/ZuE`r3P;q,b/ddC1'1k1tXarqdJL=GuV!PkX(G
%VEFaP?_MG(,4cMuh<,ZuMBNOQLa*<(#j>eYE[cu5"^*I46;Yd:-8EXE#sCp9>)^nO?]6I[Rjpf?7uJsdE0L\kE;cUO`0$G+J5b<`
%7(RUDHo)W<6tGYeA6H.+r+%`/,s)L&1UR?#9SX&6`0soOm/ATOMT0naHHY%4X&D5V"aGfLDoYVm$GQMGY?\%e&0tj3<EA*fkQ<uO
%);ZL37-Ef"KkW$n;`IdVNskgFk:\Z3J6J'Z,M3"pH7Sq<jjlj$5$YE?^'BL[d5%NmIeHbk)6OUQBR85BG8Gk625Ui#.W'mZ:2^TI
%/uc.B0=9ub@'tX/7?Srqp-gS<@1O9Md-OQB9P&*8V+q4n[/5^_;BnSqjlas4j=`Lo7R*mS23]-s!Sh;T#D6<C7#C:SFjMV_e+9<>
%*e'qI30mRA*+(-pqU.T,<G-^nnM4=gdG"#^cmMsN?-"`@Z)Uern3\3N=.c=g./`kN?[Y,^jS9D9WUaG`SY[4PH]2YJUQR<onJJl!
%m5V7I^4`bm_b-#VYic/)NIUku[Pj]@r\F5^s.=0Ts/O9;hT(;@](4YU`f4uo$KSo#>dN<PCFt$Y"N0j/^.5C!a\+uZ;rVnI+tLaF
%4aLIKU:V%86hK*d\iuX4G5mR@Q]2cHf!a\C]AGcL]78(srOuDdm8:<<MArT^S5YZP&P_ae8<SIi::&tH`YLK9_(ALX8SmHM(bCH]
%&)uUXbY#chnekJZ%spe?kY8AOT(mHH`/fTfU6Tkgb]K[l=E'u+S5pW!l$eGn1lJ4jFU]Lnb$mSYC&O1>an/`0Nh?VRZ&)tI9-SQ+
%6gXuo=P5G,!L_RqHe3dN;Shm5dg0pF05hnUj#7;,:G;-)Jh"MI&.3Jd7#\PdXSl\)f_@'g/5ci'OX`@<dW1jh7/-E#pD#A.njF"(
%D)chs9uI7JV@3N%LpF6Q3+^PW:-O2Qf\2RD5pnkVZ/TkphRQ?K+:^"mAiLgTc#gICS2NdW5-mfEA_Fhs13hWb\iJRbqD6NR=cX2u
%F^LJ9V!53eDWPUaEt_+eIa(k;*o/(H`RDb5[1B8LDAo7WQ#ZUT([^,Rrr!tQHLM/]Jfl4o$#`6_?k$[PN@'/.m"HlkGIPRok*7T+
%GT"o`dY#JgKA^1,(,d`pQjZt'<^M&EI*?G\YH-9MWL-C)ot8/6cfV[[4W#5n#?Sr([mC^%/bfcD>U7RkC,Wu\\+WrZaXG0CWY`GV
%kr0i$e:]s^K-F%@N?$/1;[I<*U66CK0t1FB$,)<c]%sG%nVZJ1(T4Pr?cTDX2Kp8#&&miF2PcDMrn*5NRrYiY`5QDA]BR&.U*%4W
%.3WI7*e;pqA3f4OZ'Zl;LbTmDj4&Wq\\D$7(U5JVT\bS'V"ba]0<5TZ.RNII.P1,3[%(;:M_CPW)KtcJAEJhOV%&gOPADstEfY,q
%cQ$eg-di)+VcTCT*umep$F?%44mY%P91ol8J2'jB\qH4eHY>ll.(1[g*j'bXJmm?;lPTi.l%n^uLFLLEO<3^>5PVd$a:V,_,ZI%Q
%[dM3.Id"N]!IEi*^&5tAE0pRb%CmLKXOmDBm8,LX.V96i7=B&idp3@q<)?+5%iL!6#_)KN^1UL'$#rLX[0^@WM<fuT(%45C4H2^=
%13X^PRVKAj7K:bNJ3`ejr=\*U'di:aK[<5uX3i'ArV3qTrRM#>gl6&od/idHi`bDN0iYB_[B5TO6mT4#)X%n"hU,gbD)tT/Y,';9
%SStTTR%RVXjSLVXo1GW=o$jdNG'8rh-5")nZ71J"J\CZlDk\A_J$+8C]><:W?.0Q!cm]609lDhGGAc6HA'6"Z8l-_$a'Y.McG\AE
%"jaG?[.-WO'#>[WU?$U$SbsP&4\KjuJ:m^hiGJ&q%#f)"at2q+-[0B@H_6aT7tdYDB5@7TIm6K-^Y@\DLG2<Rb1Bhjd^U3,&aC?/
%S^o;s%N["`m-^]I/%q=eP8Cc<bleS,dqduCaFT^nRb+q':-Y?YVf+\Xmb'C.G%smU;6oi-AaAttVcI!KZ:H(/e<5mt4K;H2:"QMs
%bXs)K[A)=,)+]$IcIqt-pC*.FcJB=@Y^UAKd@SiSK1W,(?O"QI*6).M2\[m/Y*kt(BmJaN?G7A;Vj:ILpXCjtKB*YI13]ZcDW*L2
%m8)^lZG^MGUOau43N]J]#=SPFr09q%`e"nD1i&g=bM!(?8@I#":/e!P@7t:]N"VEgE]BRo[W@3PSnsQbOq62mT=NXP.^4;mKQu@!
%jRi8K&M&O%V#<<UMpt[^$*174i[n_[n"H:o/d,t9K44"%j@DeN8)i$_a@CIU_`3]tnGm1nZ-.7Y]I_fYe*Ha\F'B;=V>]Q64JENj
%*7<0FQ&:@=?Et1X,DL6Gpu)pd3qd1]2JPs/#dr"<ef7o;oQ2A<iFD<+q5t=uJ!g(d1n0[F*J'D=KeY*j&Ou"2GCMG:*97r7p+"S.
%%__K-DhKc@(Q;3A]gb8D)DGr26=lm+'Y/2k;3Y1nTfo]Oc>no"fPS)1>HVsQboso#[]I>R1C;SZ);g2_+u48mg@;O]W&?JcicST=
%26+A_KNPZN&8tlBq`7rMjJI"dqs`-[&.)d+ojF#!i7Y:CJ[dN<8R:D8=E:?Nkq,+fFF/+:VG=BCZc?9_6urjYZd5sb0UWOiW7F6J
%>iWMW^@gtK@0i:&_r>DTTe2R9;pmTk=$GlSI^d4b=`_c1*NN9kgi.LTIk0tsHppE)no^@/Wm$W?q0gQQ=73]_^'C8c7P@I7M-H30
%,,b&=-R9#RK**.JDfNZenB(e3gCC_!4lMY>Yq5chNHF*S52k[Qlsq<kUsRU]0-!Cu$/h8"+s.i-/-7t8GZ2pHDjmpN+_W.h\#Xu8
%l<bg'o;Z%"KG1_/<;<VC]u4od\@mmEk:j)NEEn33GM$pbmNF,7#X_%NW$r^&c'Fgj_9-6+.[ULbp9e;@'+lAF$#T#6lcs)dPUCk^
%\SaRs<lL'$R?F#Cmi.KUlg^"b*`5BnZ?D-Anh<jn3T]mS;0H!C[H2qf\H=jo.,rGkNIelMn(4U9$U[H%/j"f3qCF"J8'P32%X%F.
%<8[h)&uV*0$0mdn@TU38$1:0P-68$`'jgHKjQ4r;QrA^BcgHI6JX2-)(e`_G;S@$+7X!<0T;icKoj'/L^!l+WP*^D6KlFERf#V7E
%5ji@l<a$9A^!`ZQqV:QE]&.EsWWgQmL"&C9VV4o-*8a4ZXNT\:T;)o;O;th+_8/;tOH)YhN32pR@g+=D`=]f7NgOnRB\2[<G+HAG
%)+Q`m<X9H_2bGJcXHbs9nWgbIW$]DV&Q4l>>gGS0n_!G^]51JXQ"oIPUDKaMQ^<!qHLJT0g\gpRrlqLF&Q7Pgdpc1Z7$PD0d8,un
%X7_G$J"=cKF/JcQEeHgb+8-&pp5$(&$b\!/IT2)PkFlIY8MSdBfNVj&Z19DaJ+j_QN89&8UW$c/Cgjj:VXroh,PsH^V9+:"l<KTA
%`Kjka9-\=*F]]<kQ=]Ml1p:XVU*&pp'tAj=\P_$6F\Yhf,'gH*o\lQ?]pmKt4DT[/^aPQ*;"[Xm)G9Sd>Kr0@>p"Tl;N-B;35i4l
%lX_GM@s#5%fW[;)FM01F8!35%@SS:Po#`ASY*hVf994s1;RFh/jOJF'b8mHc.fH5/PYJ8aY3=7PIWJ]M1T`c$n!O^;]u-,[R9?_V
%)0eDudC3!(QOh^jVWg"-"_$uLU9J6(Ppb[gDdEua/enci:DN1iHP@R3Det#dl%0mm/;c6`;I4m8F,to%XLT+.@c`XfO8+DhW3,YE
%pgL8bg$Pe*k.uh-[)]QWa@&W-DE`O@V\CGj^m>-'"a5X+IN:@2fpLi'D^1QhVO;hQ?8NG7^Mi56-1@A"R\a0Do,gpqoR7aIRQX02
%X[%-eCrqAE$iK*3YVG4kp4XCEPJP>K/S9%.`UY9OUklg6`"*'RDE7EmL(OE7+%@Fa(aTB?79chL1#WMe'hU+DXWq-sA'+INiBYW#
%jgG\l)KpDB\1pF6,Db%q\?/c)'/g^R>(Amh&A7%N@'Y=Rq;D.G6%Dgj\&l]On;2sFg)pQ-,RjAI((tMI6'(AS-A@Tt`?._=,\967
%jAc&c&%eOjR$($`APD+X(-OO)PsPk]-e/BuU%`XP,$/@(gV-"7o:Q@TY?)o_ED1"uod3mQ!$b>Y]lRepU>]tEG1<oEDccUR=?;@`
%-u8Lt`[$'dAVAdTcF9)``*61n,fY1)QYk3WeC-j8a-m9d-!1lJ<8$S1iOmJS0i=.Ko^(*PaI#l(n^%WRbk*!2&smc)DWu4CkEek.
%EO;bH[@05;PDqp^n2=b?h#+UeJ"u3SMf&sdoUTo""\H>RrfO?#P6J*?o)I,_X0+U.Hl2F<P'u5!fJfY>NPt[[M?Wr(8[Y_R$X8-)
%eHGT_h(JW8pY33I0>9>Z]qp(P=(F#8'3^a^V*F>7l0Z24]ZAnHDL:kC+5@BZgbm.3gl>*cm''nXS`sZPAd,tJj!,:C!1h+'$1=R4
%.m1MSmJODMN(Jp4(7c:A5HXLM&UM.(R8r1_Ib9a!_Y>B3\/JF/H`YO[h+<X"8&42)/cAmF"Z:oicn9)0+O3=VVqs*cJs7*&BN#48
%%F%lAM@(b/#;Y;-?2"GOM2dRO&c\&G1in]k&r&E79:F-rfe$-a=FCrY+P;!^oc2&B?kMIrO''DV8rRQXINVlLWZk>N<9(:E@e$DQ
%%IIqdl,"B[WIJQYpgg.4`\q9<"q3fu%Yca7)8$$dej%eY)r_T'Q70XI"N?eP\6rGb%m5P1c255\fkes[Gj-tt1l=om]F)R@Du)Y=
%,\-,6MjqoLRTT3oH4I8Y(*Mr6].>jWRtqdj[E_K"PI#LAP/S`PkSPQm&SdpKmZq1*]JITX//$3.7ifbn<DArLf;5im/.f/@(d@-h
%#)c+ZhiG[=er92f9;LicSLhU7^S&B?EWe'/637cFJZGhG=lKr1IYuI,nP6Tr6[VA/)Lf/t1:b7X)*]F*AW%;#Z+0&_&:j*$%m7TO
%/5qIRelhYC&9X*mEe,\U4"^H^***R;V`tBk;&S8+EG5<eFh^).`iTe6,cc>?1\kE6Kq'g',nMK\hFZK?j[221DTS4O[WkuOTr_nk
%aGFUJf1P(,1=dV5e9HVGJd9!@q,=STVElk"@m774_k2'ZT>&[-hto%@+.K1PM:O#&MBnuXk*QCHD(U\"jM3;F!OmVm6&d[9<np]Q
%Ke/3B.qYi,oB\d<'+[\./rB6-hf0]\S@Oka-(nC\IUNT0@ok$oSB6b(.'Z`MaC4GS$'V?`GWsraS7ZkF+[Yknk8O-?+E*f`8%]=>
%s7skGFNJKuiP=?YT6WJt)\FJ.)ELhIUc('<62Ip&E<tkQ&s+7p1#?kDD>c67VQ,#;h<AI]Y9]$pK6'.VaujcDchh4Q54LgSi@il\
%kN]uuUs69gYrS^J3ZU4@41h<!?'_Wr3P2e:8I$Vkl30G?]+uh0#a=mACF$Z=ai9_SdA<Rf9Y!hTR6dZ%pfp]:k0AG8\Th\.cq&0)
%in<$"L^Dul']$KQ4[ZK[[">Z&a5eVo=B3&LV84.85L]+oTCP"W1ietqG,449d2UPC6Qngjp:<gmGs)EkM@m:]'s6hhIe8;kduqAR
%rTCub`7U0QG#/9TWu(&l6L8cC_/qN1fiTmf7\65=#c;*8&K32?:'LSF`iJbkja_/V`eBSj/NS1.pk:Vc=tPLTPbU)@(bn^B=R0Z&
%lYq<l4Dn39>Aud<0adjH3.u,cPjTkWE2a2&H\J*gbklka3a$F$eC=G#Ua;Fm<:<04_t[kTC0k]kg2'(R!Im;b:jCQ5+af#;d(P&"
%2$M,9NoHRL"^`ojP*Iks6YI$i#sPAr\E4pBdKIK>dTB/sqOg:7TNaV*fBb0X_:MfFQoMuc&F]tES5ACn&\0M.gu;=^A3(=_(K.##
%3)<hsZk[`=Be>?0If/PR^Y0tn5,Z0gl@?m(I@V&?brUP4$)bX9p;j*BA5Y*CceU/38J&'L)P^E(N=b0GK:ifoY`]K[PnZ,`%Ve5W
%_<<a/@=HpU;XiJ9g9:lN"C/0V>@;)TK;Er=V[#lZDW7!!bo]!A=A=K?kcAUD6$MQbo$t#5*5a(OH0Pr:2g!22>I1`t_JsGQ0\3OB
%e>)3@kl&5>.aX1qe,lHEbd?]D7fF$,rV=B`.V74d]EiN'jOFK`cRPSXh\VGf=7oNF=-J0i--&I.$%SojEON$biPiGCKW)fS(?I/9
%*E>83Z8hX_gY!oJb80@$l\-U$V!V!)\NY"0L2[j97oi;r-OD<OCm)+,XN4u?F^HP7o<JlP=oS),3q3B+q&TI?ctZb,+IM,o@?RYA
%0DZo7A7-l>d4\t'fL5Zbl0.,%'#-1`^en)F\"=IT=ep:JLoGEb`&%W=]j1>rLUML9kW:cpRi<%*2@rD<pYoG"'5$,!#[L#e%/uFt
%0Q&F@,o[hF^%L_B@QaVO2f^;!@:oT:qh]"k)M(\.7@FTA?s%a:>"h\]=bLOA3FOt7h:fn4rJQ[mhT[bL$GNrZq?<2BTt7N#"#r6L
%gq4gaGu`5/QYC@=X172tTL6H0KMTad(@"__=i^?/A]U@^^QpNh_W[::61Nn]p?h!>"NIqYdXLQK#_M=PGs>$H*^_M'[@(LA.Ej.n
%_4mZ8/e2?(72!-0XJl:VklG.o<'a;1i3UG:J8=eh,-O+B1>J/k"_k$L,)2*W4=bG\PE1%H98U+j('X*gF0#*3Z[Me3:&k,:Edj,m
%oZ\iVo(*9r=X]FaY`>bsZ0!6834]NRQ9'[?QVTT;Gen$N>:r['(Q,UX0*XZH30Y`13b[29AADV(!aUSB69mi\C<*7co6K,]Y?%@2
%L9p^J_OhX7Zf-FW>p!cdU8+>s<?aES#].2p88qd4K-1I;bcJAr_<@;5c/\sXkZni<lWaR+"^4gZ$fhUBpHSMkj;O&"PWIU<nN0TM
%-jJ&+Cjjg[pKo!BGbgA[2cd!N_OCGLoZa;<]""_qq>H:(=o1DeoRpH%5L#dYWB!89WCE5cDlt4#5sO;"Ld=%VEc3j8C=lE]IX(V"
%_>><_QsT9A$+QeQ:WZJ9Nb&YZ2\(g;2)gWB(L8Ct3j7[Jb;fIs,6O9Trd,DdSna$+4&)5oOrDs4.b(&M@k\n#A$J-e$3/^$d[L&#
%1*HWPa<VH&Z\(q0;-mZe3-/a+)VVJF@oRGb+Vp]*Xuee938%s(S;MZ>;(YDi3ftYAH.>=ajrU:2R]b`6&O&"Y0.iE'_.aXZ>hS9R
%`rMe"/EP,h](I"8no&ZN]tt3D`g+9_Wm[:FrXg8Mi<OEu#i.&?ENKpC9Cm:*<@da.^p9%FQk%(Z1?hONhgTauTtA0Gf$k\5!;WYc
%>+c^+?t)4*C%aeW1q[,Z/="G)L9F9QQ.[RsH;3<WW-m`U^(K)@opfWt/j/^I0$PTNWMk7,jQCUcB==3bgQ;dcED<CZL[Od/kZhXX
%`RtP7A\lPh!7GmA$NKjlG6lH)/OR(Zl%he<_&8hI)3M-5Y;i>OLg\ZRXCWDtMPVu=iG0nk8"+)0ddlU=IX(YT'bfRV6WS)"7#Tnl
%[D[<(Zr*.MohMlq2F[>C*6*)Ln?'5M+UUL^W!:N:Ue*-&qK%7!'pGWlR0,occK<>_ei[(cjNUBqo:R0A:AMFE)q#NOe,J/A<G&O3
%D;ZnUNi#JO3E\+jQe"S?S%^Jr4fO#*S.`Ce*I0St6T0u==A5U0PremVXkXUM&_Z8'P2PYoF-I0MWqKEV\7hH9#=)W&&;E&nmoDZV
%&e,Q,!N&NMB%gP@2jZBAU7gCTas@6d)+r^7$<WACAVA@Hp,8Y(+]B9i`qt3g]K-Zmq9C&;H+"oBk(3&oq8OnJWE:i'0oO.2Wd9#%
%>b#%o1!_3E-8M"4>BI!r(>%#N1=!ON<<6<_D(YaH=lX,ur6%Eda2CViY^`lYEjQFn.P*$G4t_K?e;t[#PFa,%msB].go#=$B-e'I
%06qn'O#aBDj>QFJnVH&0-3&WD0lC>?r9ED0iB)pD9:9Q[YuSKjg65WmB38EMVM;InTO:JGhMedhQ=S5=[TE"*\s0Glp_aY_qJOj>
%@"4fqZE/gKI6T)cJ(da"RDL86YY^#0Q8ee[Q-"ue+rHoV(n'q]-#0Jd<h?kjm6b7,XU-OFghZ@4;;JKq?%PYi'-ob.qcj<HLDPl7
%5\J39Fj/%g@3l[l"[c\fkWKu2^]UPh]CfiXamF,PV4lBU!%B\>%I#4Cm+#ScA&$VZ.'Z$sYRU[mfEa*J+kWS/f60fc7Cd4DA]:iN
%&ZuOo&(p.^^OlR?Z<UG`k/l`:fW/hf]-4j(YHj=/E^N<L),6F%7m(K7Dh7>eNqT5^nbP$pa)pJ\\iBt*PQJkDlH_8';a,$?P/>V)
%eU71QK6UQ%e@iFb2G0hl4G9$HkS"Osm.DtOd?o*qX[hFf;liF/%eY'q.=8B`DSD%!Ea1Sbke'9m(7&+P>o/D8`NS^\8H_X=ef;%p
%!@a$_.pKU1P#a7%h5(@pVrK(G2c#WB94/gQkP!%#JSO'_^R%Q&8T$WgIW/VCpdrlSodJ'9?8;HUG-=rKpNCg9V'AZ(NiS1#fB't\
%`!WcFX9aMpn+7[%J4IM!q<DRjARI)>GOd]98OmL3rUogN>MIfRfKbWJDB6cohc]kgl7433LaZdhUDgf$QQI4sa!k*bH1f>L\:t]g
%)JnmR0722kBlGVI"Mg'>05F(4HtBt.Z&VI)Q[S03YL*ccQ)T+V?Fp*_pq6S?@(H"]2E\:MpRFb$F^ru$@E5S\K*6,j>7,jQ:O<3.
%h9-&&U0?P_%jR+khL"Tg@ENl^H\6`=]YMuHH+6MD>K9U!qf,$=$ah$Kq-NW]W0Fsj\B,lNj9YD$QeY9?[eHBI`ndT0U,V,LlKPX5
%cS=slm_(!5Z!4lR$QKZ)d8TWBPCW$UX`a0_QX(b\q/EMgP@<;@qh"oqof59*=lKSLcQ**dM82eD<gg&X;M(;E;t)B;f)sI#37a\X
%I&+&-_QPV+fqdJ%]P8a./.r+8=oN%G2bCrs9Am/\;'DM\]O#\9VWe@YQh7$?*H;iI)tGAV%)-[SESMrPP3Z.G-c$-r9GOMMFmaTK
%;1oS0DJ?kr(EC#ks)d-u&,PqkLTOZ`.lo[c.p1:"3+T_i.B%AKlq18qY:Sjhj*c!5B4oW/[^"_6eRMg+RS\9`-p%\lP1nAbZ"m>5
%?qc6e%9N#4ML=N6YEfEME0kEMXc/)ZD%To4'.#!B[/'f.[O$8EXBZuPbGaa$;>4<'-UH_!(m(QLRU>Q@s0esLo]bZPgS;:D-O9OL
%foh0@q>bW/GF.=ha;l77kAQZ"0sYhrh/S!Uq2coqo<P^HLKX"09T7WCCXoF;hP:i'+co>K63Et[dj`?oSF[sSe=X4&k#5hF1MXN\
%apW1+"p7\/XF\R6-nmZj_nW8SF9>oB"Em)N1F:&k'?e+6Y/ZS&j?V?[CaHb'<dtj^O1fE%H2kOPfKD?Q7VqKK^&>iiK9piqUOEqA
%cuER?aN5lkr[E4+'aA!G*^*5+ZLN].6F_M8j@D^B&.[;13_9nIZY.R;3nM8@JR5SOVep6KcoT<PYs'&eh?48JE+Lgso"D?S8m?FF
%Fnr93_pXG"V7_b$R(]oY[bYAjj&Wfp3?m+^NkI[.VRh9E"D/1H;TXsD_=7k+1QE8f5X&LRVNs"b7H>l&jQS\S4AWN\3%h]68;EM0
%3Pct$AYi;(99na$inhAho>$Y:jXM#UhP%"jBiO>ulXd]FF,]*Ua2PHji!@mHYt#T\h$j%QH1?Q!kOJ1J8!M4cFEo5V*L.#%ElB3[
%_@E*,Opie,ETN/.93P/0"DOB"D?%J8[1?V=LD5j-`N=UV?7kR8rh3>%UgNPY26-.Z:-A2Z?WD`A!paebm.S<lpi5p)GG@%ed_no+
%lb/XMZqQ.$kbJs5iffC]<!Z;ud53pbHIeWgX'L0(eZ#6mAZJ:?+:P/n;@uHZhcN-_<4A!th@:VpUP1k5Ro+LHN<[O4LG%S#GF$u,
%Io:j?bL7bNib?M<B)%1P<]<Z\(tJ/MMKh*-/X,3W9?K,Y_4=)$=2p'>_N;):Q_%K$SN!)U5>rXg2S:*5&7/"P=n_,iEbujTgLWAn
%ZcD+El__@F\X]F_//aE/EpXEUBffc)>DA^'H704ioX.3*8C:+9?7]AaEcFF3rCC)'Jd[rnMNXkem$r/6ZV?c'.J*p5dVJ!fo,0V2
%I-L-Uj76LAaQ)Z6]-ojRB9m)G(5@a0i;(YU16th`NhGhB:B%(pntSoAdU#jg;VLLE(bR4196^W2ZAlX>/n)]D"W9&4q?8h<(\eo1
%<u'&$&Jrdt6f;g!)aPX:dgjQ/-H[UQ+[O(olrB4n39%ftp.e5i'liKS;Tr$d[@ebMpR<+;ZeujKe*I)1>#@><8^Q8O&/InMAJ4^G
%(QeUS7<33n-KQ;8X.CN0]6;\VMbMktC,uVsAG,fAO:jns;QHrKBN$)q;cG9MqM,XGF$Z%%;28Vbmqj%%>-5BQ/E(/o<hLmUl4rls
%4g#D<b_N]NY'?P4E0uYY7nHPUeo]ZA(TYW[3@pah>I+U]KY_,[)9W0_1+?N&_/mCRJjrug/YmqC.)Du-*j++*1hk<j`LW$XQ(XJ,
%7K1h[5!>EZ^W>+^^p]Dd2mXP"J9)%OLrIS>H?V\q2XNTfNP4qc8O^Q$=driS!aCB)c,CqgJqZuL8`eseV(f_g"\4r3ZW:040eQb5
%R/6Jqpj+i(I^f3uceIPs)jB:m[U*9p'E][nOT!&XNVd:QCDVBNS^m"B^LU9%5-WgckZ>gpY-r+&<H+F.r"/LrS4@.1L\F@A*(mai
%4AC/Zb7tFj"?f9[,<*&k:G09+$'+k[&N"u+*$#5C_c`8mlEe&6C;;(ZF>XeKFbuKYfL:ab5<[;jfN>qXh#4'+H^Etn.=eqJM^'aq
%'kLP'(/[7B-7V4/iiV17@DpiA+c.tOUC38iZG=)O8-t2-q[dn@YfP@/g4E4G$]P+S/u/Kj/H3aDa8Hut!g'!-U)>qGqD6t%[7[_(
%n4gg8qiCdO^\lR$J,S,oD[rFiqTD,$_ghXVLVNfPYQ+"MT?fb$e%bnT+4#H35CWT]cbJR$O3VeKK\j)Lq%*Muc[YfdkcT,Zrp/J@
%r6PCE>YV3`q''1UoUl-YYCHQ7s8&XCr6)kSb<PnlMHg)9J,-!lrq*+L?Z)3KF/qpgjN=tcr6BfQs7Xp6qqgT5DfY2KhY`0/r7A\H
%](eMioe1glbF^utDu][3J,JIorUk*TIt%CRGI]PhFBAIiO8Y]#q8^8KpH@6S`FGL'nnY$!a1/^3$p)/1cX6RArqr,_p>>oD]kuXO
%S_j:"s5fmPkqapepeN"2TE"@5s75@-rp3GGcgj4T07V;Bh_iIKW;Y&VlMY(=qXaadhuCX0r3(VHk<FCkQi5.?7m)%gbt\6&:Oi>`
%O+7/ls73'`J,[<;pB+d%h"9Jg/33ZhU*1O96lfO=ObfWGD,[h!gFAClI@4&*[!Lg,A0TA"_=pP;8QNs(A'.4KpBV$SVmq'6cS:u.
%A9b?-QiOH8YU@2p2<Z?.ns2(+WCDjLSBqc>btYTbV,#/W2_l\tZBMQrioZuN=qhdp$>"tr/:]3X9foTgC"bQ$C&NSt-ak!k?Lb?i
%J37imF#aa-cK1fJlqi[9FtSA0q8b&5.H/FMn9LF"*.#J$AEnalA&;r*kFS8j78JQuH#M_dg9P381?nRQ2jt83rS<as9D/7i7u'a[
%2^ZMLJ&l?+FLtO<gf9`ZB"Q:2X<:c[*<'THJ0$rKS,DF'<OuU!It=hNZ)i]8S\n.STDT2"fEm/A/1&n[MVXcYAc=!Uaq(<pZS1\=
%8uq91<Eh@O]ms"R#/TI7Jbn"9la0@9hlL`iaO,-J)3nt>btSV%"#WEiJeg995i_I'q9Xpt<M<9fKe+6^;\n4ZB1L`u9YlMo!L7Ya
%PZeBUW5>O>!bi)86N![i64"AU/hBp+hQt*0%Wn?-_dCYsU*,preC,D7dZ=Do*2Z'Pj9I_>:O`;$*@?mcS6sd0*$u"BqA1+E)g7U?
%gn2>C9L%$8HG/6^Z.,JBh*,j07$X%F_V]q5m%_IDkP!VGmJ%'F=6RRO-cf;R%9!0GI`i>"<q1/:O%'Mi#b[WO2NX-Nj7olq91edh
%<aWnM"Y'&cl(PHR>Eq1-iB!e$FIBMtC6"H%`T4tj)l-#>Ql\5XJ<>aJC,eDT4(Si?ID:/fFlhBsl\i\Ls7Q$d.>4R6g5uAU!DukQ
%M^uTb/pJmJBo&ES7I7"JX+>d["WKj&k@ijAFFaRo*g[RSA.VAOL6ltC+.X@<b>-cuS"O/-3eC0q,aoFeO/%B-es:J5AZ2a3f;sYT
%.k\Ut.bSCi#XI>MA8!93>m'AFWOEJRiCHFX'e.I/7nu*oa[[;N&19FH\A5U/Vj!7\@3B@[R83\Q_C8lLcADB3msnfrqU.:oGNBiU
%F#a1Rn),'Hoj[B?b'd7>TAglIU&Ko-Pk,R`/N<s\kfVd'K3uJMGjuQ4_!0+:dGRA&R\3O&bFpte$O9RcpOQoW/Z*$(M?qC=_^G1f
%Jd]lZCR6&o_Un?PI[0Qma+-]OK0oc'-(pf3Efs$T,+5+n7G",__J2i8O6p$VjIBT45j.+$&"SK5RZpM3g<_6h((F&CL4*hboIFR-
%C@W[`^ZF+:BuXXQ3f8(lJtET$EFGn._B4WOlGoIjl^]\#Dm-)++McpU(M!2h:HQWRhW2:lOCp]U(YqB_J.5<.5S@$S4oH^N&U!7Q
%kNMBHa=k)^gr/2Z_Da.sW`(I;,=efHM"PG5cZ'$P;'I=.,+ZLr!W/Ko99jld)oXO5E/_.3nmWO(H1#2&`Y<!$FVt1&\aV]_-j-MB
%ob:R\WpCDi)JZ]J-)I,]eNb=t,8r@*@nP-`OV.pJXaiG$'94q7#H$!^O:/>>DX:M1.<$cb)?)&r@r"M[)?ma)Jd'=QOM;C')^&/j
%<Ir:l!&7HspAm5sNt_^+,>`lanShb,_%8^4L\0Ajd560^Y`N[nCcuB72c^`_CeO"i;.;pAO<.oM<4QV0)LCVOroHl5)ud\/[;[aS
%(F$1U2/p@XBQLme7n(t(E/[<#Kcsr(+bC&u/rq7/o$6]4[WVlcZL\-t6eu_l'eRLk0(7d\Wj^l8c(t`YN8LJL=;AH`'X4N/?Tm](
%f<;ZP+^\fN>@>F;e<]"K<_S(0`P`_;j;QD\[1Da(/ZFQWT/!R*pOP.C.N8GbQ_PJA3puT;:u->N@`e^]<B70+3,<#nHYAK(_Qp4e
%>okgO]1t)?AuORBe"Sl*B-O+A\T'J^"E/.l*D$Kalc/p6$Gp+P`N&*m+kK1"#!2=PZQAc(digP$#=P+XC@=c`&[c#DIgSl+WXT>4
%C#Gdl3$hJ*BFs^#U)Fk7@n+-[V\R^DQS:bEp8Y(U<YV>Y5SPJhb<O/\<,4R(h+<t<r'jq;OuYrHKZKZ#ChMXIGfc`^r+7ep9k\;"
%1R-N3k&<HOKiILsn+t31l!A"@r&f%G,N$!h\Mc2YS;8(P2laiLft<,e^D(+(S!8W>7Fd5oV`7hV=V,.:@N/uK=(BRW#d7q9BO]F>
%iguc2Yig2tQUkoVM/>2W;&Ta3'&*2Xmgm!7d_Iujb_MS6-D0HkbTp,<a"Fj@&is:Md7[MUJs'!D0i]D0*5Gg30]<^b]hsu^;Xsnt
%Jc]C[QY[DGSD@RBe:q;kMW^]/"ES['>1tKp[d<BZn)XJb,rr%]dCUHEp@JCag!?92X,l/4a3R6rop$$YcWSb[Ql)hNA?)l.L4i&s
%V"S8_l@duX/f[<gWTJ%)fcL"0_A8+Z0!'%$KJBnel:3ZB8Lo,Q_SO!.[q2mlZt>g.%l9D=b8)^peA]Ck2etgVjJ@Vh_'ObK\1jc@
%ck8>TXK7CMo,q-[TY)hU.?Uh?aTa1e.>\&(&cX7X0n3'4(B%^Eqnaf%$+-Lm@HL>n^`\+dr&J4i;/CXZD?,RYJjYtIoae2+jZ8bX
%A21BXTA:Iq9M\UHnF'"r.b1b:pm(mskk/5L8CriKkpO@jA5+e_c1P8-89J$k,i*Y@#7jTE(c@2_orC3nNKa4BBE"iV>gl-m-#2pF
%CWcUlF]oIOXL7cMPP/h8]1[)D4<p:Fmo[`J6gCLQ2qkHX)8(Hbs,D$b0!YG3-pq;V:3!d5lR1T0mNqV2-MA%bA9NLX0B0gGo+[PW
%jf1CjD?;5dph'sD$eB!dEQGaaZ3Ho[A4tLoZPDMPQF$d9n1nd^FW5u]-iN",g^b2Ga`M?_L-YJ77:!/&<4IR.iJ?HSpP3(A?r4.n
%l`C6HaQd6;hY3A2$Rq%S,X=2`d\ErS/MRoJFQnT/.<ZQpc<H*67qBZRmamH8)iU4_@Ra`@PJaB?D23S;O2!`aY=e.`Td5^maS)!,
%dp=2o3;]^A\oPN0V)B:@O122o_`PHt'N7aO3HqXR'j*A]2(i[[NNimhcEIK+DjF*CSnR'A,<]q^cX5MEW"hB1MH?]aq^iCt<arP^
%E("ZsBZoE;8W&24E<YQ6eWg6/6h&1"K5MF4]K*u\%Kg**#n^*9ELuX'$jAL<,q_[Caf'T&eX<VUH/+;78#D`W@YToMaaiTR64Q@$
%d5V,R1Y')"ON\aeX-(9IQAOZV*hlK5$:'h7I!jB)Gq2)<eTBi^'j8^?"Y1D8Do8m&kMjT+!uU+/K$-e=''"76!%6I\AJYJZes`D<
%Q.]"]<:s;)Ss2r5I`8K3?JYbO57^@>;I'&!_u:Z/C8LW2W.FP>WcGg'3?B@6-M6!S1+/eX5tmX*+FJ8e_D2rYX9t5E-lj#3EL>@`
%;V%)5LtKt/naY"fIarj"3]jJ78f4,^/$RP)T</`,n3bhOW#`Y(3@?;phc-T5.D8-[D=NY6WVLWe"E3s<L<rb\K2oj+:u+VPJ)OT:
%RR@,P0jFhjSr%O\'49dn!o=,#'.)o[,F4eOkHN#hD4AT51^+oU#Au\VXq>H%Oh*QsY\Zp2;ISi?"A1P-2WER>9%?lE69;;#ekA7Z
%3-(4T"]s3[9h2UiYV$V!!EKqQo/)@G@VRHB:#qL+71b\)dj-eFA>$jDV.!(p$^4-)A4ieYl7*P8Tnk;80:Jtgj3rm)A`6.j3FK(5
%_SiQm#'QDD1VtX<!EmIj\h93S4;OnMb9FD*P=VM0<g1\!lCBn(k\5q!VbI\Tkn)?J<rmNr]tn)$ld;^;8Detm:gRRNq)!"O6Zo_P
%;GMAXEV?OgCcOP;Uop;d>%n:nV]$S@icrX[SEG?i9Lp[([j)S^f85"*h&aLp=KR$#.iSno:>@eJV`1)E$@o)qH[NC,Ui&jt*Zm1G
%l?CV`cn@6Me?X%6oTYL8dH('2VB3c1"3EGJ'-AOrI6QN0WWN,E8rX`*WXKXV_*^@[cA0-![6#6E]utVr(?^M9oC3jfKp\m7H+JgV
%>dr8i.q%`pk2$,ULgEE'=\Ma;+3'Tq*E1*h7>t2b2l['i^Qg+-fPgURM*!$2Y$23&O8V1-SMCefPt@7E1.`#mP=Q\R?IsR>Se3q[
%[qiJ(gFdmX3EV.meJZ8gK6oo(V;]PdrEPYjqmGf_8'::DS/SUmd4uB:#rRYgQ!MKk'9?Pk46X:oAbBdmQ'PgFiak)>YmGL%TpZ:'
%o<=HO"U&:Oh?hjkHRm4:=gogVl%OsIM5`5&/*S7hW=UqdhP?pne'@K.eC^sN^9>.#^VDj`=AiSYEt=q\h(Hpj.$8a!%BJQfaYK\9
%H3W>*.RMcj?Oki[d2s2eF=)9[/b_L&$T]mnR"ZD@Z*Vin1h"#qjKJGcCAH'dq,9(#1cA01XJAO;g(c-p2S>d%b%ZWjV]OMqB;133
%D!TnqIC4j'0dg3%>#MRV.8/.EYuHd-<)HGj=D^-CeW(Z9ahhnULDX&l]9.Y\r_O7S:W19e'ssc^Y$Yp)U_TL!/WF.J>^-QfT2]N)
%9/IS_B@BT)h?)n5=u9C<WA]Q#34^^PT'*mi@\$i3d1V>hIjLm\!8NSFR&eq34/g[hUI]"e.n[50>@4HRmF,-N<GAYQVlJbOpEm)Z
%W5pc6f1dmA'^.g%D_@hTH9,h]^'IT4ipfh-\pa8^:7<P&KCG^`,m3%/_X5Jk;/Z6BW4GPJL!P^pho5?/0sjRR\NrDeEi$n_Y#6he
%h0r**`RF?@ajOJ?#;&1GPgdP2VM.OY3#tc&_e1Cg+<Vb.RWB@s1P`1U3-hf/qU-Foj;X`K\ZMKqi@B'/9-^XQjcOO%R_[s3T<gp,
%8SEm_U(TPPI&h9XnHH5M*R,2)!tDOC%@K2#M<s^c[R#\W&YV8!BDDsk1)is&=l:a=IcBN$NHocSX!RjKm6'ATk3,<RTg]p_3Q.Zc
%^Ghme6,75l7^$KacVN1*.i=DeEf-Lu9.J30Ya!rq)%]J_["72.ZZ[=nQRk0Ar8c+;afbrbJaeqN9cA3CL?/$*6r4'#OORb<5r4Mr
%2TY9_^)*XCOn^4d`)d@LOnJusW_cPO#o1H*6jSoXU.+O!nm5ij'fdOW>NLLVI&l3W0lkf!?,c1K"pm,YF7:<hnjb<A@^>f0H#3$K
%*>3o6#.:u>UCp[jXObNP5&Bif+5Q+`'k@05W7.Loq"07mOOI7-NVW3VccubUVN79gEeZ-"V^_f5aR3bH46Dn'Q_WSqW;>(io6>*.
%I:6skY(km=T1u5H>]i/jAGWf6O['UL?D7(4C587642+^+cOig3`'^iM7#+d%S'':fi?HIj,!GVH!44eQLM<,,:u.*>Ps-F(<qR>)
%+*4;I><GmJ='??%XHG+Zj9l4Z:Nk*_`20O.`]"_EnU;8<JD6JP[j<27c3O,`Nmfco]f8=Xo@Qbfas"nER&#&_U!/rNAkL(f-!P\r
%jg7(RXRde\FlPE;78MOu<sp=(rs,&o\5uO?:>W'D&o&ZF7eO`X&^_J'(+Je'j2.1EYtdTDVFdn8<#Yo.9.*dF'-Uh(k.A3&>_Vd"
%;1+X@]dui4IF-E@:dE5MV-7S<Oq*`fIM]U`LpYU3.>uaO,[K^)OdE$*H#^E07F*pi.M8nJh$+\c&UC1J4doPe(sgfnb76+?ibij:
%Z_3WW\>Ye9fV5"S(<@V5J4h7S)N32O-h987"&P3W2*T^W+Nu`Q&\EcK^"_I])R,JO7W#_@0T#qT(;KT3N`l+51]"J;5.i_u_nhie
%@$T)tfRcV13e+<]M?L0j.]ju6a>4U9jUAVa!HVL>'>V^fp'a(@62-5f^52'aH@)$F4g#.T/alLlicBG3SCDpVMf3t)^&q_jLj3ip
%+>F0pA1?XQdVh#B^`&N(_e'sQ_u?DI2?d/n4S0XGCE?m*p,lD1\$NNog@iC/.,.JWJ>f360*[]I/?YWK:ld`d.d]!WP&'#b`U##l
%!GRa+KH7?j^-a>6l&'i`VH29M0A!HCdk>JF0I8l1j_Ip[m[UJ(s1eTjYClnON[EFo38r@(.C5";C?38G1'['E<Q3d]c"OGM)D*Kt
%S#k;$:EHe(&M)3cRX4dMO$l3J;P_r?DtD`u;F-T`hl,T>26DeAi-^(<H[/drX*=?>9N)n?fY(ja`ETnb`l',^P^W%L(;He_DUqh,
%"09:iqW@47ZSg>RO64Gpjc@qCpLa\4LdAs:ni_NOHuQQqA(AJ]R`kHh3SjE)_kFX"V5ZMj*WF)IG3P3_C9`g<@(Ns_85)dn>kbaf
%5^SUO40!d8]:k6!FiGODlB0O#-,>).nVcj"f8TI]U9V6RY^+enV+%Y//i^L.7Dm*PMpYbYl/0c!?4^!<I_"MYa'f/rN5b$SGjr"?
%ArP3/G\44^$@MUuZ,!:SRWZ'4e1&$,$m3M\=pBnc#YL1ebL0BDfRYC<7e@GM2="5K62CRrJ%STVMK6K+j.:MgL&(#g$tJ'Wfk?%N
%#r5C03De[aBP\k0`+rY1bkGC*b[aL_E>BW:0a\Ol<(YP\YA'AcnmgI*Sgb&*"X9W/]$,V_;-u<.R<t\ts'Wr'N%%s@6;KE-ej(s3
%2^6nI#..QO6l-1$IdtHanbS8<22_Sj:uQEj'LqVIDdueOUY8VCgr*s:m&^D5p8:SZ?S"\[Rdc):oSjXF92d,.j`"1#bf(k$&mqZ>
%@ot5317p3bb[QJN;sE<6]p;56n?)I1O'(tY8^:"_V2#;t(A`[D]'B%q$X#:!d'f_p/5S+lL.?/t^Yt?K6YY:R;%1Pe;9JH=4c^Z?
%GN?&J%*$j&.@Diq=M\i-h[d`m%l]T0ke[V[@k/f#?:Ob2g.1AV5('rg^3(@Zl?tbJaTi7J+c`eNrFq-i0BkE&%$iaDf?ere7-Gch
%>8FAEc]@P;Y,cYB/nZ4=Zit.]#,;7(kffgW>^$8qXns9%g*rU&!#:,#'\2]KO7p^DI5^]fYocJXJehQJWgOCc>g&=\cZ$m@g&9>$
%^`tE_om/=;_05,C1bH&FTO(AGQB@tKPkrLb9GE(hWfK9eggpmgCAUJ5h_D:p6^ED_m`+m:jIZW!]u3J&N6A2BM9gH(45[t2Ou]l.
%-3I(@o2U$S%efVs7jXGsFg!L,mrT^R#f/3[V>U/=;DD`DrIA?U$Qt,jSOjWlYK$-=cQuQ-3_:\K3iX2d%\+[4Xqn";5fJ^?@&Z1O
%^GcYd3h6Q_R<_6$=1LM8&Q.)R&96.E1<kBm.+D`,$34JjP*qQc$I_[Dn8$%md*p-O=`.f*;P6"-g08W#0$.7W`9Q"3qB<4,^Y9Hj
%8#UJW3CW0D_OHGD:c5AUlIqgnSj8>Y.ARn4EH(Z&!6<5`iGL-iMZ?N9olBNDHoE)Wa*>lWG?]*SLJ?^=`N=hV=9PUlF=B(bL"tFE
%a.fJ'*jR7HRAFSMC%ZUO@&n@g@,>)XMI)gqUJ5IV4ZrqPitm#&0&OKEq,(%TijfV"AO1;)PNlfN,p1ISD\QNKoB:#[D^o;n]q8f8
%U3EM".$s2t*3iPKkH]7T&t"grX>$3;AQ+H9fS3p;mRFY+3#0sc2"'Eue7I'"i(X;_KTsC/6k8K9I7@0%cnLa1Y$r5FBn8-FcliG2
%3C!%!A[T1U:^*8LiI'k*lJ>LjB4MHa$\<.cW>Sl/PL]mX<3+k#X3dO'8&it.L*dPs'rIk>l@ee-bA5"JZ?S=Llt4+U1o3m8L)DrR
%,*G,>=90R.!t828&6F^I1MEm_l:eNd-5,Gd80e=hBoPCCcu!n/qOmCqmN!kOB*5sg-<[328Kpt:B\mH.CtQ%Nes%>I.Uh8cc;1la
%D"G"?iNF,/gOnSPoOCa$=Se"E6GI'C=_4gZWVW4cS)_iB?tC>-a/QUl\I,E=0kj*?RYtPO&-;Qr*W.,R_^bn>?bh)9%BV=>b'DYM
%4BYhT@TB@EV*3LT1ri;)Qr7mPb,T?t8>-S&E*7chVC3-[&kJ0@+>L=;Z!nJH\2lQ4C3+08b64!U6kPkjXuHlA#%tG0R7t9DS>i/.
%>km/FCV6ic8l@339Ysa`,Bfbr<6[mm\-1k4UC,3&_-:oIccB4=W+-FJ'goBMm)&tL]/UDb\t#Q2hnUZ<\dkioJp$22D.uJ%k`ciQ
%!in,8'NoFt*Jd:c1(4=D\mq&ka"9#@LX5+D>Gm\uM%ei2P-f-OQQiO^R>*0h'r$n4M;TSY7i_!]1!\sXO/T/LB:9ru29'40@o&RV
%r$/3W\=6#"B&&Tq'ec!9dP.II<ASQ\4OT8g``C'3^epN2G>a`/XJ5uR1U/jOj,Ajd.bM'oecVSjq::]t,A%9Y7#d0)fV_T*ipDqk
%lFor`5CNpHZWQi),6kUB1OQlp%HeF#%;h2IBW<YJ7#2q&XV%#%,Nmf!nDaj9[H^-BN#3RO)Z&bVE0Pf3]>^F2Sb<(G8E'c1,[4hg
%cH?8?p73oM;kM-Fe2_#i;^h'1*N*K5nY?UQ`TYe\]hF9t/usF^WAXXGjdO,,&@n==fdSV\eR27^h.8tr%/U_#fcrKT2*aE01V6OQ
%(Q3[eD'\u@PXc,+C*-ue%';tgbR!.3N#_"c44&po.(t[4&7n)j4I"(5ND_oWLXEIi5pZURN\^Q[NF'N,'6Ae`S,aF$7:=G](DKHK
%Ccb]CJP*Ah[!rSC]%IobGKtB6_sFpM^<2pe,lupFT5EKL8K_Z_O7sinEqC4b&[7(\D^X[ZOFUhWLL#!.P2CBO_ia_sna$k-*9(&k
%G"8*YjGC?C?lSX4ZiBMX)1GKcIT(IM;nQh;N=Zb$p:**XnWo@46`532<s&A)`r!rTh6-kW<J7%K.nrqpgCJ>S),'1qW:A@28`:B$
%H2@/];ptu0cLP_c%TX:qWQI17*6B@hX-RB_9#\^UCgHLNR#%)8nU>lpK:PHBY;S-(e9BMV8hiiEir4&<m^@o>`o2b'S]:hIaAu0U
%V(*RfH^8(:2V*eZ0c&DhADt$\3:E9#<h"VQNAt_6n$7a1NltRo2od[!cQpBV=nc+ck^TN(5Z!.Lb?pU.@Z)OoHai@ODHnMCP*$#*
%QA$\1Mir;Jk:DW'Ve,%*fY:B$`u.'d[;/rN#85")A*;c?j=T@LPH=9)MD&@7=YUr7+7s76pER;q2/[M@:-BN:3(`;hp$quWgnnem
%Fq8fOi&goP7V0BDZ"i#r,qRO$Ap4Oh)33o=+d=hi\bX7XLIHRu<S@r-?$%,tl?3+ZT(mI9iL&$uZQeMD2KW>B421=1=:)H*_>1+c
%]':1NJGjiSW)9$RhsDD)^GTXR%CdYeDdW=SBAPdY!9*_t+$-0KhL(dsbKqqZR[U6-59CJFp0geV[5nR[7HeH9?`7m1EVAsF>T?A@
%Q0nN4cb]pTiaF6pb2aDaOJ%;G<HYL(Jq@qldI@L%/N@hHeY9r&Q68YjD8gKPo[KoL]9_#/4c=R<BAW8b0p_EYRU6AiN:)GAL/o6Q
%q,3ScMNaR.!W6<!fqoob]9;\B80U?5KgTN:0rRl#:?bp<qmHjH$9M)12qBHA&=p@eka9D]M*+aqV;YmK8@&>o2b*^,@^jtHaK2?\
%`350RV@Rk[hq!j[?rcQif@uufEhmOOaK<RDq;;mZ0^a+6]XPlghYbC]L<oMOfB0l0,S7'bYEU\<r&t[j)!blc!AEIDrNXcb@ssIT
%o2VS8T%Z[fQh"mc$@<,$BG-e\H&aZ!QhWUkBk<1"G3A><Tq>s-IB=.NLJhHNEIN\V3*!"/dJV*e#nC=ER!M]i0m(kH[f^JI3K0?f
%N;/,E5$b-ULfSELYSaB66KZq-9=l-3$h%Q2_#KO36/[i8X0QjbT2fd*T^?GjX;X_7f;@k>hbeT^K<aPqk.h@61nk/KMPAKVOtQ*i
%5"B"#[#q7dVl_Wk]!/&Q]3(Mke]=Wbn(I)51V4)BoU8dq?B"-RFmeZ?+OVO51np"4jje[KjN25<iC/bk3"ie-k5@3<Ep@hX<cn/.
%l#*G<]kd7YV<O##";'lpp'0fe#@5-skenkP#1+(&P,_Va*X^_<ni?/'pXF+jRU0'aX(=&!.Pnj0I5H#/P(@hk&"K?&7[;7G`Bg]1
%cdd.'qHU,2Y0YXCEIIOVCtIdG.<hB0V:i>L:F7X&b,sij=4A9t4eE\Beap<iD`s^3lh5_/^N&po*qeKqkP:X?&Y\RK4eLUpTAMf(
%h`[SZ'#VGj2YC[U"@55(B#"fPXnBB0/[kDX@bO!XM:".%Qte'umitnLL*6EnEG7Z*qR\MrHe?=PXhcJNPcGO_E4"4=\Mrp,gfr=q
%qoAC.\-IHRePL(nVsOA"kQbGDU-soMjq0j0;S(,Mgs&F+Ssu$j6)5/)g68$W$BM+L5[8Hc,i\Yh.b^7")7;IXa>_2(nM$),ie;\4
%KM!;oFOQ,JE>?M#n!/1;DCZWV&k:ZRQI&o9Sf!7[I#'?76MSN"!gSAb#d/deX,_C+2qESi-`6dN6[ligeTXCl%lui?Gfl$f*]<`F
%YL15ig().'*BfWjfs(tu4VSW'cJ(t`cmOMVX]+jgVDe1P#&F9L(8&m4*qH[ej;fdNq!`gBl?F.1"DH0K6L=d46(PrCRc9*`ht<<R
%Ro^cRDTDU+d!fL;88s(L)'H!P6'^dJ$RP?EaZtd(5A_;X-%u>0<4#AEg([b73XT5\$#nH.;!NQVY!gUqP3VOV5a]bNFUXpHlfLNi
%,E?XG6<R<+#g(@)7l2Q%b!1/hRFURF/&c7HJB(sCQ?0>`5EEZ^+W.@H9Hk^JRmu^pnDXbLF<H.ec(`Yrh)t]LiMQpXRc6SXB0F=.
%>YQCVEFZ"L*i@4@Ie8<<Pf3r`U7BX6+s=S=J8i%L3DVk')TT&4V7nRq`cFu4d1:4f-OCUJl7-6U)5CQ^NY\.SGdTtb#`cKXTY-1%
%$!5JTKjol4gW3R/C=%\)UT0P^e3/d+KLiG'`GABg`JJ9'#Amb<6n+<OqZiNPqn<g6FFK*a[pi\#JAkj0.1kHeouEWnI7`bB@cAq:
%.TU)d`,jM)_g5'&:ld32o7@;/\'i*LC8Ym:Y1a$,$`d]9VeI!c9"M6II"l!5&/e/.;X*')R_KtXU/[pW7?pO]%2)@;6P.g-72[[F
%ga^G\C)KUcg-AY"<$+Lbk8P6dV:MVU$(\FEng6rD=q[j^IbV[>*\T3&bh>fdM,kj-(R1/M%M;'fpt7K@OdZQAl'$L]+JuUo-sJNd
%P1$i?P^@FrU0?0!,58b17,obBO#:M3,r/[tM$jKN<'hUA92GOG"28Q$^Ar\[[B1-7@g_"U/kg.SE$p[]g3iC#RDqLT$)W;[;oLc%
%%S"QYlZoZd=ln(/6cj5Ik=g%hFi,iD@T)XSf%bOu]%3^[ejN%MN06b`o<W0*MeaVuD]`lf,mf$(]1Ec(bFu+Wdh/H(KT!rIVG0[O
%a1Zij'bcpl=t+.u$uu%OR;scs<H!FgCn&P8"qE+)R%eG8N-]FAW$5QfKO9'UDnR,b8)]bAOZ)U".RL,=jNA*</.!F5n/BB$4G/eI
%&@&/X9-#<&"Wh9oo,tmg=asQ-[h!ORNR'FgTM0V3PS#Qq$(iQ^#l)\Dl=e5H!bK2Y?(<0R@J4e:(GDc5j"_W\3guj.9SkKbM`G-M
%:8Zo+?_:!m.-h\:Tr`KOd&&IGi3Ak:?K%IW$@KSB.Y93+`oM2m6\+jO`h?n3'&/'GOk!@o%M7tOXj'WbL_ooF<5tm-6'TL\VKKK=
%HJaD!l%4^CAl&^fg>>#1`7J.l?^3>=RFR?0K;^=7b.L\,eW3'49*sCP;/AV,VQt<-MJ.8T.u^Mtc(#,spqnqlOc"ac@]cdO2/Ikt
%_tMb7)&=bX<>GL':?>+o+4U;qAVdRu+)_B)Hp22kO+-$G18r+_+YoW>jroSJ(r),US\P8Jbm28PRBMc)J]S"DqeI5(B^X6F%Opkh
%C"M'uB'g0n8l4nPV=t!N:C:DD&^7*;FF?CS*TS^5EFc&,43+:\TDR$>p<bD:oC(Xq#(TWPFicqMQTa0R;LLCl&X>h:r@V]C<fQHA
%#$lH!@oWZ#9VII)4rGj\"Od3K!MD]bF-kGRX,tD'0_3^\qGGDP%2&@0fNdnOWgV*Q2>A!PiO]rRZdod<H:9KG2TpmdL@S@Q"m%qP
%EJk59kUJ1miZ\]ql=jBF*g%-GI]!mFZLo0Z%O@,V>H57;:L)/QVkdtZKHVJjalpu]`XnD[M2sj186QK.5n(a[^Z^1lGudf<acOn;
%UWV;"`gBW*5@FPffH-eo>=?+T3)-esk%Z]YXuf$o-t9Z(/8JqfE7B-fBtm^J#//t**qX0p[u%tZ+.g86B5)fDJ+-(Y\*;*)r#3_e
%:[Y.tB5n.Jg#FMQS:`$cp-m*uHf82-;:CjQq`6a-j2o0I:[ZKbP;o11iol:]s*H&Ao-KY`,-U6;%,8&/=Xj%HZ&IHU5[CM]TNS9R
%&bEG1GYktqLH5rM-58p!LM2gV6#/k[I>FWUnr;Jgn8;+]-=i#i,JXR.#ftuD-3N:R$9fb")(VbgPf57d;-q*()_FX`Uf4$%9M))7
%18KgX_Q9\&.k7+`Y'B<HB=[6iXWf2!HQZ<4bEab's._dTosTcFkiZYFa5dfV0=+r3Bj#ebm@k[e0^8UrSpKpU+gKEJV8OJC(TR**
%45;N]g7>us(r*k@nMp@STid1p]LNC).eMK&Pb3l(c^QC(-QWUb1k@\=D=+Vkd<iI9hfX5-J_@2O($@skk#'%(0P[Rublt<>28Alf
%hOEWdZH6i@_d2'q^4HPegf37pB@GIQ0U5QIVcD&/UI\fa;8>4p`DY3HLot[+dW"ga>tD_@q';2/nsVeKWl55_9$-KeVu<'R5ULIA
%PYHZQA,bJaIns^3B=u?1D$&%.rei]9d7-68%j7oL^NAjq4TJrM0CCF,llPYThY_d4pdGZ%cNu(l.nhGKMr0+5mo(("c+kJG`U[l_
%+L7e8Jk>@9prm][s)%3.a/X,(69<g+"Ie?GbC:msbhr;V8.f$=6IQU+!gt6T;:/N>CO<Pp9mHrB8HbZgLpC7?8>342=J@h:q.p1p
%hsd]AP?/]\=2CM2kotDR:=CE@(&?0.?<'N*?sTP3>Vo1I;FEgOEf+K!m&g/pdf^FpR)Iu59&:J<PdA:NMD'+/XaFi]CPZN;f@:j'
%AbZY0NXUCql'KKiFLi[&qpTCT>JR`i^X+V^[Ih*B,AKu%'!,l@Sh9lMNO$'u^07d2(@r6UYW&a-`q4Ou'$U*D=FIcNFN79ZaT236
%O,=R/8k22\`+_R'.alXsXp7?((/oWja[*Y[R$hPe8-f1S&eKsk23G2p.$P;#d.J&YLDY\'+*jtSi7u9$eF\X\84!"jDP[jU=V/RY
%,?2$-"SAK-9J*M#f)Df6oD%8%K6bH#Y7,+L:J0#ef3Z01N+]pW?OD<8L\*2$dtRqHV_F"1"]QEl/Ho8-W_r\@ON8pV4bY=R38ki#
%R)-6HICW%RL_OEGgnI1t$PqFnX#\$81=jMc[sid:4A7MO7\d>3dH4O%lJ#8H';0X(E&;-'cF2pW`8@>;2+1Z0ht7cg;SIOS5j2DI
%P3,Pi['I-QMd&`r'sc1RBEQ83)QT%U\NGp,V;r+NpCsS#\$_`ipftAgLQ2/_"o_:E;rWcJZIHQaW0Bj;lfWNJH/L/,#Xc@1a4pkk
%S9647Z@,q;MXV8,T*fDNb\o]:[_FZ)nr9TN]#KUa>`C=p0k-\j7:d"hX5&SB"`6!A+-H7*[e=a'AZeo2l?!Sl@kouoYECg>M6!LV
%rhSp[22/ZY"(3if5PXB^Ci^SM)lNRlb0u+?aafGYo+fW?&uC8*!T_;Io_T5e_38Q7.7V_7BlL9&h2bq$V^F,ekCeRrk+(FD\#F-@
%S.`o;Mko>ln.!ID<^)/;JF4_TbBU5)_6l:N[;mD[/4R?jV:>gu;1mB8RT7%6S5:G9<piXPq7<nMXO,9ZantVbapIp7J(NRCXc;,r
%9k1Wr_d10hPpW6d.8d,2mEhqXMt"](gfU:&4Rd+AmJ_?KN>K8'NSP&9l,@#qFFX9LdOtR>C>&X3'm(V]3klX[rCfN/Q_+)$6.b#G
%Z2POiANtU9/IPj<!tQK]>pPNLMTO@41;Rsj.IF,^8<H+2c==pkOW[4G\h)d2#bE.[B%%Nj(2W]84l`P?*ru,eTQ;%_'@dDXM5BC.
%]IUdSYtS*a_/2.8*\WB9EtIOmMiqK_PQ/VCcL$=WH\j6,12Z:#%!EJ9<0HHj<6![]pNmU"K:L>MORc`=nhIPXMp[Q@5[^_%ht9r4
%bXLq@V'H)j[<,*]p[;S@o$M?pkPZIFfcQ/V]Cc&]l#+FX.ba^MW^GQNPd>!ihs/etpQXL!h8]RRbJ=O>eOMR`-$n>5\pNT:kEiNa
%eP[<cFAl2IoUWRRjN$LUbLNcuLRruV?YX_1QFl^iA58_+hYTPXJl92Thr+ZKPr@HD5k+KI^TS^*eTC*X?*&5kd+)n"jRN]5J[oL9
%Sc<bFoWA.W_(*uUkPr=>Xq16cs'..brm/Q0kPnehg]+h``mt*7e:YN-s&74,eG(t'dJgcXo=P%o]DqL$_=ZpN[prj2?8llpUNk87
%EdhePDef\e+KUsI)'[8J)LQIlLNsX'XlB2fIG?M:lg=.ql.pb,_tr4j;i,E;Q?AGHhmbW4`nXeKlC4]jX*pjXSlB1n>#?An=qle*
%Pud$N3q#kOGi&/Z498k4E5sGpC#YgJ?^\Qf"QB]A_=patL-31lV$XrHIQm,jGcHRjn\^+0,!,b)r`s?d#GIe*o!jcM7jR:qF$G*u
%[!$WibCh0J6PG'<F5ba(I3T#a$aX=#"LLJ>h:XNU[G*A[18Q8g95SZ!)*0gZi$&]rGp=DW%en;Aqh:*7/8S9^Iokb6X?IqG]E?UF
%3Fmh_N_<FV[p(T5AM2V/1Q2=YktpZF@?ikc1nQEY`4"<_GA/LrGVlNk2baH"?O@Fg#c8e7YN4h+g%Kc*[u1&2CQqdk:Y#Lu'LI]L
%QYJe8YNRdBqkOEpcA)B[q=qMPHr<JK!"W6EZVpb)9%Qa\<i0!jc.>!QpcVE3c8!+q:-t#5S^>n^=6nFoB6h5fJ_hCZeIK[_r)lsQ
%EB]bFg%9R5/h&E/hGGfB1/p>cMua+JoT7"f9X3AN'.ENnF2.PX^2Bh;4#WLbar)JoUj)$.C)!Qo1W$*d#CP[93:t<?+GM0`m$0-1
%qS=1]'fCp]$Puh-QK[2NUTc.LZWIY\FW`!40M3'\ce"D7Y!-Xfep3FR]<QHFYF+mH&qq8go8/;MJe0s.,*f01XG@,5IZL@dX`Jk.
%-#$4'\?"j5`M&#4pK1nNg$-%5BqIGAV]dOBV8E88?N^V,CGZ>?l&UdsN*aBKC>_/qdlcU@DLOP`:JVhAkSk`dTX<NQD>;ns_F+"O
%8lG!]]kWbdh\==u[Mu5YJQ-qb,&`9gSeH<e=5.tEJ/*h7(e/bNiB%n'-gU:_3gX#\npbGnQT/0:Qfpll"3QH_1*6C;<3f%cXE;f]
%$Hid!Jh_:.$R;p+)ReX!$9<+K*gq(j:Weq3,qS;SVPcTDZX<;hRQ5OUjZj_0+@#inC*hOTGV"9_Rs`huoGPu)n\I&g-J'mc*8L_b
%W&I2Tm3r9=ckQ/^6+!NWr;C%"P(W"[+;q3C09`iH^".84N0;j4m,W#qlfTUAS3Err$d"l/$)eGT4m]@RC/u%3m@q^03q%14"XIb3
%W3lIO/i6]7:)3e8jLe^N&:YbF!Dkh6Hc!YI;"snGHY_l^<`/?N8s)f8Jq`$,JoQC"^hP;fq@r2QQCuMC5^':_Y/qea^3=s'6Zm&,
%)"j<+rZs\=mlZT:$Rl*AYAfrV\&fA7,F:V7JCr-WA=q&FI8<ZnkWDbjNL,EM;!uV/U;]rG<2sq!J90=t"8#SXIdT_@d6SZ*<.AaB
%[=<Vc)h$>[*t\CU&PDZ!0JS!^Ef17QP4Ju^S!=<c`SjS<1m7VgM,'tQD<$8H^42R&n=TaWe"8i'jWC,`1r,eOc,,YuqTnaL^=fC0
%j7CTLm[&+44,;d_YFM3W'&SJgJ"E"rbSSo+JmLKf0d;#f]k.R4^:<c!5imWrRnlE55I9V##3A(q5BtaIH[>F9ejF]5?,%R/T<BZF
%+1%p&HOak1?#1DoNeRftQs'S0]sA^`6XJc"L_NJe?"'"%G)WLo5^dcCWehTASJ'qEa%-dhK.kP2`IS\a(#>n"c.\<g9^+t[:;WGd
%6A.TqKGUp;"[pA/#<iZq0(m(=WC"H7I[a@l:'dp1HQ5Xe[u4IC\'gA&f6VpKHLGK:Xq-fmU-m)ZUbR3L62nRU"8^+fa_o$DHEBG&
%Y9?PdHRM%+r`j+7E-L?30$"De]TA1GCS!">Yl:77q+MT13+CT>9&J9:'Un5>L%kp'_%-`'R\l#f5ofS/OpR1191(WE$*Gd\OpH),
%4;M3k8:Tk"Au.q*&O+0DbQ(Qr(?$kX&=/8;59sJ;BEUU\$2O&2.Sh"J(N_CoAR.2u13Pb^O+.k_%_!4qcF7I.+,?arQ0'!m$cr6$
%?_n'aV=k]!#o2*(bX-hBlK<(".f;gZlm:L)_11'*VA6h3r@%EU3O?TGP5^-X""Ng1!dT`XJ/E_F#![fW8oRDa!L2j/c=b+X\?VQF
%k`<2:^8P_BOY%u+:\?ijPub'&Hane&>VKuAd-@h1G5i%Pa)d:@fIurDLPCTQoI5_.5F-6N*&%e2f;oJ7).fKM*"+AF1UBsH/NTDZ
%'&=Kr?qG1*WJqhKj3E,JSBh+V48-9527X[RN+VQ_cKDM!oZXI*+_?QbI3+kL#l:Hk]U#\M>k0]dY,:QPZ5,!Jr)%/PmE-oV.\m\A
%7,MuZ6aW]R5#'HCZSZt!6E/B`0f5R2djNeU>mn@(qYSB[OTnU[);.P@M4tW-fm+!uP>i:=&B+[C84o0\jS;5\O3"<P<7Qq=18`&W
%W:+>gbIPrj,A98c/^nk*iXPa(7t-^>pUBmj;.$aifgn][.O3rAb<BK5Iitb4Jo:e;;]1TiLt=4LWeYH6Z$?nKjr9HrI0#d=_BOP6
%/?kUkn.1,/PP0C'Du=f7,-[JtW6fD.iF6LYp:/,c<Y)#`!qd]iEVpuY:"k^rHUZZ!0dn_eXQ!$L$>=,jMotDEc@Url936qh'J#Ld
%lt(FiAb9`ASGlr@=&mh77m6_:fA?4m*NqJ/Q)&?4__(K%_1K=?#mLDm8npZj2':u"0.LcA;^sh[Llu0d2-:5oplu#tr2nq@<>Liu
%]sVY)pPin+df<*O300264%Mf`5><82`06iXr=ECsUn*RpO?Bo*(V;1k@]__&]LTCV\.12>;*7lj?[Um"mB/'OqprEeShO_SlT0;[
%<%Q/qo`Sg'.JO[3eQ&_`p,-]TYf@3BDJJ?]_]m)6=j@?Lk4*-_^!3D\CMAZ7*3m4O,H#$fko[j\%hC:Te>?Ce:PkhL_M@6#VV%MU
%2D1Gnd'.@fH/q:?B@B5Nk+H.Ph1UpXS?tJ8?.K1uF<+O9pgl3#9pR>6;/S1W)TlBi0@S@iiG1$1$Q<X;%:tC/A!67cH6:,[GTFR$
%+8i5$NJL3/G\]p;4N/btI,'."B>`&'O:S-7AiG@.6G8/dCUWRQ)`m&Ekmb/t`9\O>(/'a+FRMgApMV_5at$rYjZTRcbP'6YGRd3o
%dtnIqq!;<-ehJ5&V*m;C\h>T!q'@q?JUb\l6RLEubhELBa6I:C0<\)j?)Ht.p`_/n`KV+&\DEjc<"lX'kb[QXpjKpUSW3LkQg0dJ
%VkpN$]7uNWHF.6*/&;5_e)fLdlqn(\a#:,Q7&5A1FO6X)eH)JJ86jGs&W+?a2ZU-UhMdLE7bMJbLA6Hi.<Po_WAT*o0)4,g0L/f\
%YGa6AHKriY>26]7G9=TdYF'/$Y//9Ujl*Y5[5\"01'28p)a9Z.'.([8;CkWgdbWBup?.0?S4:#!3PMs8$(=J'V@U\5X3,F,G;%s)
%0CU$JGSk,"Au8cmI?CuU7Ag/!E'X=]IS;?Cnj'3+FYlJ'lH46r#/se8Z-P%\5@Js;k5.Pn>L&85'XepRXkQV5-)8nb%uJ&'lc"$h
%T/KGOdLJmA]+^70b^@>HV//?rM+2L)2AV.Z9W&5#j@DKPUVF/.J?O+7$e=hQT/TnIX#m)NT:hsUGBaIu37.6t+3fgk7TK)Oh=(i#
%N$133jLc#`8j5Z`l>0`A"27TkOei8?nXNHE,^tO-a`<oCT:\#/^:qtaS9P=bA?RrT.6GXJ855"<]^@J@%S2_f"JdTlfZ_Hifa3m`
%:V/`!RQ3dsPKV@KMMP<3M!BBb`0[fi7rjq11?#O_h3#[kE;n:CmOn/NK1mSM^2<4(:Hcbdc/W7/qjV2tIUG^p-tQ11B9m,i]B=u^
%#&ST3Wo@m608jECajSgbX8r]]I$K&]F0RaeB*o3AG8&Z@3%K(NeC+_&FmhYl++@,":-(shE>pa[Qf5)rrkNBtUt]`_RN-s3=Z!-I
%:'"jg?c)[Shq&Rqjdj$;n??]B0snuHDD1gp1UQ./M@["Ea86Pi9.M'jg9bmX?-1=PGk3]c,QVUL:7"mnn'O9SO4]S\mlMXUeIT+`
%]N(d'c:>=1-%bp*[n0t5RBhF+.4PBVN*<p2:p-0FAOeC]C1o?:jK2gXiR4gmqdt`*V];`ZqeiASmE/`H>AUSQSWPu(3?)R`YZ,hc
%I2@?B$Ci,?BDV^.i(HMK";JH_K+URrXSju9m*\TIMs,9VA`p:Y#H!YnRt0:nK^)LYhPJ>PXC`Z7/ZN&DFus7spBTkR[c*%t8_cbY
%+eh8sAh3uX78#[>/H+G2WbO`.d<\Q6c`o%E[7[5*`%E;@/m.tHG?VWSciMr?dP52SBnWB:D]ZOBX\gp:R#XO#2<r32hRL0L0^YH[
%pUN#'ruI8"k@TWj(uf-VZj_cDRKa/QZAHb*V!T@oA!F0/@!n2a6;16qlOQ'f^_1te:/X5@A+uFcSY^!WQ8pO5G.R;2Eb&*.Gnl6N
%q;A,Y.k^PCa\A"4=@+T3#KL@Rd1Lhu]5@8[=hX^@X90k&Ln^RiT;1&YQ`^MuP+u44ZGY*:`3)c"c5es2*ibB_.\kFSrY\r;mEeG0
%`Q8in?]c0hX]_H'dZ%1fl=mPu%6][pL+J&`*TTH5^9c<6,kdBrhT]oKNne7Oo*I9LUoKuQ4V,jQfE1_H_>#1Jl]H,%I:XcTRc31O
%aZi1.LYG;b0FfFD.^g*^7J!kgj"'\_3a1oUDX[7eT+p1I=MM-d]LrJ9^(EI[=eoZJVc4j:,W?k:Fcn*'j8]/QhQ=i$,J=_;DnuC(
%0*W=!,fflCH)aG\?t0g4*k/%[oOMW;JmFaS<C9c_LAlVA]#6f0j@PKUA;X?3,SX)9in8\!Nee_G`HPI#pqd:`<$7@S^i.(J%#RKp
%E!JdtE)<WGW4Z`eIRQN5g5`sKoBt,)'(M7^A"+H1Pj'Y37a^R0VdDr*S#`":;6&)hX7dW,@u6.P;6unC?XJpQC`XC-VNG5E0hFcQ
%EHJa5oAe5Cc6RX#)$ksQF.P:#&raCh&p1Gn**Jm-obggs'a0s6`["m4H@`Ck^(WQd]u=0bcBqfe/:/u@6QrKbG:5SAq^.,U4i;fn
%><@]MI%#3t>5g<pri'#2<R32$3s[^D5Ro8_LdZ$7,@M;6=7]TdJl$n/"a7Fj1aY+s?CQ!+#>RFnJO?^jH#"OkX$W)tMD?iu5+&%:
%CZrnod\idb@G2mYZ'n\c*f.u\$s'MUNJ<_`Q=B",87995WZeMpm5500R4dlM*'[C'=Oq]IIi]A<B%2>M<nY'pn$POt=VQ<P0c&eC
%[9L;'kmK^8mUJCGPY9^s#g'FYCL9mV7]JP&GJ/+Q7`(T"<Yu8'WoNNk+>pS+i5rWGh$82G5g)%"J0NV(r^q9]3Y?KdB&#+=K%Hfs
%?ja&ZGgkRQ@d;/is's#!2F`qCje`\E4neMof'TmpY-?m?QPlj(b/\AonJUZ>-_q+nXN\oYJm>Js:RPZeinu^*S\SuL9C`VaV$D1$
%U9Zo6n#5p%a<pb@""bN>'^B*ir2Lq;TI?9\d=)0!krWOK,m;<jdXGu)Hc2i<TOBp[EjZrIpG3T`I8]#?P*[Qt8inra@a#,2%9A+E
%!L"tk/7!l>AsYloO[b+S]%4:5X=Vf>TL?)h'@\XsXE4f0W#>B'903G;;%gple[:,`1U3mk&q5uce>i`__69LNR;>;90S-qK@pK"n
%&n/9Np3o,7:8GllP<itTosIm7J(-Q74>^NPdjT\#'q\9<pI3a\*Mi;ZMNL>_g.Bl7_TRg:DW##W"l6/i:ru715Y:%"j/`AE(st>"
%+gZe6Y74X%;L%eh@Z7;7-"m/#B0m/!;^*Qlbt[MQiOsO.Wm4B[K@SG%RUFphQ-BPWOEmh_:?6<\Lk+a*T_Z8);LeTpQW8ih[P0hW
%Ss7(i8-J0<cEM#I<$eY_;WVmH'F.!TO!@LKK#88J"O6!&9:-!Dr?.:^1.5<:3f@R_@Yr-L]I_tn,DRhFW!2'e>.dCI)WMfZTu.C&
%>sD[6,G0ie?pfM/U<d8=#GhW#mo5+HOn&ik$Td%CA^rRu15+X+PuT(2UH@N#ZLSK'2;\nkkN$%MPXQ?K71=t>"mDMi"c8bLn<>]o
%!$'p.MQD3@pHTr/V,s7-h$L-=#:SY#\"nnX]Qj^[BT*+[.3htC2BK&HZR@8LST1lGh_a^&IC`0.4i]3`"#[MhF1Hi`h*t5/3F+mJ
%)mC;%8D"3s60lm#s%XLE.D=)8)6Ur*JHa79r+Z=X,qtmT66q(k",N=7J4-<ii,`N7gA4,bFp^WT-2];o,Fo099a]<m2WE.s#XRPI
%hB7*?LE("2,!HgU!IP/8EK%!VYUk8G6V*ZbcCea(eA?Uh44g%uSC?OhS#T/c^cIcu:I)jdC<@L>/3]L(Ft,bV5q>^L!Rl<9WiL%R
%[D'+GC+j"[kpF9r"8.M'bQ@#r6_5,9I+ng&=-bnP(:@_"C3a1;L[ku,6,2dZ1$rM+A^[OqD)t40#3jfj%#.I1A(p5oJ`cmme3c_!
%_V&S9rn4fle[Tq"gLcQ5ld:Xn/G/?28^6'Qgu0:)2MV9a?#Bi[lj9P+p:!1_Hg%V&pueC.8Ot[(*-slD]]ob6)[f9&dZ5ep<qVWu
%n9GG^65SU_%rrVT!V]HEG'B)'3$?o]KJ[R:Fhh3e\Fu:=EXKfB,NQ=hR2j$CO<\pmdOdCor:1'3c/60jT>AhuDWl,?l*u#:LY)M*
%eK$,mBN*&F!!i002Fmu$#bnC;!iWIu^_O0`Ujn=GG$H0Nl<!'N4@2<%DS8`][]`nfXLlqaM`t?G!g'FX'9)"J0Et-(WdSTS(*79\
%0a5Taj:VRCo_2M\M`U3B?=;pc$aRamI+?PbeS&%t+rinCaIXgCiFQdIF`6CU'K.aJ2nUgb&]c:&iKiF1@l1lS-q<3n)*R``oftX3
%b2^t7[ZU#'O4$;G904Htr.2MM)gr7ujYH\Q#sIfij'7@5]JJ'qc*!,k[NWa#.>WapPY-Vrc06BB94t-lV)93<He%\HP)?"X?Se<-
%BDiXa(],@gaK;^7d-,BC__p^\4?[5!`"W+E-2B]9cHh^47?I$e\KUr=#Uc8E%PK+$Gjar`S_!t#1i&A(:<>+.&MWgJ;mHf0"aIn5
%)8mTBmET'a4e=4Yr<Til:Cln;3L[7/*>39#&L68$3].&Vbm<bI3V45N[75OL6>"$(D^J71[!?hr+-fH?*['Us]8@s<9u^ar_lEDR
%[TjA*m5&h_#U5ai#m%lOJeO!^n\d'W*4J/$<a:MP0_u5\.D^[U<-msk^[6sBDpb1>&;@[:FLu`6&K1tMXJQ&W)=!S4&]qi\=.,bX
%.B3-b3&;[<cem_[PY&9!'F>?T3HB069:s7$?p7c7jqk+EO7YKqI)9/[[::m+2Om.nA1(A`@6u90![u#T!P+;6OPY3n?19FZ7H8P/
%`0a?5mK]I<+kG%*.1bPIeJD2B@+5OD%-]e_;-Q<,#Y[5D^TLE8m3[kh?f_QKC66d^pf"%FMiulM"Z0[6#(b_LO]Vr6Ysd/3AhI*E
%#cs%W3+4L"4u.rI(PM:DIPpX,BkSf;'cIaL>jQN`,*dB::0[GCf:f3%q;>PpOEN\<TGc3t0RA!7IGT;PH0%%^au!.0E:Q_;HNRjM
%-A@:!i>U\2AG.[R1(J$a]_-DAbkM8sZ\7sOYJNccken!/Wg<Ph9k9S&b+<pmHJ/EoHcjsMg<.$Q*]N.t'c#s$DdWu<P[&oVUQ@q)
%M_WM3mg#1AnZEt&n0,:;8\'>KaP1H1i%WBk+e,=D^VC/j[AXS8L8]1g?C#&/ngg]''R<&9N7jCk\nj*h+p+_55d@u[AAjie+p&./
%L6t!QM]>[`rX!62=5\A+n3oKV1c'!X+l\/:[U#KB6H-c<ku)FIU-s&pkmj"+!0+;W$O,2CJPt\AC.V+.`B&l68J(JTZ']Z*k>G8b
%.A`7\CN0aPMI$p6L`/8\[.=R)/q_m6D(g@;_ZRIA97/?Pi*&<.$TDJ75K0_u8ganeAc7QXM!&s2V]R(^pbe[`KRc!G?lOS224uC9
%Ii1b4kB?$l7u3e5#(2Etj0<.@$W>*N4Xps]q/C;V]b=LI>I.0lM7M(@7_s9q`)if[mlS>#R"]t'Muj9E7Onb!\LjkrE'XY34)^LO
%[uWLE4SE^mR:nou3La*JOGLsbOEs$>&/moZqViG`do4$^Mj3Bb:dF.;@7GOVTPCE*H-Uul8dhLMlEkJ3RJ"T?-)?D2$Jh7Oi3MGR
%WAhs@CmMo^W,JPa:YFKopqo)1#LL8PXi?%S$/N`f)S124V#.(0oDYK:""T/[T<q-<).8@T'dhUdKa&c@YKj2Kg'8PVgh:[S5Bu%S
%IX?G!qiB@rH$TB$O%D65i*-sM2GKSdHa#lqen,KYfYW1LbU5f`FH1.XgFS(]`/Gt],bHI2'&'cVP"=/X7U%8C._$(UNuT&l3.RS4
%N<u:"co-N\QAV<Ji74:?T]4H@TdfReQOt.r6O)U#"jtK99Sen/L17d%c(HopCfg_/gWg1l#KGQad:GF-hXofo1P=W2IBEsc_63YG
%@0Sml9jVK;Xo!T#3safVperfk><?L\QQl5AAHtB15CYPDITAi"p"Xpk[1;irTO)`)_]4OrX@C]2C=,Op#PeX]NP^nI4FS%X80u28
%*GgZlHI^(3S;6?b)Mb\#@u@VW\R73g16?NL)]BpB@fpfH[1Sksp)^?LV/DKoA1m"M?:WX$P=p@&lDOPWaKdh7+F5&0,6G0I!6(=c
%??l'0[sT6@i2:lkTP-SH[R5$sVX5C,-A4N%Z\u7!NXJ:BM:-kil+$Bsf*GGFfj:T?g*1j;)Qgk[U#R]e*DqF\E6pPlR,NZYOVt3i
%,E3[NJs,kI#[,O-L"s!$b.o,RG@"t2L^&b,i>Ls=Bo'=X'tLl<g>n(4bXB&RX2)mIHGKaA$LL^99lras+8McM^Sk9hlgn5?iJO^$
%.Jrk+A/BX3S%Qfppk\fsZ<b9+=b!#m"Jg^L!I@e&'dogR;o[;L[0tWZca2Y\[0o0R?1:EI81>b;=?f7,`]FIj@_X*9:9a=.Xon\>
%l%lT`]4gb,U\YS@Mh:/.-7r[hFqAD3IDt,^(hN.YX_^N%`"AO=Fi?<UPZj[66c>H_,jlZu?[daCr*aq9Gg6I2(n="!I5<]V+tRE-
%.1LFI[QE&;]XuiO[=,s/6;tUj4Vd\LYf$=,-bAe?DBBn>o&jj3UuqI`Z$hl-PM/4(Z@+jIV`sG?O^4.K/5go;dJ]ltc0*qIT&$$R
%DBD+7p@4"8#_aOj=>`B5O@J#.,9\gY$@-q#e![qd&u6L.&r0UqKVam+;25*B?XCOS(3lj8A40k#1@kXeeV_TO2'\'.(==W]df9c*
%TrXd$cS.Y2_*X?;ir760Cu@7Yp4_7eJ'RVUO%>sNJ$\T-d8MP&KE<'O5lNeaGdqmj$5#\7$\GUib"iDFgC[^^]ut%m]!Y8H>35h%
%bNfFeW]9QJ6&`KVT:D>&:TnsJW4,qXkK:/HrXaWn4;LToV!8m2Nb%P',V,ON:FB@t/q*@5T<ZF(Lu8O@n`m'CcRgM4GrWigJQ1I6
%dcrrZIC&rD6:Q7L$Pp\7dJocWd.D+K/>RBXSI:@=OlkP(gBb0\G%%)ch8ZF;^k"9I'n$LXj*f2M:6n3XLAHjgHT(P@#)<F)K.%>G
%&.IHL-JT,H:R-%M`&*"DdQ-WgIb6nCnY:QS.WaZ?ZP!ncCT2[MB9HLR)HfM=35JCA>a@Z>FZuRP7SihDl\C$RI^ilXWY)fn7jRR)
%8dNE+Nqr"0Ka#uUPVKp"[0#L=/9o$Bf2$NiFXHhYQSl\>/kAgSb\J4IUEKrFX8CN<khU-3lJ[.iN3ba-=#.WWlD"Q;"4BCnY,pu7
%-T"/EpOWGZj"VZ+<T>[/3]C"/&tuU+<qN9BZT_UtZ^A.uDpr8ir#tC%!Ccdr3.NH&k/F:c&>1bYLG<,VF@#BAA7X1],TdOfW6Mj$
%CQub1_68NkF`2@\]+dXZJMb+H-r'buM+0-K;jqAZ:eV4>?Z"h#7m6.bf<-GNW(nuA6n.qnpRh\%jrZ!8PbI1Q_SAi)`9/u-SH\2<
%\i[H[>nhF_8O$]!/Q"JeX4LK88>tl=+W[Sf^h3ib3=2.cff\[;7!jsIZdrZj8!MQS3/"9nnqVHi8F[#/NodDO8>W*5@QN"XBUmD9
%W:1S@jTJD!fFG@seLg4]*A=A@j<(]($]qYeorECDgI!\V9%*Ik8^,20@"m"3F?A*lpfd3l&I!L]+;Pp^FZ#5<9*.,.R'CQehB`F,
%E1ip1:mtHQI5<7B<Ije!RUd;Sn9m%lNfQ6+9Vt(17GORWHBiN7;G]cLHsj\;6+(0TQ-]N5UT!#/p9*ji%l5sBC)jF`*YpI,-Q7r>
%?VmoFU#:/0fo8q#3t76<jtuK%_Nsj28\tj7\J]>k7oFqJ2%3$BXD<2X\.)V0nZr8@eEY,mdL^rO@&05u;:;l&3LS+]5-F9eLWu1!
%;"`V;j>uL1XFon!lMXTEAEY.tO-r3PiZRUHCGSK]m$.CE<&^[2L:D8$"Z3KeJ"ps@^ZE[mpYM.'JBtS^R5"hkZ\'+pO>AMP#^"Z0
%D`!oBa??3S2]9b57oqWhR<EDa;l^#En#>qs\i97KM,g7M,E.a4L?ZD1&kK@4rd#lnRSQJL5eEfD_a,Q3at^TJiCZiPUpo9'@U1,o
%//fAp35&EQL0sW@LVi[U]5u&^_!0CHZ\;8Wa4Wn<'.S6N<Eg7n>*C]HBLStiQ(Gp+^0X7MfV%SA^(Eo3&66@60IaknA\TI1""5tj
%1I(qt7%;r_rQm6p3)fWufU%[3b63<+iJ4.DCS]]7Z"]uWi9/r!Ldjg1*iuOSh>79#*Q`lX#B.VaQq8mVQ/GRCf+('uJaRVtmB.ca
%>bCeBJY[hhob9Rp4eU2caV,#@bZpF>.oJr(%;nO>X2HG>%&3J!g-e&q<1h<\h5!gcCDgBAd+*tmh^uBm+>_h>4T=bTBI-:_;*9OD
%CB^-P9S3i,cK'3;]fLZ<Hq.5l!m9?TV9Kr@`n6W@1Z6PG=-Qi^]&Bgb#RA+B*Y"[_\0""<_u?A>Z;D?e)]VJn].+m`1:s!mQ+ML<
%5dS:T>V;Kha[VXH?'pMFgnrj'IUJ(mlX8=.8^QsLBKU6GD[N3_P)^RVS_e"B<t(mH/]6+i:80L+),/ZP9*[q*EDa`Q9H<KP<sI&\
%MVF&uU63Y%X&gP3-IA>0Di^`pM"huqE,^IpaC)",8V^h>#drWel")n(hk]MK(.uN#)8+igqX*Tra?B$M"+a-#k#8X0Eb5Mi=:IUE
%1GNL*@Ms+fV-S<H0WefJ%6os]WDPq9@/=+b5WQAuDNq0u\5TF&]\p+6E[-+`'Ls+*r$X33eMiI[#Ikp7W_"KJ*RY2%Xd8m8%CpD]
%qiKZB6=Yl9Wl%sN;L1aB`;KqHFZM9IH?UFFb?r7#J-IHa(I&[_6"PNP?,Fu[Dh6=0i/S5i#"_dXlJ1_6q,.43,.bNU(<l%==CB7F
%CK":D;chAmO$>K/O:nI)g0-(ji@'KCD+!3mfUrW'U%+>VeN\bB'0R!6[ocJ]i6;0q./?.^.*a):HXu/VE>mQ_7aQD8l0uRMl;oA:
%M9Yqc1/jH+PcD/GUYbTnK'n2Od[3mO4Jrb0'bahMp0@Zpop2VfSG<Gi3[>[Ib95:lReYDgMK].a(#;`RhlBt;KTs-cW>?U$p*"o5
%a=R,'P[Oa&lqf]S0Y's7&G9p/0Du%f]n3bO`H:HH/-YD>;,852Fq73G=5@4W7f*J&)S5Z\]>sq8+W(4:0\I!$]IT^h5Il1IMu@0J
%?o+Z"8:koDQ#`-ID+RP5+q6&!_a5')BEsB@Tq5L/K'6P;7R%;+qDg8i(EW-NV;%%cU$M$BQQc4HWjp^[PO6-b!!?kkBmc)Sr$g:c
%W-r2]!?Xn;^SE*`lJ:ls?k;T(;_Fd1/dsUPT31!\h'FM.j]#ldi_?UNS6dHYV_JJk%\q0/Q7+.Q`.Xn]aMe-&EBE=(UB^^ONQ95V
%,0'<j`*(^5WWOoCrSinB5^`sH**QA2:r.t"(/uW8m>ae/"SpWXGB_b"_/)=-G,^Y4dMKGWIN?]\I1U+B%n"njBSYYE!t!Y6`<+VW
%1:QGoL<UXb\6Ib!HB\A.N_Gsfck*!V0ET$7E:X-$3G"t+1TDbSQ\K>"'L$/Y`nf+erit/?[A2^(k</1]%gd?,l&#&,mhr:g0bf)2
%0'><iWouFh6DAMrq[m)KW>+X8?/IV:^/!]?Uqr&uVc6JadV/!`A(]`7e8h';KI=F_F(^^r(3)2Wr)WB^jUH@7#-mPg:&>)Jfscn7
%0\k'/jN7t^2!1(%-IRidZgUQC']^i7]k^DmKhbQ3Jt^RJZeH-(F;g\?$1`JpFuNED'7KG':^6&TX5[7JihSc;=[)=RY<Nqs=-$-*
%''k9o#Sq[fDS;&D8gp_2ZC'JK<=_i*NKh>jV<r&fS68rMMI2@?,-PQs+4/_OD+RIf:N6$C2f^Q.L$A]456B1A+u(sN&1UE?(s(:7
%-O(7,r'PefJIDX/GY&JP,NH(">7fF\DW+IY7Hre0apkKj+<gJLIJ'O;?[pk.ia@^[C!7?UpY8+?1Y94#4_+s6I\RW3QKCt'Ou34r
%rhXo!<Fgd,rq^<W-2%JKCO':E!OK2ET^GUN`MD89SemXRgga!3&m["V7=Zt,XO.ai<^0#VTS3G3)5,o=T\Q+DQ7AGO%Arl@AD94m
%j\[D=rYTHuR<qM$Q_P&VrXP/(]u>Zo#24'AM!pWEH)l@ld3o5lrl;lW7(=9(rRdOKE!\#A<YX'B\.Si(8Hf`I/=6Q>B9?WQ[/AnF
%[I6amMS:nl1Bu5&WXZ3_PRki]JY<_,rE+CAM5l"$:l!O4`YNi;$2^t:$aEJQKaoH&KBY6Ui9Zf&E3Sn`UW")kQd&i6pR.Hu.*W&q
%')/ET+-"RH:Ok3#a/VnkmPLR[k7\2YRR)NJ3=I<q4_?QBquCCmL5h\,TKNYq:SH5?K'`4MO.B@HKLBf<k%:]./f8AcU;P5M?Q;$g
%6A^%NC0B/3&W1UeVUghuE[9Duh2R>jX]GW[CgYm8/ICQ"WA$bu1m-Oag$RDrB:,80PmIPXg_NB-e>Bg+n%2`>>8q81:W4eRZUMK"
%+,]CUD96Qf#a&F`;*qDjb-V)#a(>!,U,.=Ar+AZsBnh`64858K&0E0^j5]ZY1bi=t^kQG1[1@4kD9sMUV[iI!]i!KEFK6)'@MgY;
%`1q>0gL8Gq,'8$R/NuL"eDk)0/8,p/a/*p#T;j-Kid=4SL-c?\gSd^YM^#4UrWg[[[]dhu&1](;FYoNm2'"cUQ6=oqZk%sN9Igtk
%#$R$F:9"ha1erF0)uG'd%RNK^)+@uC\APH,oX)+e3g;Dka9$;j"nP%uj/UjP`om$h(rQMfXrt50qORbVH=7'$.8Y1oaGBb5G2>6#
%`^X]uWLTI*>%f>&]lYrV+j.q[,<Oeai!DShdg.nd[5I%3]90RkHP@^Z1]W0=]dUe4/\j!rNB#5iF[kSW[F;cu+*7LIk,VSWA@@+!
%&-I$eZj];XmWAuo<b81t">53Y%bj`9d47W*^5h&l58B?s?1i3BMuF'p)P:Y:JNs5jXA5R0UK\UI!.c=oOoH+-Nda?!VE2_lYV\3I
%kiYSJV0Q5_J;U".UP0mQEg5:IFbVY\bKem*UY<ssp(7X.i9@:>P..#*?`S,/lA+Bi^:N,(3^7h`NQXE?+tFE6"D8%Sm]7Aup<f<E
%=/0%cPZ\7tG5aAIO[JD,`U=1V5j;0j$h:7gDL2+=U\b+r3E>cT4TcW>m=$Fi-&)4N&t&M,"4AU6X2@;;a&/h*="II.%VY$&MA[q$
%adnAuRo^$!OJ#4t2)Zp$mJGVc*4p&14[D?;3,/e?au'mj.$e&#@dJoN@aW"&1MISsRtC7^&,K^HhA.@JVT__sSTOfA.^\+"]ko-p
%Y\Nge(=a8I@OWQ]!S-C":UR(tgbHZ#'g.g)W_fHU/.]Y?.?HomRfPZN[LEZl8>Yp>HP#'@_I?A65;9^S=ko%d#LXhp>aG3OLf8^o
%((2E2S`hfAM%h3hnXCG"$1s`n4NfKgV)#iEfbJ_G9\3lrFtoS`XP(E3%`o*r<J)8N6:n_$a=-KaDm[5WrK1kf@MpH6eEi-pJ9)<,
%9VnQ/KMa,%@$D/X8BU'-i^kWk^_f2NkI:Cd$HkK/K\'(SGf#2>b?N9t8RLrk:=Z6ub"[kn4VI7\W-DE9c+cm"?T-qQbs,0J<MeoZ
%O8s-=4uTm@rITadDYnR6M,6`pB;`;clc`eRkAE+:JV0u^nVs40XHO^i"`3%>Q&$(4Fpq"OJJfshU94dS9de*1?3VYe6XG[&i_D[l
%9Hd9A0a7G[L@^%S@`Kdj3cQFR0IO3lJ=sQ@T#Z"XjO&?hDsZduGG^aDMB!Zd%UVjMq&S1I_).fq061a0c&jnFa.(8orG"S>NVmiU
%O-`og<.l^2D*h<U4%Me[GUJn&E[BX&I9:/N&nnpDTmY&jW9YOCDu$(hQX<5T"k7cIPDhK"b.&M@#%DC)Jano"&r=,>C-YO)<os&u
%B2LN;36a:&ccobQgD<EN=u5]6nf1uMnCIdV>UK[\da(G4!bEDfrW%na,B4AgV3)o=TM:9\U$?-h,\#]KN$&Tu#L?4/gbdXHJ<+l%
%5hP>KLJ[MkD$280-*nN,[/lLurT\StBiF49AG/BE,SMXbUt0A'>DD+ITVC/t%Daf%mlC)?oK0?B0cU]aa2kq(fk109@>Dd5CPYVp
%&Xj9P6?UDqK0f".l*2s3(K[_U88AaS"OI;YhW2)r<\f0qHjh1D..JO@8$b\eoA&6[c-UmYcO\]nBemt9+KFKrlqJ18Uh#Nt'sE%9
%F"IgD$*Q^df\bNlNERkl8k?B>+Ip:LKcE"8FFqQo.$I6N!SM&-mKF<4Wid4"E,#P%'jX(0f6qKgr3fJ<f@SkV5oAsO2&OYTB<@gc
%:(6jS#]D%jTW+NCo`.O6B;c3$0$XK;dV$`X?[eBS*=%pc!92L<K9^7U=d?^Na3oN]:gG*c?%qa>"\B-fWhVh0VM)S.`)$i_Bple+
%pjchQm\g_n2Fu>mZ+bCk9Il@h$f,5>T@pD@2>@R?NlkjEW#\)rA?cm1hMWqL=#H"")&.(1hf5f_r>J8+@*dXCAA/W7JH/D.`cgW<
%a`gD1dP6:upO5!E*mM`tGln8#A'4LmKVAf*m']cO)%84=0P2E(0Fos7&O5K'bJ&-oh3qO5G=Ve5$Y!#RI'(+*L<Q*U<bQ,I;Cfc+
%F1$-B1lX9%`t,H%6olop<r!$167#>OA)@YtB?R</J%`;""!#t'6U6F8)5=\@ULjKaV=UGqN*DQI\_02\ND!#NKTu,_8\#9>[BUlF
%l7l6\Du%u]eU[oaPg9nm'="Jnj<C$Z-W3GbquFf2eOP[*Bsn5H;VSoO7#g]REO`[@lpH!8>.>f:)2doZ%.ege"2;XB_LGoV!>p0(
%m2A@ek`pIoQ"RZ^[GYk+R0-7"QHE.UCWPG1h[Kn+$*sk.FVGWa"mL1)Ld>[rFY#fg&4&W9a&VX>UqK-eF04fgbut["e<^2c(g2][
%WX^j/$]IO/#u9\d<EC)=b)A0,jSN:6A5W"r9L4`GW1lOJ(Du#A>E2HfV-Mu?1(Yd4/!9=`MGofg(*raF47c])GFK4J>)91^Y_2H*
%AbqaOQSUZ/hoh7.*#8R,Rm61:m;[GR%nMh.G]I%Qa'Sd*([U8ZZriH]&<"t57$ZY8UMqs.cLlQ+:)3%]E*Egk:6jn&X5No"aVCTi
%?p;T8o:3;eR0OGG\FHWIZFA6fY>5t'&PfJHWhb%amYOOa]'*jcbKSRu53@$FouZU*M):l(Rrf2kY)_d@Hesf8di`H/+<b<CXr;<^
%0[uWpX<^guHh/UhXQfI8jqj>^+i[Fpm@d2_O=1Q!p.j_4!9CF[fA&,3Y_o19SmGSKNhR;qdecZf(A[">)[H;<[YqEB"SHF7fh`.k
%4N6FsQp=79kfhjsF^N_G=@Do@1h`l0E3E)L*Ttg=6"2=qd$i'^6)$.Bju%u\SC+>R0;d*bGkU\c*Y+:nd9Z8F>,+/R^,9EeB4<mF
%Bg-_&.EseI9\^/(Mk9\)*R#l1oUC@+LO]9Cs8&r!qeuJuT76C8GQ68Zs0ocClq*e@@+0cdU2*n`cqG+6_#[D-ONGUpest[0*>&LT
%#Kh[@.SqUUA#&@#Cp\a^D](W5Ec6O:EYX)NQGIV[d565E==<(-/HZ\!hs>Ch/Z]BG_!-V!R`P8%k,C0)LS%r:^"K*_Z-%O3Cu*.l
%o^8Wt#pdRHqbZ>X\Xa(CS#6KVl\`oG02TnQZ&hJ\!hRH>_.Ei!ot.VY)^4CrUTo@8l-A[Sgt!WbeEaacU!)g!M]/9bq:&5n`Xd]>
%Q`BE;FVkB`@7fCOL6iS9[uR^Q7rARP"OWW-(?&V\.c%/4\<$iK;%;S56hb$om3-!T!J^\4B)\OYrh?Dd@1_k2'EnT.;9[3XRd)aZ
%2oU2mOpT9gchO#7j^sX>U6KZ+`hFK9gW:n13U>Zgg.g]'@Q08S7;HWJ^,@eiAHK.<(s3*4O+^'oJl-+sN-+-351-DQaQ-V_0o&OS
%B`J!u]Qd)(e_0'MA74:ffZ3TCZ9+oaUtuZ]I0^a"40GePE_4?q-Hl=Ci=$/:)5[el@+A[PPU:j[VbS8.ZL]rak%?Os.]1&N>c0ss
%"(]`sLuNPQ$3k\\l);UId^,T+qujT'p9e?(+\Y(0#NVnoaSIB<MfnO#XgYm3gr445G'TTV#jLs&:)!\=ap11f2uD;Y\eTC/D>Ksi
%;9o.>BRjDN<s7E;dQPE_O!Vj7\)+N-)^WFq#,!`P4u$Zt#cc9Y=IeUL[1oPd<65:H\'a7>)Tq=l'L5c@Vo<,5AH$6idOXa>[a$Z@
%o\/NUK7S5oh975L1e"-iCV0OE=>-u2Mla"!6$(@M)Mbi2BRI//UhgE2gm7Da/AlhJhc.`Pd)"s$XGq>P?.[p/l2sPkUaP'$a_mlH
%b&O+dg<:"tOY![77^&+Hi^/'lg$M7eSpi6d-F@E'WL("Na5Z"Po9bP)!b+'[N9fGjbP7^Mf?*m%U[i[j+A.duMNIuTPt-T?%`TG2
%-(XTq6JCHMNC>Hf#QaK>N8u$CF5'db*K@gZl)2H$'Ut>W=RUotTJ+"IZNqNtHBk?I1g.NaVIVYGd]k\VD2Cu&!uJbP^1p9r5-J`r
%HI2QC4FG$L%K\gP"TL/aR3FJpjtsWi3Ut:t]&WRMRjNT8O5fqlE@bBl.<P@DLN(6]j:_Bke;'C5E_M5q'(!FV2Hf/>]%AZIZgpq)
%j)hCY8:_s4QORb)T19+jXta(t;mL>36O5M\3g"Jb2'X[mAIMqcj(@6;/m9nJ^n16JlnRTpkkS>MGRpVt_Z-4<#9d)R+'I(Lk9cI#
%[e3QZ$4%L;6)Cn.d+Ig2p$M1U-2/LEL,k1/I,%E8ikZ7!(AIR+[jLuG3MCtn0UeM%:FHrFVNKk+OZscp$8_m(k[=X/%/*"S<#?k`
%Yr[(GUGtS1k3ipfA%^RG?BhRnap0%KktB.a6*tE9b$W>f9MTTjJ1,8uF>NXS?i]K]%@JQ_2cJfc+RDi[*ORc$.CuRh1+8>Y3>S'g
%1[p/EmuB^E/a[:.H*BA?bkp*ZD@iP`>ifXt#iaY.Ns=h@%0M^N-,2#f_L31.3M')ODPG_a<,Ffl0+&8c6ebpFO=*&8*Df[2"'pd0
%.G?mn"A?hPk^?eWg)c95djD.jVPec[OadjsYpr(CJKLPn[4jP,\2!0l%gGGLM7GQ,>T.0V&e'-DW_eD2Y@QoXD\f4J,P(X'V4IcV
%.l!-bfG//36aP%8MC(SE*Z_XQ1t31YGK+;)2e8J/[2!44\Cl*)Z=hD;UNISaoY]8R9/)Z&48Kf"M]&(;^B66hnYpB?^.8'4>.f1X
%o'$tlIm[4])9,]g?9lWN2=7-%OUlad68n8I3tdbYL-'-(OC*NVpthq['0udOJ-Jr;ZT&OV6@h1fK\AO^s/7tUTO[2@VPD=#&V$>q
%A`O'W?Jg#XCR%8fA$?3unsjCe+3YN93p_<?U2+*8]?_tTntB92-!'0VD1\[U[,HlS!DqQu0NUlSXp9;inu`YJY1pTJHLtU=',aRe
%_,0Pe4+]\blr0m-PJBRG?Al-8TW!qbU*;T9b558BNSTu$14Qe;Z=X/8/Z3i[3j^7F;+.u7DEI!+BtZ03)k"dB?q+"GN1#s:<Mfg&
%FbQ@g2QttVY07iJ56Z<]4ctRf-jlp%OfF!oB%8e`I-XC$MQ)KA/kTL\V/UjO+!H3JV^mC4+G0oE[nQ!n"3%X)X;GrAJ;33bpr^n8
%Xmk<a#3'B-?6:"h/&#RKme+gJ(,qT0+S2O17d!0flbKeQdNu%krQQ!=o`98aNmL#gnp+9'CtuiDXD'FB&H['b?:GQC@T7<u<Fn`\
%nlKE`c8l$?h:D^4egOE\&QX)bG,m*n7%@n'h`tLsN)%LqOYY\><!g\Y&JZ^NbU1EMcn2<da0?o<RLhng5(=rdW0p4W!N4ngd7W>n
%pp3d.&0k/3S.V*3A[00/@75G\`Id*3Dj1(d4M1m)85ou(qt#XsIdYVP;oZ4mXY>"cP\t`D2g(6-^tb1F5]8;!reZ`^mgV9aiWiI:
%dH/`R9[WZ'$%\rXD[-qf8:B=t*@IM6Ra`+36u[/HZ:>6^G4:tV0g_/%qc@^$(u\Y+g^u%hTIN]8jM[`YTBUgFF6iHQ-gaUcKZ0X+
%(s>['>-Gb`UKY]j*4d9S[+h+hXFS"lDK?N*Wr)FcPKu`WUrKBU$qoHA4K%%?rG>M.)X^)*(njRZ%]J(:NT$XK3r>BI8Mi[;qo2<O
%[5)HS5eId`aZDZ;G&JVEfi0omr=(YjMke44ch=WUU@-[amT_'C<50DKmsp-`Dtt;[mV_BU,:*[PAp+S5=K]6n;.&.-bdm9X4qep(
%R>6Vq>t7&.cdkrM`#GP>6CYD#p#M5U9]#qO@=[#^CSE*U>.ZA&X^[)!U.CK_U?02siJbgRX=.Q1OfMU:<"7dcn+I1%]H9?Fi@me"
%Bqs*$(4/]n&I^QcjNJ98XW7]J>Mn:8\tXoD9JE/&0FVNhZNX?+ibkUU,G2+6B;@[5;YJ@KX74QU+<$nUk4)ENg+X_N'M0u1[sllp
%2rjN+:/!")RFAjc1]1!]/LLr,?X$@##Is40EMS[2+(:h_V^3&aD!^oKp.@?i$[IKT.CJZ(dU*I)49[Nt0qo`K6jMdg9:tn)&*rWM
%lBBPr7g$k9J_(agSmsMqQ:4,86X<NrQQhS`ht_7S2Y2\Um_/aR"4N$IquJWRPtY.uPl7+p/_SLS]Dg1`^%s!NNo82D$r-ms6+ij,
%[$"#,Dan@]O?TuiS;LV%5YLh+@*L\F(0MN.:=dGo\iodn&s58&A\)gpUP<5t?CKk.[SrO$3n*+\5d'3t2$k+eo\I<K60*9*la-$q
%qb2g1ZGq;@l@kK!aQ+4(ZBhAU2Ji!<rID?\O.3<>Ha;#rMR'(3N4heQ*F=HFY"M.LmAeoZ`oe4<i23H0:0T"X+b?Ta]UapgNcma7
%)C&SrTU`P,AOct+,r6,%$lPnZRJ5^/[DOJ0(_]tIhV$H=oK_QP8KtrNKs0QDW:LX`jk&`GWgi7N]CHbo&sGgM`BL=HSjZ_u_e7&*
%#6Y8RTM<&Uak45OUiO>IFT0@b^o!<$@rDU$OckG)l/8,FL<?bC>qg`RlK)Ir<)-`1A</@&VBQh&oKAAfkkA.r>;BV0LQ[#;0kbM"
%!0;LbPf7On8'odCG[?!pMp2[3lU/4.=[q(+UC?Q2.+0iJMs5&4"*-#BcNh?B;/tLe/=Hl3,`Mf2Nr31lb9A4WZ95cja@&Gh/*S9l
%>?:@^-`@F#g/W8J:G!'=_n'q6)B%7?KBAC,2/!Tk=/s#)PI&:6GEhSJhQ9Q+K#+Ig=Um<t,kb.Af_!_>A+&C"780sQSA@"jVb<:^
%^80OSa-hUTj:;f-D<HA_)5*UK7\EM,PIu\"N2U*QdlUe]7'5.-b/]1^)2?%QRLgd6KE%;Lj?t,4bQlb3UYP[4%qCgej2AFi6^<sc
%%spWR<=BJN9F)=AFgo[1!lrN[.@Lh$JfU;"HU=*19(/V`OmP::FA.M5V>o`[?RooIW+NuPLB>SmRLuJgWTP?DT?_QU4<pl^YZDkF
%BRkQg)1ch1XqL;[;ul5MoWh]0;*lmFUWm.J1`H(+i2afi!f[@eVf\uUijor;2NDI8d0)_ijl*%GU)"*j).*V8!i<B;FGTE)%Qae$
%;'$hM^6EM`5`n_dr0=&FAWs:'M**KKb<Mp^#b\TpNl^i"L1hM=MK-9,P%,H@UH#XNdNTAR-t'[OX6WOZR7@i_b^<[F)RJ+b[8h&X
%&Bf_0_'_^N./,`ZiK9m;c"KUs.JimIW6,)*i5/26(Q\:T5X?ubaVRC?0Zr8KL3bVb-YZpE'VokQPL@KX[OY&'-F[PL.ne;8W'\W_
%MI?jO=<iU@Pi\WG-S&&8PglOq<h07@@Wlhq\H>,qhe%8c=]^%JlHpYN\u:3-MT*iJm\X2,%[)nt-7=^heM5<b<]9VXWLKn:Mr9NT
%)Z`>:pMrV_aH&1Gj:2<XRFJ.-:*L1poX2gu+jiWkGtm&b%n_G&OJ(:\8,@I+eO41p%fiU^nTN\#QWD/%:lR\sdI,Ncp%Skm!j"aj
%4!+g2#E3sA'$'4sB"dZ2dQ937jKri->dFLL<ua1T(QQ4YUAJ;GKZcK64!SfN9R,^`/V=(7n98Eur/=',Ap2k4OK+_q!M.eb[gY&V
%K$0*R)/FM:i&7$Gb/J=_(C&r6A+RG)')nnTpF:[meot)"+aIG,(t^+i6"m4IoW&Y!fDA=]=.@HNl?IesF=(A>]p=VUBf"$T/8@bJ
%*P>]4MZjC-4KG7Jl?l*AUpJC%\_h"jVs_8>J=e'E;#Ek?WXTCle,DgWU0XA9#4F@=IeSIm*nH13-o(q2dNt@=JJfLpkD!+SZ>\/o
%he*FZ:h&jS&ojd(KON2K\IZ$lrpY&R#<WR7'u(rM=*=qd(tjs8*K$o:]>NukO+Tq,^4sf'+GI"C0pfP,p`984eKIh'_B;f2@Uo+_
%$4e?V9pE6AZa,`-`#"sUc#)4;=]XHk%B):rTI#70kTBIb#>JD1Oh[>_<+PE49fp+9rR1M("3EOHY?%V+1*P\"Yo+FE*Q8J%."Uu9
%Gi+u"rFIi[+7V;)gWOFdHPuKgZ75dOU\2MO,ug7gR9AY]-<F%g^P_dg8CT"&`\(Ss#Hr/?R\O+knrBOP!TI-.pu5dcjRe0m\d;^j
%Bgeb@LEkOfHg.ibR\!`9=bdqfk4RMoOsmTq-seYr[QGk;OCNX*/Nl[Ar>CC['8#/OOs4K]$;*,TQc"d52]EBJ['D6nS`&d74ZbDQ
%T[O%IH++i57rFX#27@`<5)s@]4B0@a64.UmB)[kG-@JpLP8@HDU<TUb-Aa#-S^:>]T\V"0!$pe/\q4hU]#Yj$6HE)NX(s<6O^+2J
%71><NU!aHqiI5<uB95N6pXUe%s%1?Dm<c-Dae.4TQm%`X6q5/?gE(M^.PBgc#W/,PQi]Y[#=:7rVA%,Ie><q-2NJV:A^j*\P`kqU
%e59_;'2UgDB@i^ha>]B[2Se4pX[5GD,&.%u#6p7X^9A:XFsM-W@Or#fU8-<^%F;@U95U>SkS2rs=S=Gi&3(\R]hmHj(4j^b"f$S$
%>8PI&S&TkE\RR2u6Ggm:4N\;_"uU$GI`p*e6.f>ZWreO7TpA%L#Q8MnY1/rENPRA\5hk]<*`3272%3UsjBP)2Z8AIU-68,ecHKq:
%[n[ZWE))OM0h6J4`VYlLO&(RmA5<FZ$4*^]5t-Z)&8*+J)E83L.[oJb%#W3s8nJ&B-0LYEkiN*=,O%_25G2`VQ'+:Y.g+%4ElBFB
%6#:dC]SBKu_9"u;+!>@K<'ib_k&9S,LQ$OMa#p-8PpjH+jU%ek6\N-C9@GG56c=c/Dh7ak+$L(gc;9j1-S!7&5Z9!a9aH"aNR)HR
%RM!#(&bBGWoG/a_2,'hMl8HdKB:'pncu!A#>S'e^KAO(-p=4aaMKO,aM&aTA0Vr_r7O@9t+Z$)PN$Y]A2hUoR+5Gh=)<(@!1[XrO
%2'PX4E\n(RBc-pD[+W2joYn]/b_U.b,@qqE)rb`eLb>gP?\VfQ37H`%VDTt\R2Q:l<>4V!3lpXV"_eU2;o:LWf[.#Cj1(`+ZDsUO
%9MdKAo(@e8JS_5@`Z!5X^Aj^J0i.ZWGWT-TkEV->>9$D>QTQ/fb&]5:Wr:kOXEu88e!H4K7r'q?r2[FM`7K5bF;oqV#;h^S.7(=,
%o$Q^''Bj,sI=P]`aKdKbl_%Md0hW7CZH<KM]\S1>NS5M:G.JQFg#hGOj$V(G$qFaeZq<D_'q^s^$/C"-;-(6Ud8)W+-r8%Cj2k2U
%Z-WPtme')fo;j@t$^>9Vnp`V,*R7\Vp$o/PZ?@N-GZ+0ds#YN7#U,*V?L(FppZff610)!<q^fG1LF8_l(Ljs%d(*@oClSmso*hA+
%/QcKDi(6fO`VcV]P+*fU=kk3VSns<gq,%Qg[GO``71&8(7#`ecCJ4:LKbT>GNus8?E>pQ%.?g,tNZ74pWaB/,e-S=D5.V7O]mGhg
%"`TS`:O3<UHah09B-1is+ia\-`nWGJA/:<pYC3dr/\9QB]a-G(Ilb8A,S?-8&N4d7'7#d_E(@+gXDo@5rZT08&6N27W,K^4#;m<=
%h,(IP!^8\HDZW?S5+JSuafko_qNT12M^T(?Q=@l/7aH,+JB%sdh1@uI@9D+8o)TQ0_<-ia-f&LOof@ht:@5M52:q4l!PkjI^7Fs>
%8nn.,;6mARUkO%&(R[=th.G`EibeSBG0@#WTO][=".?K.'N,('2rG)W.u[q7*',HAXZMMZaC0#OHj$b6[4,`cDg!QWB2T8#4e"KR
%^4D;Z-+fSnfQWc>5uC>EGKP>MUTmA.Rn;lD@F+3tXL6<]C+A?VS?j<ogMRlpeB'&+aMflNapd$>^A_Y-a"ACir8tb$(*"%7K2l<\
%,>$t<HEE5K'Mfn!S3*8R1AJ`8jU[-ncfgsABoA!<d)B$Xa88M57liC^##Sfi+e3]-QDs#,Tg8q?Atg/tVKfn#b/(1YNcWujM^=@i
%B,Gh0IOagn@cFaq]k7d('>PjPe-$K`eq;7Jq_%H56aRh`9K]+BVPp?TdG'*k_s0'hT:ujSE'Ue#_'g(bBopbY5('P>a"k=TOumq]
%(q/V#ZAO8shtYJ79glBI\:T4[RAieUQZ]5"Ph\D!o51Q^Z9`GO0A-Xd4`&*bAB,Qo/qmn-@F1</-Z7hE64",&/]CUm74W,K*g41V
%"e$!K%_=N[KY052.*uS^,.VYBdGY=PJjkm?HSYQA'/mjR5$$PP5/M\r0K(#bp8B^]qNWV@[A]:qij$S^a@!R]Vm@@IBF.m?W(X0Y
%kMeD$]MZ.$eW>aej-.1O)==Da's4gnHd#)U\$mU6<)4o*:-'"XCE!i5l4/i;0Fon+j=,%E?&(#6MXIF/QXT#3&`!+u:U@K0WKC_9
%^I+SL(P%s8gXM_6g=g2b.,b9`E41DT4#[,!@^qaA.,.uYjhu,BTVbhojPo1eJWP%S8\CTqrF3gu20@BHcgb+c][/s`p8XXV#U`bV
%S]h7k_1pFlrAD_3M#(_s4:4NWMuqB?Pdn&]2KYi.cD)I:.1jF,="(Q^6bdrg)00N>],,Rur;I$4VS>5V,[cu),6)Ut2M<tp>/!kH
%p#QpLb:am@+7_fa^*Ji)#.he>XIElP\^]%F-)=^I5XBCL37>XE\7K"/.:D&mclp3Q:Eqi8$Y]<*GtX8Sa'h"U_G#/C5L_fkWA'8>
%q_9QS?S4N))?nRE65b-7U"P%7oqj*um3uVQE_t$mSJ!k3b))s=8J3qpW9TjHY%/+.7:4Pn>o"C=L=/5AU7,ZSBo9o[Wd7_jQ=JD=
%:D%-9Vg?]#ZZ>lfrVgJ\hE0#4oDZ"dU8iaP7NKNOGPY8KPgXkeM#qC")erMs=K<mY_6;d;+[k"8#M\#??oQm3MPIdN=RkH.TNOPr
%)Z%fHNabooPTcZUg+_)(48VhEQMtApf<DW@MICg.&WX"g*`c>*pt@kn`R8;aW.&"`MrW<OiUJ:F`\r'?GAESP9ab]LmSl9Id*8te
%8@0Jf6j[tR7WCpY&S46klcS?X!t[2r\p^4$MJ-"3%+;p#%V;pu861)l:I%Org\lDQrK'kJ_^+dpoJ3Ol5b^Y5A2O&@>&c:geY;6)
%AO2I88uRm9b]Sfe!qE0NUe_/g9$0;*^fA5ZaQH&0#H"9]")+$_lb4G`8T%F],3iL`P(NLo"GP3SAtt89Fgk!tG3Z'L4Mo1V$YM\Q
%o^\-@!"-d^I7VC1=\aipe7nWjrS%)5mRI\=Z2ckJ$.C0kE)SC4";C]Y@?F0Q-7E^>6?+YrKe\L[c\',#[XdCkSkV-o:AP`dS=+O<
%CScaLgTJRu4/JN;[-NWo1":I\GdLZ0?)mHTRSnc,jElc`%VL:]/f<Z4D?W[(G?0F.9u[44>LF+C=,AiAUn]7s[7Ir47n;!cV`jdG
%4'gQDoX@GT-k<ON\WC)kYn01JKt&[onr.!cOm>qmnuPNs`NA?AAuOZ]=<S/&%p;:dq9Da_-b*O`EA--r6oj,k!Y-<2prl%1e@+L@
%6=bG7:e&0fI+U,\8oZPDNh/ssn%R7S"bq-c_tSL"VPb!DnL:M?<$)F&;,hti$E,o:Z+F)9oh74<@kD-\s/1qf.@>i;ConFE4VYAO
%$cE,-[``iX^DY4600[C0'R"SY-R:suoA5&3FS$@N1G5.=O#lT(YJ/)@.U0S#L-$ikh?h`(7MJKG+Out^P2[saZ*0-kW"7JaT1f(4
%20+p(pcX^&iC+9)&kBB74)0kiHN;JM#U+9oaDuWXL6i."rM*49[[":bDX\4-3sfW?+;N&g[A\D@C*,kHWQq;K"hY`]B)irjRp:":
%nBrfqS!HbaFnFl2Sbur4#[;qu:uF9JQ9GPR:>[HCAfV5YJf5MW"N=k>W$8;QAhN$`Wae(?6.7sLYD?D!3N\i*9TW:*+]`pk8dl6J
%U94=!R2:'LQ`h/K#MmO;c6UD2h8VA1Hefci3m<ad/t[Wt/\o>c:mm%J+c.d2TQpA0B6\iMPK;A?4b)&LXuhe"=umF_.1(8crnUbS
%[$F=8!YE]6mc#Bk0=mP9YcN0njme.4&++Z.W[7s[-PiVaet\Ib?#,?J2Dr3Qdua.]>0=F>B_E<olIeFDZ>mqXL/?F1c[FNf&A)nF
%At'FB6+NG]9M4E]aAqCt8K8/,e\45/mKrsN;$-Krdd-/JDI<+tG+]Xrj$;rWB6f0`/`s^/=9UJ@L8#11ZD8ePTTB\YK^a+-W*pC.
%Y#s\F\l`*r'!#X7O&%t&iO+l?;g/7O7e%/I7dl#9GlN@.ih:r8<(I;Zo*#h.`Xe<QqaAO^!6?oQW1BY'_-\pWNY7h$\lPXLdD@hm
%PRL5],:nj39K3*,q;H8J=(Ct>M.&Yh-J(9iI(l74M`[M)%1$=/<=6TL`psS[HYj?<)"/dh84:2:5ukuP'&;Dm1q6!K$@+3/d2pND
%G3hsW9/[0#'_<`:Q)UtarQtU.cYN2_Q%P:PV5(?r$1AUE:J=/5_L'XXL\iIfHiK$@H'(Q0p2-sIQniO-JfcDpMMUZu2;7+'+BtR2
%I$am:9*"n>bm?I+a+T&=BkBZkB9@Nf*G*Xo8X89$'80@S^5Wducdmmg59!I:)P(%T;(5it\\q>W7Eq+HL:i+Aq9eBAR@b^ci:2%H
%DD&?1H(nYpes*jM)`[(b<#"GuGUJa"M\d((mNRKS?-Ej(:H.peJhh"q8tuHfgh9)dZ6D68&p1-Z.i]$,<R>>BN[0(NQ!/dp>nJgI
%aIT(7nN?qG8m<`PRa[O$^ddY4PWq<oH^T.@.*b)T/Kg41kuU6oIR%u-5GW9%-r)C%`MA!68B.T_FR>R1<WX@SaC;qX"=ItZH*&8>
%7d0'm&?[TrQWd^EL]TVL,6EHMN]f80lf<>)8[=];^6[P/&QoX%;cD_*XbVRMoE[m*?P9/1"<cre,(h[]%l_-GS/;-SWYTQJV#@oo
%(\1@,6e?DE]lWru^g,Kh`0oCre6FSiUCM9<[<Z(ZZ5:S3/pklUdXEsMO50DN7b2A[s$GrtFD]EfeSX[V7[S.jY(nLI`"mTP5WC@Y
%nd.a>5'EHOCQpVcc/.IuFJbh2O/<b>Hduk`\/Y.+ao,m[Mo@@1oBe2eS&)^RE4>W$$J]QC\c;4!\%VOM@.iE+&GXSdq1&G>LPJ+o
%l+9l5mb?Xth;A2&GAmNRmI1)BiOed'5Q(?O^Kpm/00fI1osa!a*Hic+!i@o+qp4/Jqf$W,h06X6ds'^L5Q3P6XC\p>`)$F&rU7Mu
%rh$t(mI1&Pa1qM`kY(pHJ,."Vn%O5Fl#u;H[4;%tL)SfB4QeZu^O>j;IIHt$D\@5ghYcb*rr,\P5Q8^\s6`[tqtB"Kr:@D4rVkR/
%s68S4T3h@H8&M?k_Ol;0s8BReror>7BP1?NN1]B=NV5=.^(=`<5;b7riOe"GgV<dQV/>*7*O]S*j-Dh*iU-[>5CW@In':klT%0J/
%,r73fjJ!I8nNCXeMgfgK]-"caYQ+SRroKcdrVkPqJ)'e2]#CFKT.]tqDh%fAL[VtW0AjM@mO)nbDtlu)$<j?@;uj?s>6jbN6[QIg
%i%Q27e_Yk1Ujf_gStP]3EM-B[`s"X"NoM:0"1U2M[!>p1IG-eKHEUe8I4[kn\=XiR3'jJ0j+<lsNt]*3n+)F4'5m^:MesS-A;079
%Y8bQd)os[["*n4&rjm[YbT"V`bOrj.=YQn?l=A#l+H$&PI!#S[C)&T69lcK,D;s<17#hKmA9mN6%#("XcN9/FqAFA6$LWTNhm$5Z
%5'M%thEqt:rlbK$[0<K%2QBJ0FTTG2XN;h17V$+<KU5J$eR4R(34T:Bh",Z`.e%pi5GUOLA(':M^u6::F8_1=K?jeF\t*)>)d+-,
%5a<"8l5P\5kn8f-_EnMZ;NHq`f3OaQ0'O`ij>3)]J&3b$dNI^R<9`$sSMR*V]B^)K/=_8O0arc9X?Vj^/8>Z\`fjigZ;dbaA"k=K
%*0OPomNM.m+.dlN#H$cIcH"XF2+RVac7lKhpW^c@>j<Cepf*YbdO[Dr(PSJbbeFE$dek9/MLV#P/-[qG16;)rW\6M"A1f*F.oO5>
%.uAf%Z:SS(`q'C2/!?i!J\_+*TK%j0NE_cmHd5g%9&`*%^TG:"OmU"@c:4:!6J_lcp`,,EB:V/hqHtLY6HCSWT*CHg*^"l!0WQkK
%"TSu9>"LE,#gF$2pr.&7BLfu;q]$P/B\NIP2B\/sqbQVSY@7T_`1+E\#5j;SJ$KM#_tsk<.iXSobG"m!]m+Ar-H_8H12O`K;:o5m
%^mEf+r2A0br2#<$,:\rgB(_fH<,@C;O]_g$Fi-BGCm7:K"#c(FQXcf4`t&8m633KN(hod[7h/A4:+k^]4MIu[T&TG&01WET>*g%Y
%8ndE&QB5TL=^(oNo"kI>j3SmghEP`rj01sNZf+lF;omV7nO%C!TfBXXPW0D^78H=J&0i8!3K4P9_sBi?;Bl5())e6PIX'V*?Z$*7
%B$tG:rss=8kH.9.ha*iXs3J<0J>tN?J$a^]6%7WU5(aZ&r[bV]$F7Eg&4)F:M&fKJn%*P99U:MPWY#$Ck5/[Y41r=b2ZB'V@R.)g
%UX\W-PB<7ReV6;K&S,[s'+3eb@*]W<"]gr4G9-[Eq5sogNEo'9d<0+m,[:ep3Ci7'$=5se?9`mne):[TY0bUr]aqLY&:o6WF@b)1
%UOZ#X=\\YsW%hhTQu",b4eh""!_W$1?H]oSoGL)3p]RmT-ShhR73A(9dH52S]pL@_5_s]8(jDm?@o1CJK`Q"4f_`Uu(I7,AKKfbI
%![1Rai&!Y=X8o8jG4:b@6&"J`en<Eh"*W-aBsha[41Hs:h;H4_.o]H!+#Q9gO]e&1T.3>T._QQph5.2hN2F%7r]^,8)9BmT.aj`n
%bq[7\QS:X*;=6T+&S3pA=e8DLKMH=`W!\7M^eVT+)7c=PccOH-QtZg*<@M-QE@M5O6-h#Hcij()ncg*36O8jX!Zbf]Jrpk%)Q=3L
%hMg"6Wbm>'"Qn#QKkT#=f(-a3msV5ZP3I<f'd.Rd-8PCd7qn7\Z&q_aeuCYYq66`,+)2!>=&b!.iJ>'L%$o:V&0/a8#%Vc:rmgl.
%!VprN''N<A/&?VhEdJfe3k$.%JHZ1pI%OY>s!g4C5XGuZ6jI^C]t6`q]lWh&6L.=@fc?;t2lLZanDnHDlYu_.mstF%V+Z9WD?BXK
%q!h3dL2*f6B974CEg7/782:(E3SF'4gm:5fFjD_o7=W&9X-Xkd7t[I_;lI,jMWNY/#g0.:Ac]:o0bPbHW(S%"K$His=S,+gJfh?4
%"6.3=DK@/d%kKeXhrsRLBE';QSK5PY-@U3pCn9r31pQoAEU\?NAgOX!Hj!Fu+Qh(>MMGA7]Fd/CQq0]DlbPZj0!u)1eZAEZ9JI\g
%nc7`7CGfoRgSdFCEghMTb`bRuSpDnn*s&N%1;AB`A0EH7l:\B?K;gIBLsfi\lT-i1=>JS"S&(836jZ1b[qT2JLDiEK9#en6/SYrH
%\SFZdCI^4.*@ZuK+]L>OWfmj%i51&N@B1WkAb*M8l^*E#5g+p/&&eE==N$u0>ccFt.$hsp&9G]oMt@\*q@M6aI)?JjP5[481NAu$
%#:bY<ItfL>/A+s4,VqP5BuXl45U$l[F=2a;Mp1EMJZ)&=UsZmXl1eS+1A0j+XXHOSfMe"c!STfD7LZTm9Fi#n,mK%Lp%Jg1<;_.K
%s'iK'(8$,4+6&H?cb"QR"_p',hp-S*=ame:iDZs^>"2t(5A8%#/.&_Rmt=.Z<Ij$IG!lIe2G7Vd!3B*"+JeAtEk:tH2Pi8n_k2=n
%JHM'";r91,L6qSTLgH_Q,"Js?#jJ(o-$./VI=g/a[J;cXTt`<u!*FjZ:%FT,V#&-7a<>dDR2Lo#N^VY.]1Ju^==[3Hp5Mg);0f`g
%P)g6SjNF<]e2,2=`^gVBDN`OraRgHD!^&TeCI`KB0KSK%^'rXfBSbUL2HDCjG*OJ%3qc:)9`)f#'m@kP,'-Nge!HK.J%j4<qH3$B
%(eA.J%=s?K%SSgEkL/4Ye4a&c4,I!r=_R$]gsJ]5OWerR.4UoFK@EH-1RQ96'WDNpGmgAX6DN%e_2kp7pm]qq.8Hc("q,sSa;+$<
%G?R?]TeFu_TF.[h).RK.Vpclh[6\\s1C-SVal$0hC@`CIRQTeAREHc_8%EbANA'u5bdH3nHEYHf=bcmPN"O']oDpG!B5*2BrL17O
%f/Kc>AT@BneEi4]B@(\'3-fB)fG.4GELcdC'Lhj,>9nYfnK3!@W&`KNbrUC\[UjQ]!XB]1*hI'&0?XEEWO7]ZQ]u:*JP,j<K2b&F
%kr.%@51%#:LBK)og9:ZkOe33,fnW,goFkFVc#^(LW1(2P-Bl^tK._6V`-"G]9F$(DG5?H&53DWhh$[LTpB-Ysb$.Hi?6X6Wd@@\o
%67VF!o`8%<miL1%Fu,3JCV,GU5(7nE&cY]hqW2)#P_&F\Z5^2CnT?1?#.!tG285"]OLC'="9"YT2&W@mj&f]9*AE8\8E:/Z:6pl2
%+cE'IT;BUc`?N6S)R]WZHbc6%,_f/^MT0cW93UGdR),6CiA6m"jN5nJX7hqiq,kH\flG!hX%J6f=VhX1l;0jC0*H1,,_Hh,'1j)g
%T:#o^[emoQR&bk'TY+ZhN^4_:Teo?K_?A\!:e9C8j*S,'?jt<,a+*0L"mWqB81Q_<MDB4n%45kc4(27:!pRoW5?1-0(+b8n]aIqn
%!b^NjP6OY,7/ZSSqg\*V/p65NatW]qO!,UO>XG!;$>Fb\N^B^hr33-7^qS%FE<_4K\D;[_[d'%opk1)UK=M?(_1:6]ZJs,^*/_2)
%&uF&U`Rm7D(RseXXHb5_OO>F\#X1N)"98a+$Y%[hIY0IDYu*f5-];X@L('n2!3Sf>.D!gJDHOghjRtIgCU\q,'o_NEX4dLB8Y%Y1
%\c-&Qai"j*,m$^KCiQba3A<!"%*&s]8dZSdjigF)Ff0l/4@CnPTNLDS`YL#bANDdudl.NS)4+nnR8dfjh1U1%+5)mKS)nKB<%99j
%d-8LRP75n"0[e?b^?ZKDp>2+lg_uJC54uA!!3b[VXYF;3+?<36K+8ba+R>hRj#@)pWKqh;RMD@/%f>>@>_[<b1=?:]SP=tmJG'qq
%p]D$`lcDiA?u^,(,U]o&mHFhaMfoue\3TX=-g`ZdKmX:N:,ic%)tDcjk4<]^a+"V=_NF[-Dd/\f#,-dO<9$+t+4r6?e+=]W&;`Vs
%Ek/mH(RoP#Z$q`E#mqYL4T`/^WZW<)$A`NbJ.uet)\C-p&:rWXSLc/-hf=seiOt7p,ae\#LOr0@q%=kD!\\(\Q0oV`/)iBKK.SWn
%Os'g*C>/afSlrD$Ws0k\7M+Sh)b.*uH\*g@-:e/J+atXK9^kC&AUG`5G%n&No8AZ;/Vp0CDYrq26]CAg@Y(tl:?%eQ3-js)+P=<J
%&p'4oKDsD;AAH`jd,@O>!=.l+FRR9/T95rU&$5%LER<QVW=TR`lMD/j^F*.'n.44@:c+-UqJtd\8fS%"Y6NBgGB-%<7N`o28N,\r
%-t/![9?e*j,jQ;;_dj8+97)E@kHls+E^1P>S@dp\#@Dh:@.>M5r"(dT5"8<<kAH6PXt=WaNY`gsWR,`B4jSXOeE;Bjd7@YT7o@)G
%_g?M.'F5aK'QZ_fH]47mc5U<\+=ZOW2d-Ft+sZtQZ<>B_@N\kU)[6@pH\%`u.p789]NO*Bii(5B)PM7uB=C0KR_'Zg=o5<3i7r[_
%5!0tUT5Jodl/9AIXB_DQXKG7t/36&;$'LMscW+k5OIHOlkWh,BmKKIjFuMA9/T'lIC:<&GD4@e(5e1sRMXO#PZU(Iem[kZH",+Ms
%)DWsfT]%>;D1X%P]ti@m*jmjgE:&31.gU5FN4nJh'n2R6<P%hA'VWmaF07Uoeak151-r30G>eCR'.=L7%0@[^&s9bODFP9A&P3U,
%S>`$X?=7eR!X:Mh\5ELeW;#PQ.mUl:N]*[m8XRm*\b(6#M4.C+$nP%gJg3,L>i4LfKC.?Qo)cYT[n6^a'o\V*]JoEtM9Y\5nQ*%m
%0+fHm]]7BdcEZ!JU88WuU`9,u`KaAKPs.7l\dr.rPd48d,q<(5lNc'X5(OjHOh%+/GP;R(5[m@h;/e;>-GkEL"kFY).;cqT8.)d*
%o\C2LSTArf,*M*X1`b\Q</`\t/ABM3E;O;o#>:ctJq\>ZF2c6^6+T\F'W5W..6@R-Ahd95UYo0:oBph:l'b[\`#:D0fJuBR?:l8@
%7Vb2=@gbU8$&[QIhY\<J(G"QM)s97I7*C*o"$me;WeGuIj9mF-W8bIaS18@3<VN\*0/<VT5Qf/,HS$6_mO+<j4kVpKrIsmW0d*0H
%&)>o7h5_2qBH1eikKcP2_k1LqMfj&NN`t5SBJWoQJZpt4gZN"L:g\"R]p?.VB-'j=XmZbcCa`GJY'Tok@(c>T_^DFEW(@9dSWZ2!
%)8k%YA7$MW%3#RHL$Y,MWKM^\=Z^b'hpKT.>EbM"%EML_(m7M9>6M"$m%6#tN[Khri7iu$OJa0[ifTe[FKWd;[V$RMe#Os,&;[@T
%LkN>1&T#KgfnKkPdf0GS!D[]$b4LD*g-YjW92WSViFdT(M2_Ru\9HsF%`"Y^okUf>")D_N$'L?5^);c/+7$H`hNNrmG63[b<<e"V
%XVsWtB^@j)*otRVgD$'gQ?7<0:U3fkSS2:CrSoT/_5Bia%DU<1emt)Zjb9Z^!O7L\(\agq(_J1Q/VFi36CNl+0m?eLRXnI/(<TH=
%&IGa:D8PGfgfb*hIhLSc*k$XJ>B!e<\Ne<HFko(0IJE*&Pf:^86S*q3"H-`*-ZC5l5m'HR7`6N@ZqV@*'O_$*2i^X2">GAu,<HQ\
%o!m4d*aTJBkmIe3VWBK`.maP(dUFL<E5\m!1RVLccQSXZ@gZL58=\GPr>:[&_4PlE2>M?6.g9P+0<*G"aC=2Z>G?4?`tU>TZ^Ri_
%eOaG$eNJt>nJUA/)nne7^+&:rfQ.(>pef3@7,h6K6Ih=g#nSO[2G_<$]MMeK!-&4YS['o$',2KHl(J/L$7I(b8Qp*FC?#:\1QF;l
%p_gdO+Q=%r?&2$N<(<3=EMeL>'o^(O!90qs2cE+`N*uHfHk$faP2@(iFio%)NC6Y#+ebfr-PR\j(YSBAfATf`I1F$'&0T/Oci)PV
%jo.`P`o5AN1Fk3ZH8#e7"r!NjofSPupD:UCALN];ZW_Gg9+Krb+>/;'5@FZ*)U&[GJD*bNae-]*j2!i`GSs33(W#*@0\M*n:SZ$d
%9!@Cp9tUpu-82,#rqK@9URALt?]QNJ$t_V]-=.DkcY53h(S4+fd\2"E:WV'O4D+tK3JGp)pF:Ub704@q[(M*7_?MOK>lZmh&J&i;
%:)>UE/65;P\B=4g8^\A>FJ;:!-,d<4U!tBGVjB$CCj>IYK<'3:$NboI3th-6pW*`#.NE./WO+E&V@#]*+p:Gf-M36Z:S@7+S:N%Q
%F:HTta!AHlk80""q$&V;c8_2O>tkI7*VePt@jn,pAY>7.ZGRXeTm4gd#1YK-]*4q+"c-t5UksWi(J(R?e]`)A\;%ff9tp`#9r_u0
%ajCP2>#krE>KrVUF3-/D6+/q?YYG:I1]5ReDD+eT<'j\e6<FJLZ$Zskb^KV+h!7WB@L9b8p_%e`:`pJE3+hoG^]p9L;R+#.71W.P
%'Xq"3n%heKa'b9o4lijodeHQeT,(k//+H>OC]"GC'*'U%iApWaYF@:=-5>T^Y3t%PSlH"B`W>[#7.1Rd8uHG4^W1-FT>9LC++q1`
%H5$&@V&LNLp.MiK#RT7*m'8hJ7]JG7HpRi;L*?X-PZ8)h_1@NKhWifkJl0%eGrK:d6^orgr^Ms68MDD\E9CskY,fVH(Y:EWr('+h
%Y`kh.QL#q7jJiL>%>cZRhTr\RJ^NS]o'lTJbH>4[b(LdU8_ppUAuqo^^Y`_'O#eSH)/l1K%Xm$?5Sp`\31s(8S^>r.4/$1Z;Cr,_
%D/a.q;S%)!M<qA/Q'C7^K5;jjXq'2*XH_1T[@[Pab7')88tl?TU$ZtUZtfLtas&tEd<Kp=%54DaLlt.Y9l&/l8$d9a[FSOF5s4F[
%DC!7XU$cVmI*+HqiI:OR*09rnc]N.=X+#KcnGLOHm))XoPHFsC?YiFq'#S'1k/Kjuo$TSoB!iqA>1qiF#o-HRTO\0jesZU0R9I'J
%0OfNMH!up=-9rh[;+c]*!/;G_.#?6U6#7!Oj,Oqu\:L"rrTNtW<B,d3&NK9qAKtKR)'k^"W8Eel:m+R>bF0:eif;ZkK9f6cW2(\:
%AIUjKhB"a-ib3s>q&'ZF1Sr"c#n:YN,#@d<UTmpnR3atT%%O*CMSb<\]P'gjm+u.(>mkj=C+:'=3QC-'jR+XP'mS[hW#UoXTi%r[
%d$0S&D9+ggEq`2k:ll+5)OQZ0/GDrqn,=OW+^Rq7KLKuuP,+sY#;!9jT0^sE[![Z5XaQ(l#@"_ag(FH(JlPD[$:G'FTYWJD``Sit
%e^X-r=P$OmjhoWPg5]@_Tm9rfP[jM.lM'6uLabm@,:U3);=)1h.3NJV=a`[`6pd1&ljH6>:-#+-.(.^2`tnk+*CR$+d)o+F=EuJ:
%i6W1DW^dd/DR=4W,(1uG:mo\tU_b%g(l6XB\@<ie!m15FGTaIW>0CQ\"M1a%p*R=Wl5BpB2fF3eI-s`2WmS+'O>6*[NN)r&5(4#1
%qEO>E9<jas-dd)WP'GraHedd'DX(Fs.ToXN?p$I\h]]JkXkU-od.KMJn%sE?@+P4Db>cnrRnV?X:Qr+)[VqqOC)1o)X/AIRBgKQe
%c^I4[FSo*r$=YXGK5,^.#Z_VPrAm(W)"ncAS%7=r'EZb5BC^!Fp91#37.kSfLo\XakATGK\YU6mJ/HO7qF<St-&YOc\G$;K$ZNES
%ghhI!KDUod\)4B;gL'DBd/+[eBDSFl;gBF$D$E)Jo@TsjiO$!7nKon5SGA!<Il_EuiY^^R*d17^];?cIXO#jpWK8X15;b/Z0AjuD
%FQ]iT1S9<nI%@q_WJ3c[AD6/29SWHed!&0Nc`lR?MFp^pl$R\j$/mhETKR3/W&.Q"ph@(%aH=Ok&5L9Q916>#?BEWbE</l4`<l0c
%ESUQG16,D*[Z!k+cW^U:[(,!8>6_s^FIV\MirYaZMuu1\)$bD&)9;.=S)<qnQeO9]-&:9h?aku$[u=\'N*j&QO.e!!KO@G`%YT_D
%LXd-#Kl_n@"I#?R)l*P:[(jDS9RZRI;G+BBpBdXio[U)'Up0RWM+$d7RmuaNAI'D=]7=9:BbYmL\%b7Q/$;,qp?G\+TprdkLnifS
%m+`.&<E7q08&q%QcodT&#o14XLdl[m;ZQkb8K#L)JSB#C5E#YGVLd74??UI"b@FPD&Mun4V+dk)2]+#Gn\!8."MDC\EHKn\L8$`0
%JZ7JLCajm2c>*H##lDG!1mNWJa*QA%i,4pIN(Qft1'92"b-IGZMCrgbqr5:H<`&.P\URN9`2@PsX:o6.,CL\dVEu8QQ**lX7]/_f
%UBLsj+l'K:]>?_`N)[Fg/"+#=_)s*81Ah%bd3K>nOoq/E<ju-Y<cQe8:Up-X+D2)SA&)L\l4d&(2L3B+'rM(e.NW;<$)3896`7&W
%(*FcEqi8GT+mGBR>J"JX#s]r4mNH#?T%\@78>,\%%'T8aO=[N2du][.W:n]%aCB6R,-3[.jYS0#YuV2Cmh+eTSI=P*7!dRIX$%Y?
%HQ/j`\UDBA3$8gO.eIG/$%\#M>VE[o+J%AFlnYV`e6V;Lra^nNOV'K=Y[(#+U=FOA%kPStnhe1`QP8\e5[IU%R/@/,n+kgdX&kU2
%=Jqe4f3TOP[1:gR%WZ+2/#-MIjN5[J>OUYa5.RfO`]giYQ/mtXK!Z=QL`V-=[A<2e:-?h<h]!*hk6>kmq0@;IMDk.(&UB&>B!kMp
%^$7)h;h<R%!b%WD&@*[,<`8c\eu-/\/RPB8-\Tgt6Ir_ZcfpQ^MDD-4PFTNVKkjdiEK9.[2.03sDjDD-ZW,YRMOitt=$r*RY:9Wf
%_^HK,\g,FTKr?I/5&5m%JK/S#W)G&tEb`e(]p]*mb$fC-:EmLFmA(j$3`VRrT[EPI)M;&$=]&"`^"WEM`9;>P);207#-pcN.V8=t
%][>G$"NhN+K.*mT8hrW^&<qH-``+CkY8%,T#De*g.>iOiIJAO^(fM.3jN@IV*+Zl`kK=>Yfi\rm&eN6T"*BlQeYWD))kgS#<lM<i
%n#MV$JCVAFe!ZR=61$S6B@3Krp:PL2QSK.0P]&:7*#V5rlQ9,qBkVM:YDb%K1#7qBSQ#_74];Ot1OS`D3(>ZsH?+%=DIY/I7ik57
%+`KqT-L["S&ptN:9^t]2*i#/A'X=V)9@k^`B>q;t'cYnX/AkLI#R4EX;=:6B,Vn;4aI$G3%=7FWT3Z;[,d`]1ceabBceb&9--i7H
%;a)[iaf1c'et6YPW:O\Yik^Kn]5SY@F?_Gt2^3+kcK_n6k-hT\5Vou`Af\(N5O_P#S;:^:S\p*.aEI^M>!'NR'_1TIeRob]5^H$a
%6V,&q+>YP$G7+t4mRSPQXiagP"t.3TP"#W_Qg_EpMqi'FC#>-(KR&K4RHNlD>C`*Md`sYh//4X1IM7tl#$OGAciIsF5H@a_#1=(n
%Ud.l7B8P\q:6[4Vnm%2Y3e1eV3O>;2Ve^\04-)Gm[<'$DLH@?g_14+'/10QR1C0e8ZB6O\D;)5XS0Oi_1..)H`?t`MjaK_\#6H=N
%34-+fVE/\RMsdrKX83&In&al!KqtuX\Sn1ZOC^D/5+GW5Bs3Xj<5Q-V7WKl7SHgd_qSdABn@F6eLc_^@5!g$M"l-0JI3($O5/Dq$
%ETO3AY5@]KU\+)1rD/S%*1UojfN^pfm-7S]lj[kna@\eAC:s"]F7>/tUSiFK3A/76Yj#geK/TG`Ihu4O2LuH+I0741>"f-^g>)&;
%lcYtC#`';N'5S!t,"-lC'D=?U3]j/eOn2!==*P5j!c=#l#`J+Qc]*Wd+[NJZo15%[g+umT!TuR_6)k:;Yi]/0;FkC&H\a+TO\ii]
%Jo$CeSRr>f&<N>EOC";2gT'%&\o(%S%NppiP_Pcgi#;bRp&OH,!9?):h(E<f@bGJ;0,3>&lFROqAa[]*J6a3u*5kJDcGcc<kj+T`
%L-BJAgjNAkC('^G:MVQH&TU#O0?VM^b=9Z!aFY;\X#+\UVZ,F##r&9?Hb2&f$&PFkfS$l#fLueg/SIa^^)'tb'!@]ZgEL>E`o_"J
%B=q05$'Bi#XfiIX$ljji&#QFrAB5P)8l;T2"=6Z!-'d<^9p>fcQm%aE)MWm=;!q#1\.XGZVG]YqgK:i.66E4e,:_Eb@VuNf`NbB[
%Wja$llcVb1aA=6k91Kbd'o-&*]2:o#T`N,HW%rF]O:$@Yk>RV3;b;jW%TM$i$Y9PjA\J^aefl:"OTOOZs43OVBgR;e=+!IH^,Ar*
%#UJOA$Q7E1!Hj&0,EZA7Q2.pdPmd`47i"[MQOU3gN)5Wf"0<[-jqC``0Q[`n4nEQ2[]@-Rl-u&Z9uiC7)?igGpXgaR-Z0W[4PbU0
%&YrrS5c=h"'0iVb#1gf2"Rg]2.XA'h*sW@*q$Y;s.NVH/)2.^h79&o!82c*7bt%9XXDj@GSJ_UPg5,j<m%tnNE9f.[2[&eY>\4$!
%VH5:6AE`"a+=(]u9'/7DUi3"=mu(.25af_s<upt47pe),!V;%Y,U<fYeFZLL'M[1K8PMg3@6i'3,*]G`"YnBZRF5+\#\hO3UP<GX
%(>MScr;e3j)?<VQ"AiN%2Bc1pDfr0<8V+`B#Lr#q`/IV](0f!4QFJa(Q:YUg)c=t&D`$uG4E?]'V!n]J&,&3aAnmr)0;o;:W%*MI
%I?XNhLE!hmf4QEL5;>R)2,0YQ]i^77NgM66&>OcM%]"V!hl>_<^*c[^+Ba5FC[neF#79$6P+dCu)aHFPO/]O->T8D5[c6sA3'U8U
%*G&RZEX/qi;Bl+YCQW+/k$H`na2@iBKNcgkVT8dROu%jE:*6/0Em"J=pH"hq1."CQ,8K<2V^mB9c=QGj2)nTcG0J`07u>KCCQ)LF
%!6[q$]oL'pK/%_$eEr=:kEIF>B*GKPlRuf[?<>r1U(\P?95'+3$`^PT$J334Y17?gU6;Ib2*i_4r^Wf5oYTU*m@n%!/3eS*Z]Y?k
%D7K+WY>`uTU\&FHO8uf>V67tEoWnu",4E@7TM3YubMIXqO83^sF.&XM@,0<efEg4a7pY;mZp@j4@2NC#0E!R/g*k4dZq1u;J:Rl^
%j:f!+b5uonVu6[S$g:n#'Tr_5TcUuPS`E]r=OcRr6^kZ`qqsT*qmpp9ZA;pXm3euF&O83gQ#o$K/:GUHqR:PiKL0/ZU'@Q;`pMl@
%J\)HgppC)"_FIHPT:oT-Tn9DB=(um8D0MT6.W1?WB(&u;m7XkN3.X>Pp^7l>mjAZda0^.<,3&]PT-.f0Fm!K9'\Ai>9S7PN'#f<P
%g<QD`aA=cO4YM20Gd][%e9a8P-ZV-6RS^D-WZJQNV728bJsE.rGal:&Pj+tZQ@631O5B\0f6hOL?Y/H9>`aKQ^%A?MCm-HFSmdI3
%I^N&,#UCbt'Fu.VdVW?DenWqU.FKMKd1._<,]+))4@CH.PRee.(PIBoR(#B-Ia<_*ek*09;\3Ee-pfDKNpj/lSiW>!8u/eW(+@Xp
%?%!U\;,e<ZQ)XV-5g+>lK&E?>V3k5MY5SU1JiIf5WE4\qlU[_5k*IY*1@X#jN%DZ3]raYI<7MA,E)$TOUeXb*.&gto;"kDjItO(Y
%dr-"9R?_Lt&RKrM8M*E&X<(5DfaPiOP$&_hC!`fRcoO*HX(*0TgG(gI+W1L#UQePC++]_7<8>iH="3cn\CYYgSso*dn7nGa#oRMZ
%n.\-q<Q\Qfm_hur@n3?`T/.t^LRgqlX%E"u2L_7q%X+HPl_Ef>Hj8)!4^el:YimetAttL^,qG].Mi?(%g,_bGnVn#0c^8Fem4+.#
%S1T3T#2W[oDkdj>>cKl.?bFBGe@Co9S=ieb0'L^HbO(<k]Btpq"gWV$\[L[eUUkO=lOc#JBLIiO7hj)Q:f'/<(<3p,;/@7\jZD?0
%SpgAiNi*f**mosRO6CTRBqY/E:=,sl-Zh<DFM%Kd\,Gm(O6HQB])M(Us&f<omskAlqepu^mea3%>/4MFe$oANh7n@;mI)+1qu3eu
%e%bkOgE4.VoBl!rO1Tl8hq(*+q7#h-qr==JnGRQLrqPr3p`Db?d;d!0s7P:L+91)&rMTZ%?9GGJ~>
%AI9_PrivateDataEnd
